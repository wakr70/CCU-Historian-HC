{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.0 (2024-03-04)\n *\n * (c) 2009-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/highcharts-more', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Pane/PaneComposition.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { addEvent, correctFloat, defined, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function chartGetHoverPane(eventArgs) {\n            const chart = this;\n            let hoverPane;\n            if (eventArgs) {\n                chart.pane.forEach((pane) => {\n                    const x = eventArgs.chartX - chart.plotLeft, y = eventArgs.chartY - chart.plotTop;\n                    if (isInsidePane(x, y, pane.center)) {\n                        hoverPane = pane;\n                    }\n                });\n            }\n            return hoverPane;\n        }\n        /** @private */\n        function compose(ChartClass, PointerClass) {\n            const chartProto = ChartClass.prototype;\n            if (!chartProto.getHoverPane) {\n                chartProto.collectionsWithUpdate.push('pane');\n                chartProto.getHoverPane = chartGetHoverPane;\n                addEvent(ChartClass, 'afterIsInsidePlot', onChartAfterIsInsiderPlot);\n                addEvent(PointerClass, 'afterGetHoverData', onPointerAfterGetHoverData);\n                addEvent(PointerClass, 'beforeGetHoverData', onPointerBeforeGetHoverData);\n            }\n        }\n        /**\n         * Check whether element is inside or outside pane.\n         * @private\n         * @param  {number} x\n         * Element's x coordinate\n         * @param  {number} y\n         * Element's y coordinate\n         * @param  {Array<number>} center\n         * Pane's center (x, y) and diameter\n         * @param  {number} startAngle\n         * Pane's normalized start angle in radians (<-PI, PI>)\n         * @param  {number} endAngle\n         * Pane's normalized end angle in radians (<-PI, PI>)\n         */\n        function isInsidePane(x, y, center, startAngle, endAngle) {\n            let insideSlice = true;\n            const cx = center[0], cy = center[1];\n            const distance = Math.sqrt(Math.pow(x - cx, 2) + Math.pow(y - cy, 2));\n            if (defined(startAngle) && defined(endAngle)) {\n                // Round angle to N-decimals to avoid numeric errors\n                const angle = Math.atan2(correctFloat(y - cy, 8), correctFloat(x - cx, 8));\n                // Ignore full circle panes:\n                if (endAngle !== startAngle) {\n                    // If normalized start angle is bigger than normalized end,\n                    // it means angles have different signs. In such situation we\n                    // check the <-PI, startAngle> and <endAngle, PI> ranges.\n                    if (startAngle > endAngle) {\n                        insideSlice = (angle >= startAngle &&\n                            angle <= Math.PI) || (angle <= endAngle &&\n                            angle >= -Math.PI);\n                    }\n                    else {\n                        // In this case, we simple check if angle is within the\n                        // <startAngle, endAngle> range\n                        insideSlice = angle >= startAngle &&\n                            angle <= correctFloat(endAngle, 8);\n                    }\n                }\n            }\n            // Round up radius because x and y values are rounded\n            return distance <= Math.ceil(center[2] / 2) && insideSlice;\n        }\n        /**\n         * Check if (x, y) position is within pane for polar.\n         * @private\n         */\n        function onChartAfterIsInsiderPlot(e) {\n            const chart = this;\n            if (chart.polar) {\n                if (e.options.inverted) {\n                    [e.x, e.y] = [e.y, e.x];\n                }\n                e.isInsidePlot = chart.pane.some((pane) => isInsidePane(e.x, e.y, pane.center, pane.axis && pane.axis.normalizedStartAngleRad, pane.axis && pane.axis.normalizedEndAngleRad));\n            }\n        }\n        function onPointerAfterGetHoverData(eventArgs) {\n            const chart = this.chart;\n            if (eventArgs.hoverPoint &&\n                eventArgs.hoverPoint.plotX &&\n                eventArgs.hoverPoint.plotY &&\n                chart.hoverPane &&\n                !isInsidePane(eventArgs.hoverPoint.plotX, eventArgs.hoverPoint.plotY, chart.hoverPane.center)) {\n                eventArgs.hoverPoint = void 0;\n            }\n        }\n        /** @private */\n        function onPointerBeforeGetHoverData(eventArgs) {\n            const chart = this.chart;\n            if (chart.polar) {\n                // Find pane we are currently hovering over.\n                chart.hoverPane = chart.getHoverPane(eventArgs);\n                // Edit filter method to handle polar\n                eventArgs.filter = function (s) {\n                    return (s.visible &&\n                        !(!eventArgs.shared && s.directTouch) && // #3821\n                        pick(s.options.enableMouseTracking, true) &&\n                        (!chart.hoverPane || s.xAxis.pane === chart.hoverPane));\n                };\n            }\n            else {\n                chart.hoverPane = void 0;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PaneComposition = {\n            compose\n        };\n\n        return PaneComposition;\n    });\n    _registerModule(_modules, 'Extensions/Pane/PaneDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An array of background items for the pane.\n         *\n         * @sample {highcharts} highcharts/demo/gauge-speedometer/\n         *         Speedometer gauge with multiple backgrounds\n         *\n         * @type         {Array<*>}\n         * @optionparent pane.background\n         */\n        const background = {\n            /**\n             * The class name for this background.\n             *\n             * @sample {highcharts} highcharts/css/pane/\n             *         Panes styled by CSS\n             * @sample {highstock} highcharts/css/pane/\n             *         Panes styled by CSS\n             * @sample {highmaps} highcharts/css/pane/\n             *         Panes styled by CSS\n             *\n             * @type      {string}\n             * @default   highcharts-pane\n             * @since     5.0.0\n             * @apioption pane.background.className\n             */\n            /**\n             * The shape of the pane background. When `solid`, the background\n             * is circular. When `arc`, the background extends only from the min\n             * to the max of the value axis.\n             *\n             * @type    {Highcharts.PaneBackgroundShapeValue}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            shape: 'circle',\n            /**\n             * The pixel border width of the pane background.\n             *\n             * @since 2.3.0\n             * @product highcharts\n             */\n            borderWidth: 1,\n            /**\n             * The pane background border color.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The background color or gradient for the pane.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default { linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [[0, #ffffff], [1, #e6e6e6]] }\n             * @since   2.3.0\n             * @product highcharts\n             */\n            backgroundColor: {\n                /** @ignore-option */\n                linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },\n                /** @ignore-option */\n                stops: [\n                    [0, \"#ffffff\" /* Palette.backgroundColor */],\n                    [1, \"#e6e6e6\" /* Palette.neutralColor10 */]\n                ]\n            },\n            /** @ignore-option */\n            from: -Number.MAX_VALUE,\n            /**\n             * The inner radius of the pane background. Can be either numeric\n             * (pixels) or a percentage string.\n             *\n             * @type    {number|string}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            innerRadius: 0,\n            /** @ignore-option */\n            to: Number.MAX_VALUE,\n            /**\n             * The outer radius of the circular pane background. Can be either\n             * numeric (pixels) or a percentage string.\n             *\n             * @type     {number|string}\n             * @since    2.3.0\n             * @product  highcharts\n             */\n            outerRadius: '105%'\n        };\n        /**\n         * The pane serves as a container for axes and backgrounds for circular\n         * gauges and polar charts.\n         *\n         * @since        2.3.0\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent pane\n         */\n        const pane = {\n            /**\n             * The end angle of the polar X axis or gauge value axis, given in\n             * degrees where 0 is north. Defaults to [startAngle](#pane.startAngle)\n             * + 360.\n             *\n             * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n             *         VU-meter with custom start and end angle\n             *\n             * @type      {number}\n             * @since     2.3.0\n             * @product   highcharts\n             * @apioption pane.endAngle\n             */\n            /**\n             * The center of a polar chart or angular gauge, given as an array\n             * of [x, y] positions. Positions can be given as integers that\n             * transform to pixels, or as percentages of the plot area size.\n             *\n             * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n             *         Two gauges with different center\n             *\n             * @type    {Array<string|number>}\n             * @default [\"50%\", \"50%\"]\n             * @since   2.3.0\n             * @product highcharts\n             */\n            center: ['50%', '50%'],\n            /**\n             * The size of the pane, either as a number defining pixels, or a\n             * percentage defining a percentage of the available plot area (the\n             * smallest of the plot height or plot width).\n             *\n             * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n             *         Smaller size\n             *\n             * @type    {number|string}\n             * @product highcharts\n             */\n            size: '85%',\n            /**\n             * The inner size of the pane, either as a number defining pixels, or a\n             * percentage defining a percentage of the pane's size.\n             *\n             * @sample {highcharts} highcharts/series-polar/column-inverted-inner\n             *         The inner size set to 20%\n             *\n             * @type    {number|string}\n             * @product highcharts\n             */\n            innerSize: '0%',\n            /**\n             * The start angle of the polar X axis or gauge axis, given in degrees\n             * where 0 is north. Defaults to 0.\n             *\n             * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n             *         VU-meter with custom start and end angle\n             *\n             * @since   2.3.0\n             * @product highcharts\n             */\n            startAngle: 0\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PaneDefaults = {\n            pane,\n            background\n        };\n\n        return PaneDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Pane/Pane.js', [_modules['Series/CenteredUtilities.js'], _modules['Extensions/Pane/PaneComposition.js'], _modules['Extensions/Pane/PaneDefaults.js'], _modules['Core/Utilities.js']], function (CU, PaneComposition, PaneDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend, merge, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Pane object allows options that are common to a set of X and Y axes.\n         *\n         * In the future, this can be extended to basic Highcharts and Highcharts Stock.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Pane\n         * @param {Highcharts.PaneOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Pane {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options, chart) {\n                this.coll = 'pane'; // Member of chart.pane\n                this.init(options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize the Pane object\n             *\n             * @private\n             * @function Highcharts.Pane#init\n             *\n             * @param {Highcharts.PaneOptions} options\n             *\n             * @param {Highcharts.Chart} chart\n             */\n            init(options, chart) {\n                this.chart = chart;\n                this.background = [];\n                chart.pane.push(this);\n                this.setOptions(options);\n            }\n            /**\n             * @private\n             * @function Highcharts.Pane#setOptions\n             *\n             * @param {Highcharts.PaneOptions} options\n             */\n            setOptions(options) {\n                // Set options. Angular charts have a default background (#3318)\n                this.options = options = merge(PaneDefaults.pane, this.chart.angular ? { background: {} } : void 0, options);\n            }\n            /**\n             * Render the pane with its backgrounds.\n             *\n             * @private\n             * @function Highcharts.Pane#render\n             */\n            render() {\n                const options = this.options, renderer = this.chart.renderer;\n                if (!this.group) {\n                    this.group = renderer.g('pane-group')\n                        .attr({ zIndex: options.zIndex || 0 })\n                        .add();\n                }\n                this.updateCenter();\n                let backgroundOption = this.options.background;\n                // Render the backgrounds\n                if (backgroundOption) {\n                    backgroundOption = splat(backgroundOption);\n                    const len = Math.max(backgroundOption.length, this.background.length || 0);\n                    for (let i = 0; i < len; i++) {\n                        // #6641 - if axis exists, chart is circular and apply\n                        // background\n                        if (backgroundOption[i] && this.axis) {\n                            this.renderBackground(merge(PaneDefaults.background, backgroundOption[i]), i);\n                        }\n                        else if (this.background[i]) {\n                            this.background[i] = this.background[i].destroy();\n                            this.background.splice(i, 1);\n                        }\n                    }\n                }\n            }\n            /**\n             * Render an individual pane background.\n             *\n             * @private\n             * @function Highcharts.Pane#renderBackground\n             *\n             * @param {Highcharts.PaneBackgroundOptions} backgroundOptions\n             *        Background options\n             *\n             * @param {number} i\n             *        The index of the background in this.backgrounds\n             */\n            renderBackground(backgroundOptions, i) {\n                const attribs = {\n                    'class': 'highcharts-pane ' + (backgroundOptions.className || '')\n                };\n                let method = 'animate';\n                if (!this.chart.styledMode) {\n                    extend(attribs, {\n                        'fill': backgroundOptions.backgroundColor,\n                        'stroke': backgroundOptions.borderColor,\n                        'stroke-width': backgroundOptions.borderWidth\n                    });\n                }\n                if (!this.background[i]) {\n                    this.background[i] = this.chart.renderer\n                        .path()\n                        .add(this.group);\n                    method = 'attr';\n                }\n                this.background[i][method]({\n                    'd': this.axis.getPlotBandPath(backgroundOptions.from, backgroundOptions.to, backgroundOptions)\n                }).attr(attribs);\n            }\n            /**\n             * Gets the center for the pane and its axis.\n             *\n             * @private\n             * @function Highcharts.Pane#updateCenter\n             * @param {Highcharts.Axis} [axis]\n             */\n            updateCenter(axis) {\n                this.center = (axis ||\n                    this.axis ||\n                    {}).center = CU.getCenter.call(this);\n            }\n            /**\n             * Destroy the pane item\n             *\n             * @ignore\n             * @private\n             * @function Highcharts.Pane#destroy\n             * /\n            destroy: function () {\n                erase(this.chart.pane, this);\n                this.background.forEach(function (background) {\n                    background.destroy();\n                });\n                this.background.length = 0;\n                this.group = this.group.destroy();\n            },\n            */\n            /**\n             * Update the pane item with new options\n             *\n             * @private\n             * @function Highcharts.Pane#update\n             * @param {Highcharts.PaneOptions} options\n             *        New pane options\n             * @param {boolean} [redraw]\n             */\n            update(options, redraw) {\n                merge(true, this.options, options);\n                this.setOptions(this.options);\n                this.render();\n                this.chart.axes.forEach(function (axis) {\n                    if (axis.pane === this) {\n                        axis.pane = null;\n                        axis.update({}, redraw);\n                    }\n                }, this);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Pane.compose = PaneComposition.compose;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"arc\"|\"circle\"|\"solid\"} Highcharts.PaneBackgroundShapeValue\n         */\n        ''; // keeps doclets above in JS file\n\n        return Pane;\n    });\n    _registerModule(_modules, 'Series/AreaRange/AreaRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { area: { prototype: { pointClass: AreaPoint, pointClass: { prototype: areaProto } } } } = SeriesRegistry.seriesTypes;\n        const { defined, isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class AreaRangePoint extends AreaPoint {\n            /**\n             * Range series only. The high or maximum value for each data point.\n             * @name Highcharts.Point#high\n             * @type {number|undefined}\n             */\n            /**\n             * Range series only. The low or minimum value for each data point.\n             * @name Highcharts.Point#low\n             * @type {number|undefined}\n             */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            setState() {\n                const prevState = this.state, series = this.series, isPolar = series.chart.polar;\n                if (!defined(this.plotHigh)) {\n                    // Boost doesn't calculate plotHigh\n                    this.plotHigh = series.yAxis.toPixels(this.high, true);\n                }\n                if (!defined(this.plotLow)) {\n                    // Boost doesn't calculate plotLow\n                    this.plotLow = this.plotY = series.yAxis.toPixels(this.low, true);\n                }\n                series.lowerStateMarkerGraphic = series.stateMarkerGraphic;\n                series.stateMarkerGraphic = series.upperStateMarkerGraphic;\n                // Change state also for the top marker\n                this.graphic = this.graphics && this.graphics[1];\n                this.plotY = this.plotHigh;\n                if (isPolar && isNumber(this.plotHighX)) {\n                    this.plotX = this.plotHighX;\n                }\n                // Top state:\n                areaProto.setState.apply(this, arguments);\n                this.state = prevState;\n                // Now restore defaults\n                this.plotY = this.plotLow;\n                this.graphic = this.graphics && this.graphics[0];\n                if (isPolar && isNumber(this.plotLowX)) {\n                    this.plotX = this.plotLowX;\n                }\n                series.upperStateMarkerGraphic = series.stateMarkerGraphic;\n                series.stateMarkerGraphic = series.lowerStateMarkerGraphic;\n                // Lower marker is stored at stateMarkerGraphic\n                // to avoid reference duplication (#7021)\n                series.lowerStateMarkerGraphic = void 0;\n                const originalSettings = series.modifyMarkerSettings();\n                // Bottom state\n                areaProto.setState.apply(this, arguments);\n                // Restore previous state\n                series.restoreMarkerSettings(originalSettings);\n            }\n            haloPath() {\n                const isPolar = this.series.chart.polar;\n                let path = [];\n                // Bottom halo\n                this.plotY = this.plotLow;\n                if (isPolar && isNumber(this.plotLowX)) {\n                    this.plotX = this.plotLowX;\n                }\n                if (this.isInside) {\n                    path = areaProto.haloPath.apply(this, arguments);\n                }\n                // Top halo\n                this.plotY = this.plotHigh;\n                if (isPolar && isNumber(this.plotHighX)) {\n                    this.plotX = this.plotHighX;\n                }\n                if (this.isTopInside) {\n                    path = path.concat(areaProto.haloPath.apply(this, arguments));\n                }\n                return path;\n            }\n            isValid() {\n                return isNumber(this.low) && isNumber(this.high);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AreaRangePoint;\n    });\n    _registerModule(_modules, 'Series/AreaRange/AreaRangeSeries.js', [_modules['Series/AreaRange/AreaRangePoint.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AreaRangePoint, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { area: AreaSeries, area: { prototype: areaProto }, column: { prototype: columnProto } } = SeriesRegistry.seriesTypes;\n        const { addEvent, defined, extend, isArray, isNumber, pick, merge } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The area range series is a carteseian series with higher and lower values for\n         * each point along an X axis, where the area between the values is shaded.\n         *\n         * @sample {highcharts} highcharts/demo/arearange/\n         *         Area range chart\n         * @sample {highstock} stock/demo/arearange/\n         *         Area range chart\n         *\n         * @extends      plotOptions.area\n         * @product      highcharts highstock\n         * @excluding    stack, stacking\n         * @requires     highcharts-more\n         * @optionparent plotOptions.arearange\n         *\n         * @private\n         */\n        const areaRangeSeriesOptions = {\n            /**\n             * @see [fillColor](#plotOptions.arearange.fillColor)\n             * @see [fillOpacity](#plotOptions.arearange.fillOpacity)\n             *\n             * @apioption plotOptions.arearange.color\n             */\n            /**\n             * @default   low\n             * @apioption plotOptions.arearange.colorKey\n             */\n            /**\n             * @see [color](#plotOptions.arearange.color)\n             * @see [fillOpacity](#plotOptions.arearange.fillOpacity)\n             *\n             * @apioption plotOptions.arearange.fillColor\n             */\n            /**\n             * @see [color](#plotOptions.arearange.color)\n             * @see [fillColor](#plotOptions.arearange.fillColor)\n             *\n             * @default   {highcharts} 0.75\n             * @default   {highstock} 0.75\n             * @apioption plotOptions.arearange.fillOpacity\n             */\n            /**\n             * Whether to apply a drop shadow to the graph line. Since 2.3 the\n             * shadow can be an object configuration containing `color`, `offsetX`,\n             * `offsetY`, `opacity` and `width`.\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @product   highcharts\n             * @apioption plotOptions.arearange.shadow\n             */\n            /**\n             * Pixel width of the arearange graph line.\n             *\n             * @since 2.3.0\n             *\n             * @private\n             */\n            lineWidth: 1,\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            tooltip: {\n                pointFormat: '<span style=\"color:{series.color}\">\\u25CF</span> ' +\n                    '{series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'\n            },\n            /**\n             * Whether the whole area or just the line should respond to mouseover\n             * tooltips and other mouse or touch events.\n             *\n             * @since 2.3.0\n             *\n             * @private\n             */\n            trackByArea: true,\n            /**\n             * Extended data labels for range series types. Range series data\n             * labels use no `x` and `y` options. Instead, they have `xLow`,\n             * `xHigh`, `yLow` and `yHigh` options to allow the higher and lower\n             * data label sets individually.\n             *\n             * @declare Highcharts.SeriesAreaRangeDataLabelsOptionsObject\n             * @exclude x, y\n             * @since   2.3.0\n             * @product highcharts highstock\n             *\n             * @private\n             */\n            dataLabels: {\n                align: void 0,\n                verticalAlign: void 0,\n                /**\n                 * X offset of the lower data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                xLow: 0,\n                /**\n                 * X offset of the higher data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                xHigh: 0,\n                /**\n                 * Y offset of the lower data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                yLow: 0,\n                /**\n                 * Y offset of the higher data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                yHigh: 0\n            }\n        };\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AreaRange series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.arearange\n         *\n         * @augments Highcharts.Series\n         */\n        class AreaRangeSeries extends AreaSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            toYData(point) {\n                return [point.low, point.high];\n            }\n            /**\n             * Translate a point's plotHigh from the internal angle and radius measures\n             * to true plotHigh coordinates. This is an addition of the toXY method\n             * found in Polar.js, because it runs too early for arearanges to be\n             * considered (#3419).\n             * @private\n             */\n            highToXY(point) {\n                // Find the polar plotX and plotY\n                const chart = this.chart, xy = this.xAxis.postTranslate(point.rectPlotX || 0, this.yAxis.len - (point.plotHigh || 0));\n                point.plotHighX = xy.x - chart.plotLeft;\n                point.plotHigh = xy.y - chart.plotTop;\n                point.plotLowX = point.plotX;\n            }\n            /**\n             * Extend the line series' getSegmentPath method by applying the segment\n             * path to both lower and higher values of the range.\n             * @private\n             */\n            getGraphPath(points) {\n                const highPoints = [], highAreaPoints = [], getGraphPath = areaProto.getGraphPath, options = this.options, polar = this.chart.polar, connectEnds = polar && options.connectEnds !== false, connectNulls = options.connectNulls;\n                let i, point, pointShim, step = options.step;\n                points = points || this.points;\n                // Create the top line and the top part of the area fill. The area fill\n                // compensates for null points by drawing down to the lower graph,\n                // moving across the null gap and starting again at the lower graph.\n                i = points.length;\n                while (i--) {\n                    point = points[i];\n                    // Support for polar\n                    const highAreaPoint = polar ? {\n                        plotX: point.rectPlotX,\n                        plotY: point.yBottom,\n                        doCurve: false // #5186, gaps in areasplinerange fill\n                    } : {\n                        plotX: point.plotX,\n                        plotY: point.plotY,\n                        doCurve: false // #5186, gaps in areasplinerange fill\n                    };\n                    if (!point.isNull &&\n                        !connectEnds &&\n                        !connectNulls &&\n                        (!points[i + 1] || points[i + 1].isNull)) {\n                        highAreaPoints.push(highAreaPoint);\n                    }\n                    pointShim = {\n                        polarPlotY: point.polarPlotY,\n                        rectPlotX: point.rectPlotX,\n                        yBottom: point.yBottom,\n                        // plotHighX is for polar charts\n                        plotX: pick(point.plotHighX, point.plotX),\n                        plotY: point.plotHigh,\n                        isNull: point.isNull\n                    };\n                    highAreaPoints.push(pointShim);\n                    highPoints.push(pointShim);\n                    if (!point.isNull &&\n                        !connectEnds &&\n                        !connectNulls &&\n                        (!points[i - 1] || points[i - 1].isNull)) {\n                        highAreaPoints.push(highAreaPoint);\n                    }\n                }\n                // Get the paths\n                const lowerPath = getGraphPath.call(this, points);\n                if (step) {\n                    if (step === true) {\n                        step = 'left';\n                    }\n                    options.step = {\n                        left: 'right',\n                        center: 'center',\n                        right: 'left'\n                    }[step]; // swap for reading in getGraphPath\n                }\n                const higherPath = getGraphPath.call(this, highPoints);\n                const higherAreaPath = getGraphPath.call(this, highAreaPoints);\n                options.step = step;\n                // Create a line on both top and bottom of the range\n                const linePath = [].concat(lowerPath, higherPath);\n                // For the area path, we need to change the 'move' statement into\n                // 'lineTo'\n                if (!this.chart.polar &&\n                    higherAreaPath[0] &&\n                    higherAreaPath[0][0] === 'M') {\n                    // This probably doesn't work for spline\n                    higherAreaPath[0] = [\n                        'L',\n                        higherAreaPath[0][1],\n                        higherAreaPath[0][2]\n                    ];\n                }\n                this.graphPath = linePath;\n                this.areaPath = lowerPath.concat(higherAreaPath);\n                // Prepare for sideways animation\n                linePath.isArea = true;\n                linePath.xMap = lowerPath.xMap;\n                this.areaPath.xMap = lowerPath.xMap;\n                return linePath;\n            }\n            /**\n             * Extend the basic drawDataLabels method by running it for both lower and\n             * higher values.\n             * @private\n             */\n            drawDataLabels() {\n                const data = this.points, length = data.length, originalDataLabels = [], dataLabelOptions = this.options.dataLabels, inverted = this.chart.inverted;\n                let i, point, up, upperDataLabelOptions, lowerDataLabelOptions;\n                if (dataLabelOptions) {\n                    // Split into upper and lower options. If data labels is an array,\n                    // the first element is the upper label, the second is the lower.\n                    //\n                    // TODO: We want to change this and allow multiple labels for both\n                    // upper and lower values in the future - introducing some options\n                    // for which point value to use as Y for the dataLabel, so that this\n                    // could be handled in Series.drawDataLabels. This would also\n                    // improve performance since we now have to loop over all the points\n                    // multiple times to work around the data label logic.\n                    if (isArray(dataLabelOptions)) {\n                        upperDataLabelOptions = dataLabelOptions[0] || {\n                            enabled: false\n                        };\n                        lowerDataLabelOptions = dataLabelOptions[1] || {\n                            enabled: false\n                        };\n                    }\n                    else {\n                        // Make copies\n                        upperDataLabelOptions = extend({}, dataLabelOptions);\n                        upperDataLabelOptions.x = dataLabelOptions.xHigh;\n                        upperDataLabelOptions.y = dataLabelOptions.yHigh;\n                        lowerDataLabelOptions = extend({}, dataLabelOptions);\n                        lowerDataLabelOptions.x = dataLabelOptions.xLow;\n                        lowerDataLabelOptions.y = dataLabelOptions.yLow;\n                    }\n                    // Draw upper labels\n                    if (upperDataLabelOptions.enabled || this.hasDataLabels?.()) {\n                        // Set preliminary values for plotY and dataLabel\n                        // and draw the upper labels\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                const { plotHigh = 0, plotLow = 0 } = point;\n                                up = upperDataLabelOptions.inside ?\n                                    plotHigh < plotLow :\n                                    plotHigh > plotLow;\n                                point.y = point.high;\n                                point._plotY = point.plotY;\n                                point.plotY = plotHigh;\n                                // Store original data labels and set preliminary label\n                                // objects to be picked up in the uber method\n                                originalDataLabels[i] = point.dataLabel;\n                                point.dataLabel = point.dataLabelUpper;\n                                // Set the default offset\n                                point.below = up;\n                                if (inverted) {\n                                    if (!upperDataLabelOptions.align) {\n                                        upperDataLabelOptions.align = up ?\n                                            'right' : 'left';\n                                    }\n                                }\n                                else {\n                                    if (!upperDataLabelOptions.verticalAlign) {\n                                        upperDataLabelOptions.verticalAlign = up ?\n                                            'top' :\n                                            'bottom';\n                                    }\n                                }\n                            }\n                        }\n                        this.options.dataLabels = upperDataLabelOptions;\n                        if (areaProto.drawDataLabels) {\n                            // #1209:\n                            areaProto.drawDataLabels.apply(this, arguments);\n                        }\n                        // Reset state after the upper labels were created. Move\n                        // it to point.dataLabelUpper and reassign the originals.\n                        // We do this here to support not drawing a lower label.\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                point.dataLabelUpper = point.dataLabel;\n                                point.dataLabel = originalDataLabels[i];\n                                delete point.dataLabels;\n                                point.y = point.low;\n                                point.plotY = point._plotY;\n                            }\n                        }\n                    }\n                    // Draw lower labels\n                    if (lowerDataLabelOptions.enabled || this.hasDataLabels?.()) {\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                const { plotHigh = 0, plotLow = 0 } = point;\n                                up = lowerDataLabelOptions.inside ?\n                                    plotHigh < plotLow :\n                                    plotHigh > plotLow;\n                                // Set the default offset\n                                point.below = !up;\n                                if (inverted) {\n                                    if (!lowerDataLabelOptions.align) {\n                                        lowerDataLabelOptions.align = up ?\n                                            'left' : 'right';\n                                    }\n                                }\n                                else {\n                                    if (!lowerDataLabelOptions.verticalAlign) {\n                                        lowerDataLabelOptions.verticalAlign = up ?\n                                            'bottom' :\n                                            'top';\n                                    }\n                                }\n                            }\n                        }\n                        this.options.dataLabels = lowerDataLabelOptions;\n                        if (areaProto.drawDataLabels) {\n                            areaProto.drawDataLabels.apply(this, arguments);\n                        }\n                    }\n                    // Merge upper and lower into point.dataLabels for later destroying\n                    if (upperDataLabelOptions.enabled) {\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                point.dataLabels = [\n                                    point.dataLabelUpper,\n                                    point.dataLabel\n                                ].filter(function (label) {\n                                    return !!label;\n                                });\n                            }\n                        }\n                    }\n                    // Reset options\n                    this.options.dataLabels = dataLabelOptions;\n                }\n            }\n            alignDataLabel() {\n                columnProto.alignDataLabel.apply(this, arguments);\n            }\n            modifyMarkerSettings() {\n                const series = this, originalMarkerSettings = {\n                    marker: series.options.marker,\n                    symbol: series.symbol\n                };\n                if (series.options.lowMarker) {\n                    const { options: { marker, lowMarker } } = series;\n                    series.options.marker = merge(marker, lowMarker);\n                    if (lowMarker.symbol) {\n                        series.symbol = lowMarker.symbol;\n                    }\n                }\n                return originalMarkerSettings;\n            }\n            restoreMarkerSettings(originalSettings) {\n                const series = this;\n                series.options.marker = originalSettings.marker;\n                series.symbol = originalSettings.symbol;\n            }\n            drawPoints() {\n                const series = this, pointLength = series.points.length;\n                let i, point;\n                const originalSettings = series.modifyMarkerSettings();\n                // Draw bottom points\n                areaProto.drawPoints.apply(series, arguments);\n                // Restore previous state\n                series.restoreMarkerSettings(originalSettings);\n                // Prepare drawing top points\n                i = 0;\n                while (i < pointLength) {\n                    point = series.points[i];\n                    /**\n                     * Array for multiple SVG graphics representing the point in the\n                     * chart. Only used in cases where the point can not be represented\n                     * by a single graphic.\n                     *\n                     * @see Highcharts.Point#graphic\n                     *\n                     * @name Highcharts.Point#graphics\n                     * @type {Array<Highcharts.SVGElement>|undefined}\n                     */\n                    point.graphics = point.graphics || [];\n                    // Save original props to be overridden by temporary props for top\n                    // points\n                    point.origProps = {\n                        plotY: point.plotY,\n                        plotX: point.plotX,\n                        isInside: point.isInside,\n                        negative: point.negative,\n                        zone: point.zone,\n                        y: point.y\n                    };\n                    if (point.graphic || point.graphics[0]) {\n                        point.graphics[0] = point.graphic;\n                    }\n                    point.graphic = point.graphics[1];\n                    point.plotY = point.plotHigh;\n                    if (defined(point.plotHighX)) {\n                        point.plotX = point.plotHighX;\n                    }\n                    point.y = pick(point.high, point.origProps.y); // #15523\n                    point.negative = point.y < (series.options.threshold || 0);\n                    if (series.zones.length) {\n                        point.zone = point.getZone();\n                    }\n                    if (!series.chart.polar) {\n                        point.isInside = point.isTopInside = (typeof point.plotY !== 'undefined' &&\n                            point.plotY >= 0 &&\n                            point.plotY <= series.yAxis.len && // #3519\n                            point.plotX >= 0 &&\n                            point.plotX <= series.xAxis.len);\n                    }\n                    i++;\n                }\n                // Draw top points\n                areaProto.drawPoints.apply(series, arguments);\n                // Reset top points preliminary modifications\n                i = 0;\n                while (i < pointLength) {\n                    point = series.points[i];\n                    point.graphics = point.graphics || [];\n                    if (point.graphic || point.graphics[1]) {\n                        point.graphics[1] = point.graphic;\n                    }\n                    point.graphic = point.graphics[0];\n                    if (point.origProps) {\n                        extend(point, point.origProps);\n                        delete point.origProps;\n                    }\n                    i++;\n                }\n            }\n            hasMarkerChanged(options, oldOptions) {\n                const lowMarker = options.lowMarker, oldMarker = oldOptions.lowMarker || {};\n                return (lowMarker && (lowMarker.enabled === false ||\n                    oldMarker.symbol !== lowMarker.symbol || // #10870, #15946\n                    oldMarker.height !== lowMarker.height || // #16274\n                    oldMarker.width !== lowMarker.width // #16274\n                )) || super.hasMarkerChanged(options, oldOptions);\n            }\n        }\n        /**\n         *\n         *  Static Properties\n         *\n         */\n        AreaRangeSeries.defaultOptions = merge(AreaSeries.defaultOptions, areaRangeSeriesOptions);\n        addEvent(AreaRangeSeries, 'afterTranslate', function () {\n            // Set plotLow and plotHigh\n            // Rules out lollipop, but lollipop should not inherit range series in the\n            // first place\n            if (this.pointArrayMap.join(',') === 'low,high') {\n                this.points.forEach((point) => {\n                    const high = point.high, plotY = point.plotY;\n                    if (point.isNull) {\n                        point.plotY = void 0;\n                    }\n                    else {\n                        point.plotLow = plotY;\n                        // Calculate plotHigh value based on each yAxis scale (#15752)\n                        point.plotHigh = isNumber(high) ? this.yAxis.translate(this.dataModify ?\n                            this.dataModify.modifyValue(high) : high, false, true, void 0, true) : void 0;\n                        if (this.dataModify) {\n                            point.yBottom = point.plotHigh;\n                        }\n                    }\n                });\n            }\n        }, { order: 0 });\n        addEvent(AreaRangeSeries, 'afterTranslate', function () {\n            this.points.forEach((point) => {\n                // Postprocessing after the PolarComposition's afterTranslate\n                if (this.chart.polar) {\n                    this.highToXY(point);\n                    point.plotLow = point.plotY;\n                    point.tooltipPos = [\n                        ((point.plotHighX || 0) + (point.plotLowX || 0)) / 2,\n                        ((point.plotHigh || 0) + (point.plotLow || 0)) / 2\n                    ];\n                    // Put the tooltip in the middle of the range\n                }\n                else {\n                    const tooltipPos = point.pos(false, point.plotLow), posHigh = point.pos(false, point.plotHigh);\n                    if (tooltipPos && posHigh) {\n                        tooltipPos[0] = (tooltipPos[0] + posHigh[0]) / 2;\n                        tooltipPos[1] = (tooltipPos[1] + posHigh[1]) / 2;\n                    }\n                    point.tooltipPos = tooltipPos;\n                }\n            });\n        }, { order: 3 });\n        extend(AreaRangeSeries.prototype, {\n            deferTranslatePolar: true,\n            pointArrayMap: ['low', 'high'],\n            pointClass: AreaRangePoint,\n            pointValKey: 'low',\n            setStackedPoints: noop\n        });\n        SeriesRegistry.registerSeriesType('arearange', AreaRangeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `arearange` series. If the [type](#series.arearange.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         *\n         * @extends   series,plotOptions.arearange\n         * @excluding dataParser, dataURL, stack, stacking\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.arearange\n         */\n        /**\n         * @see [fillColor](#series.arearange.fillColor)\n         * @see [fillOpacity](#series.arearange.fillOpacity)\n         *\n         * @apioption series.arearange.color\n         */\n        /**\n         * An array of data points for the series. For the `arearange` series type,\n         * points can be given in the following ways:\n         *\n         * 1.  An array of arrays with 3 or 2 values. In this case, the values\n         *     correspond to `x,low,high`. If the first value is a string, it is\n         *     applied as the name of the point, and the `x` value is inferred.\n         *     The `x` value can also be omitted, in which case the inner arrays\n         *     should be of length 2\\. Then the `x` value is automatically calculated,\n         *     either starting at 0 and incremented by 1, or from `pointStart`\n         *     and `pointInterval` given in the series options.\n         *     ```js\n         *     data: [\n         *         [0, 8, 3],\n         *         [1, 1, 1],\n         *         [2, 6, 8]\n         *     ]\n         *     ```\n         *\n         * 2.  An array of objects with named values. The following snippet shows only a\n         *     few settings, see the complete options set below. If the total number of\n         *     data points exceeds the series'\n         *     [turboThreshold](#series.arearange.turboThreshold),\n         *     this option is not available.\n         *     ```js\n         *     data: [{\n         *         x: 1,\n         *         low: 9,\n         *         high: 0,\n         *         name: \"Point2\",\n         *         color: \"#00FF00\"\n         *     }, {\n         *         x: 1,\n         *         low: 3,\n         *         high: 4,\n         *         name: \"Point1\",\n         *         color: \"#FF00FF\"\n         *     }]\n         *     ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.line.data\n         * @excluding marker, y\n         * @product   highcharts highstock\n         * @apioption series.arearange.data\n         */\n        /**\n         * @extends   series.arearange.dataLabels\n         * @product   highcharts highstock\n         * @apioption series.arearange.data.dataLabels\n         */\n        /**\n         * @see [color](#series.arearange.color)\n         * @see [fillOpacity](#series.arearange.fillOpacity)\n         *\n         * @apioption series.arearange.fillColor\n         */\n        /**\n         * @see [color](#series.arearange.color)\n         * @see [fillColor](#series.arearange.fillColor)\n         *\n         * @default   {highcharts} 0.75\n         * @default   {highstock} 0.75\n         * @apioption series.arearange.fillOpacity\n         */\n        /**\n         * Options for the lower markers of the arearange-like series. When `lowMarker`\n         * is not defined, options inherit form the marker.\n         *\n         * @see [marker](#series.arearange.marker)\n         *\n         * @declare   Highcharts.PointMarkerOptionsObject\n         * @extends   plotOptions.series.marker\n         * @default   undefined\n         * @product   highcharts highstock\n         * @apioption plotOptions.arearange.lowMarker\n         */\n        /**\n         *\n         * @sample {highcharts} highcharts/series-arearange/lowmarker/\n         *         Area range chart with `lowMarker` option\n         *\n         * @declare   Highcharts.PointMarkerOptionsObject\n         * @extends   plotOptions.series.marker.symbol\n         * @product   highcharts highstock\n         * @apioption plotOptions.arearange.lowMarker.symbol\n         */\n        /**\n         * The high or maximum value for each data point.\n         *\n         * @type      {number}\n         * @product   highcharts highstock\n         * @apioption series.arearange.data.high\n         */\n        /**\n         * The low or minimum value for each data point.\n         *\n         * @type      {number}\n         * @product   highcharts highstock\n         * @apioption series.arearange.data.low\n         */\n        ''; // adds doclets above to transpiled file\n\n        return AreaRangeSeries;\n    });\n    _registerModule(_modules, 'Series/AreaSplineRange/AreaSplineRangeSeries.js', [_modules['Series/AreaRange/AreaRangeSeries.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AreaRangeSeries, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { spline: { prototype: splineProto } } = SeriesRegistry.seriesTypes;\n        const { merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The areasplinerange series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.areasplinerange\n         *\n         * @augments Highcharts.Series\n         */\n        class AreaSplineRangeSeries extends AreaRangeSeries {\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        AreaSplineRangeSeries.defaultOptions = merge(AreaRangeSeries.defaultOptions);\n        extend(AreaSplineRangeSeries.prototype, {\n            getPointSpline: splineProto.getPointSpline\n        });\n        SeriesRegistry.registerSeriesType('areasplinerange', AreaSplineRangeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The area spline range is a cartesian series type with higher and\n         * lower Y values along an X axis. The area inside the range is colored, and\n         * the graph outlining the area is a smoothed spline.\n         *\n         * @sample {highstock|highstock} stock/demo/areasplinerange/\n         *         Area spline range\n         *\n         * @extends   plotOptions.arearange\n         * @since     2.3.0\n         * @excluding step, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption plotOptions.areasplinerange\n         */\n        /**\n         * @see [fillColor](#plotOptions.areasplinerange.fillColor)\n         * @see [fillOpacity](#plotOptions.areasplinerange.fillOpacity)\n         *\n         * @apioption plotOptions.areasplinerange.color\n         */\n        /**\n         * @see [color](#plotOptions.areasplinerange.color)\n         * @see [fillOpacity](#plotOptions.areasplinerange.fillOpacity)\n         *\n         * @apioption plotOptions.areasplinerange.fillColor\n         */\n        /**\n         * @see [color](#plotOptions.areasplinerange.color)\n         * @see [fillColor](#plotOptions.areasplinerange.fillColor)\n         *\n         * @default   0.75\n         * @apioption plotOptions.areasplinerange.fillOpacity\n         */\n        /**\n         * A `areasplinerange` series. If the [type](#series.areasplinerange.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.areasplinerange\n         * @excluding dataParser, dataURL, stack, step, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.areasplinerange\n         */\n        /**\n         * @see [fillColor](#series.areasplinerange.fillColor)\n         * @see [fillOpacity](#series.areasplinerange.fillOpacity)\n         *\n         * @apioption series.areasplinerange.color\n         */\n        /**\n         * An array of data points for the series. For the `areasplinerange`\n         * series type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,low,high`. If the first value is a string, it is applied as the name\n         *    of the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 0, 5],\n         *        [1, 9, 1],\n         *        [2, 5, 2]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.areasplinerange.turboThreshold), this option is\n         *    not available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 5,\n         *        high: 0,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 4,\n         *        high: 1,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.arearange.data\n         * @product   highcharts highstock\n         * @apioption series.areasplinerange.data\n         */\n        /**\n         * @see [color](#series.areasplinerange.color)\n         * @see [fillOpacity](#series.areasplinerange.fillOpacity)\n         *\n         * @apioption series.areasplinerange.fillColor\n         */\n        /**\n         * @see [color](#series.areasplinerange.color)\n         * @see [fillColor](#series.areasplinerange.fillColor)\n         *\n         * @default   0.75\n         * @apioption series.areasplinerange.fillOpacity\n         */\n        ''; // adds doclets above to transpiled file\n\n        return AreaSplineRangeSeries;\n    });\n    _registerModule(_modules, 'Series/BoxPlot/BoxPlotSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A box plot is a convenient way of depicting groups of data through their\n         * five-number summaries: the smallest observation (sample minimum), lower\n         * quartile (Q1), median (Q2), upper quartile (Q3), and largest observation\n         * (sample maximum).\n         *\n         * @sample highcharts/demo/box-plot/\n         *         Box plot\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         * @sample {highcharts} highcharts/series-scatter/jitter-boxplot\n         *         Jittered scatter plot on top of a box plot\n         *\n         * @extends      plotOptions.column\n         * @excluding    borderColor, borderRadius, borderWidth, groupZPadding,\n         *               states, boostThreshold, boostBlending\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.boxplot\n         */\n        const BoxPlotSeriesDefaults = {\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b>' +\n                    '{series.name}</b><br/>' +\n                    'Maximum: {point.high}<br/>' +\n                    'Upper quartile: {point.q3}<br/>' +\n                    'Median: {point.median}<br/>' +\n                    'Lower quartile: {point.q1}<br/>' +\n                    'Minimum: {point.low}<br/>'\n            },\n            /**\n             * The length of the whiskers, the horizontal lines marking low and\n             * high values. It can be a numerical pixel value, or a percentage\n             * value of the box width. Set `0` to disable whiskers.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         True by default\n             *\n             * @type    {number|string}\n             * @since   3.0\n             * @product highcharts\n             */\n            whiskerLength: '50%',\n            /**\n             * The fill color of the box.\n             *\n             * In styled mode, the fill color can be set with the\n             * `.highcharts-boxplot-box` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #ffffff\n             * @since   3.0\n             * @product highcharts\n             */\n            fillColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The width of the line surrounding the box. If any of\n             * [stemWidth](#plotOptions.boxplot.stemWidth),\n             * [medianWidth](#plotOptions.boxplot.medianWidth)\n             * or [whiskerWidth](#plotOptions.boxplot.whiskerWidth) are `null`,\n             * the lineWidth also applies to these lines.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            lineWidth: 1,\n            /**\n             * The color of the median line. If `undefined`, the general series\n             * color applies.\n             *\n             * In styled mode, the median stroke width can be set with the\n             * `.highcharts-boxplot-median` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.medianColor\n             */\n            /**\n             * The pixel width of the median line. If `null`, the\n             * [lineWidth](#plotOptions.boxplot.lineWidth) is used.\n             *\n             * In styled mode, the median stroke width can be set with the\n             * `.highcharts-boxplot-median` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type    {number|null}\n             * @since   3.0\n             * @product highcharts\n             */\n            medianWidth: 2,\n            /*\n            // States are not working and are removed from docs.\n            // Refer to: #2340\n            states: {\n                hover: {\n                    brightness: -0.3\n                }\n            },\n            */\n            /**\n             * The color of the stem, the vertical line extending from the box to\n             * the whiskers. If `undefined`, the series color is used.\n             *\n             * In styled mode, the stem stroke can be set with the\n             * `.highcharts-boxplot-stem` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.stemColor\n             */\n            /**\n             * The dash style of the box.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since 8.1.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.boxDashStyle\n             */\n            /**\n             * The dash style of the median.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since 8.1.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.medianDashStyle\n             */\n            /**\n             * The dash style of the stem, the vertical line extending from the\n             * box to the whiskers.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.stemDashStyle\n             */\n            /**\n             * The dash style of the whiskers.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since 8.1.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.whiskerDashStyle\n             */\n            /**\n             * The width of the stem, the vertical line extending from the box to\n             * the whiskers. If `undefined`, the width is inherited from the\n             * [lineWidth](#plotOptions.boxplot.lineWidth) option.\n             *\n             * In styled mode, the stem stroke width can be set with the\n             * `.highcharts-boxplot-stem` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {number}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.stemWidth\n             */\n            /**\n             * @default   high\n             * @apioption plotOptions.boxplot.colorKey\n             */\n            /**\n             * The color of the whiskers, the horizontal lines marking low and high\n             * values. When `undefined`, the general series color is used.\n             *\n             * In styled mode, the whisker stroke can be set with the\n             * `.highcharts-boxplot-whisker` class .\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.whiskerColor\n             */\n            /**\n             * The line width of the whiskers, the horizontal lines marking low and\n             * high values. When `undefined`, the general\n             * [lineWidth](#plotOptions.boxplot.lineWidth) applies.\n             *\n             * In styled mode, the whisker stroke width can be set with the\n             * `.highcharts-boxplot-whisker` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            whiskerWidth: 2\n        };\n        /**\n         * A `boxplot` series. If the [type](#series.boxplot.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.boxplot\n         * @excluding dataParser, dataURL, marker, stack, stacking, states,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.boxplot\n         */\n        /**\n         * An array of data points for the series. For the `boxplot` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 6 or 5 values. In this case, the values correspond\n         *    to `x,low,q1,median,q3,high`. If the first value is a string, it is\n         *    applied as the name of the point, and the `x` value is inferred. The `x`\n         *    value can also be omitted, in which case the inner arrays should be of\n         *    length 5. Then the `x` value is automatically calculated, either starting\n         *    at 0 and incremented by 1, or from `pointStart` and `pointInterval` given\n         *    in the series options.\n         *    ```js\n         *    data: [\n         *        [0, 3, 0, 10, 3, 5],\n         *        [1, 7, 8, 7, 2, 9],\n         *        [2, 6, 9, 5, 1, 3]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.boxplot.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 4,\n         *        q1: 9,\n         *        median: 9,\n         *        q3: 1,\n         *        high: 10,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 5,\n         *        q1: 7,\n         *        median: 3,\n         *        q3: 6,\n         *        high: 2,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number,number,number,number>|Array<(number|string),number,number,number,number,number>|*>}\n         * @extends   series.line.data\n         * @excluding marker\n         * @product   highcharts\n         * @apioption series.boxplot.data\n         */\n        /**\n         * The `high` value for each data point, signifying the highest value\n         * in the sample set. The top whisker is drawn here.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.high\n         */\n        /**\n         * The `low` value for each data point, signifying the lowest value\n         * in the sample set. The bottom whisker is drawn here.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.low\n         */\n        /**\n         * The median for each data point. This is drawn as a line through the\n         * middle area of the box.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.median\n         */\n        /**\n         * The lower quartile for each data point. This is the bottom of the\n         * box.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.q1\n         */\n        /**\n         * The higher quartile for each data point. This is the top of the box.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.q3\n         */\n        /**\n         * The dash style of the box.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.boxDashStyle\n         */\n        /**\n         * The dash style of the median.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.medianDashStyle\n         */\n        /**\n         * The dash style of the stem.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.stemDashStyle\n         */\n        /**\n         * The dash style of the whiskers.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.whiskerDashStyle\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BoxPlotSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/BoxPlot/BoxPlotSeries.js', [_modules['Series/BoxPlot/BoxPlotSeriesDefaults.js'], _modules['Series/Column/ColumnSeries.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BoxPlotSeriesDefaults, ColumnSeries, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { extend, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The boxplot series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes#boxplot\n         *\n         * @augments Highcharts.Series\n         */\n        class BoxPlotSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            // Get presentational attributes\n            pointAttribs() {\n                // No attributes should be set on point.graphic which is the group\n                return {};\n            }\n            // Translate data points from raw values x and y to plotX and plotY\n            translate() {\n                const series = this, yAxis = series.yAxis, pointArrayMap = series.pointArrayMap;\n                super.translate.apply(series);\n                // do the translation on each point dimension\n                series.points.forEach(function (point) {\n                    pointArrayMap.forEach(function (key) {\n                        if (point[key] !== null) {\n                            point[key + 'Plot'] = yAxis.translate(point[key], 0, 1, 0, 1);\n                        }\n                    });\n                    point.plotHigh = point.highPlot; // For data label validation\n                });\n            }\n            /**\n             * Draw the data points\n             * @private\n             */\n            drawPoints() {\n                const series = this, points = series.points, options = series.options, chart = series.chart, renderer = chart.renderer, \n                // error bar inherits this series type but doesn't do quartiles\n                doQuartiles = series.doQuartiles !== false, whiskerLength = series.options.whiskerLength;\n                let q1Plot, q3Plot, highPlot, lowPlot, medianPlot, medianPath, crispCorr, crispX = 0, boxPath, graphic, width, left, right, halfWidth, pointWiskerLength;\n                for (const point of points) {\n                    graphic = point.graphic;\n                    const verb = graphic ? 'animate' : 'attr', shapeArgs = point.shapeArgs, boxAttr = {}, stemAttr = {}, whiskersAttr = {}, medianAttr = {}, color = point.color || series.color;\n                    if (typeof point.plotY !== 'undefined') {\n                        // crisp vector coordinates\n                        width = Math.round(shapeArgs.width);\n                        left = Math.floor(shapeArgs.x);\n                        right = left + width;\n                        halfWidth = Math.round(width / 2);\n                        q1Plot = Math.floor(doQuartiles ? point.q1Plot : point.lowPlot);\n                        q3Plot = Math.floor(doQuartiles ? point.q3Plot : point.lowPlot);\n                        highPlot = Math.floor(point.highPlot);\n                        lowPlot = Math.floor(point.lowPlot);\n                        if (!graphic) {\n                            point.graphic = graphic = renderer.g('point')\n                                .add(series.group);\n                            point.stem = renderer.path()\n                                .addClass('highcharts-boxplot-stem')\n                                .add(graphic);\n                            if (whiskerLength) {\n                                point.whiskers = renderer.path()\n                                    .addClass('highcharts-boxplot-whisker')\n                                    .add(graphic);\n                            }\n                            if (doQuartiles) {\n                                point.box = renderer.path(boxPath)\n                                    .addClass('highcharts-boxplot-box')\n                                    .add(graphic);\n                            }\n                            point.medianShape = renderer.path(medianPath)\n                                .addClass('highcharts-boxplot-median')\n                                .add(graphic);\n                        }\n                        if (!chart.styledMode) {\n                            // Stem attributes\n                            stemAttr.stroke =\n                                point.stemColor || options.stemColor || color;\n                            stemAttr['stroke-width'] = pick(point.stemWidth, options.stemWidth, options.lineWidth);\n                            stemAttr.dashstyle = (point.stemDashStyle ||\n                                options.stemDashStyle ||\n                                options.dashStyle);\n                            point.stem.attr(stemAttr);\n                            // Whiskers attributes\n                            if (whiskerLength) {\n                                whiskersAttr.stroke = (point.whiskerColor ||\n                                    options.whiskerColor ||\n                                    color);\n                                whiskersAttr['stroke-width'] = pick(point.whiskerWidth, options.whiskerWidth, options.lineWidth);\n                                whiskersAttr.dashstyle = (point.whiskerDashStyle ||\n                                    options.whiskerDashStyle ||\n                                    options.dashStyle);\n                                point.whiskers.attr(whiskersAttr);\n                            }\n                            if (doQuartiles) {\n                                boxAttr.fill = (point.fillColor ||\n                                    options.fillColor ||\n                                    color);\n                                boxAttr.stroke = options.lineColor || color;\n                                boxAttr['stroke-width'] = options.lineWidth || 0;\n                                boxAttr.dashstyle = (point.boxDashStyle ||\n                                    options.boxDashStyle ||\n                                    options.dashStyle);\n                                point.box.attr(boxAttr);\n                            }\n                            // Median attributes\n                            medianAttr.stroke = (point.medianColor ||\n                                options.medianColor ||\n                                color);\n                            medianAttr['stroke-width'] = pick(point.medianWidth, options.medianWidth, options.lineWidth);\n                            medianAttr.dashstyle = (point.medianDashStyle ||\n                                options.medianDashStyle ||\n                                options.dashStyle);\n                            point.medianShape.attr(medianAttr);\n                        }\n                        let d;\n                        // The stem\n                        crispCorr = (point.stem.strokeWidth() % 2) / 2;\n                        crispX = left + halfWidth + crispCorr;\n                        d = [\n                            // stem up\n                            ['M', crispX, q3Plot],\n                            ['L', crispX, highPlot],\n                            // stem down\n                            ['M', crispX, q1Plot],\n                            ['L', crispX, lowPlot]\n                        ];\n                        point.stem[verb]({ d });\n                        // The box\n                        if (doQuartiles) {\n                            crispCorr = (point.box.strokeWidth() % 2) / 2;\n                            q1Plot = Math.floor(q1Plot) + crispCorr;\n                            q3Plot = Math.floor(q3Plot) + crispCorr;\n                            left += crispCorr;\n                            right += crispCorr;\n                            d = [\n                                ['M', left, q3Plot],\n                                ['L', left, q1Plot],\n                                ['L', right, q1Plot],\n                                ['L', right, q3Plot],\n                                ['L', left, q3Plot],\n                                ['Z']\n                            ];\n                            point.box[verb]({ d });\n                        }\n                        // The whiskers\n                        if (whiskerLength) {\n                            crispCorr = (point.whiskers.strokeWidth() % 2) / 2;\n                            highPlot = highPlot + crispCorr;\n                            lowPlot = lowPlot + crispCorr;\n                            pointWiskerLength = (/%$/).test(whiskerLength) ?\n                                halfWidth * parseFloat(whiskerLength) / 100 :\n                                whiskerLength / 2;\n                            d = [\n                                // High whisker\n                                ['M', crispX - pointWiskerLength, highPlot],\n                                ['L', crispX + pointWiskerLength, highPlot],\n                                // Low whisker\n                                ['M', crispX - pointWiskerLength, lowPlot],\n                                ['L', crispX + pointWiskerLength, lowPlot]\n                            ];\n                            point.whiskers[verb]({ d });\n                        }\n                        // The median\n                        medianPlot = Math.round(point.medianPlot);\n                        crispCorr = (point.medianShape.strokeWidth() % 2) / 2;\n                        medianPlot = medianPlot + crispCorr;\n                        d = [\n                            ['M', left, medianPlot],\n                            ['L', right, medianPlot]\n                        ];\n                        point.medianShape[verb]({ d });\n                    }\n                }\n            }\n            // return a plain array for speedy calculation\n            toYData(point) {\n                return [point.low, point.q1, point.median, point.q3, point.high];\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        BoxPlotSeries.defaultOptions = merge(ColumnSeries.defaultOptions, BoxPlotSeriesDefaults);\n        extend(BoxPlotSeries.prototype, {\n            // array point configs are mapped to this\n            pointArrayMap: ['low', 'q1', 'median', 'q3', 'high'],\n            // defines the top of the tracker\n            pointValKey: 'high',\n            // Disable data labels for box plot\n            drawDataLabels: noop,\n            setStackedPoints: noop // #3890\n        });\n        SeriesRegistry.registerSeriesType('boxplot', BoxPlotSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BoxPlotSeries;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleLegendDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Paweł Potaczek\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The bubble legend is an additional element in legend which\n         * presents the scale of the bubble series. Individual bubble ranges\n         * can be defined by user or calculated from series. In the case of\n         * automatically calculated ranges, a 1px margin of error is\n         * permitted.\n         *\n         * @since        7.0.0\n         * @product      highcharts highstock highmaps\n         * @requires     highcharts-more\n         * @optionparent legend.bubbleLegend\n         */\n        const BubbleLegendDefaults = {\n            /**\n             * The color of the ranges borders, can be also defined for an\n             * individual range.\n             *\n             * @sample highcharts/bubble-legend/similartoseries/\n             *         Similar look to the bubble series\n             * @sample highcharts/bubble-legend/bordercolor/\n             *         Individual bubble border color\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: void 0,\n            /**\n             * The width of the ranges borders in pixels, can be also\n             * defined for an individual range.\n             */\n            borderWidth: 2,\n            /**\n             * An additional class name to apply to the bubble legend'\n             * circle graphical elements. This option does not replace\n             * default class names of the graphical element.\n             *\n             * @sample {highcharts} highcharts/css/bubble-legend/\n             *         Styling by CSS\n             *\n             * @type {string}\n             */\n            className: void 0,\n            /**\n             * The main color of the bubble legend. Applies to ranges, if\n             * individual color is not defined.\n             *\n             * @sample highcharts/bubble-legend/similartoseries/\n             *         Similar look to the bubble series\n             * @sample highcharts/bubble-legend/color/\n             *         Individual bubble color\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            color: void 0,\n            /**\n             * An additional class name to apply to the bubble legend's\n             * connector graphical elements. This option does not replace\n             * default class names of the graphical element.\n             *\n             * @sample {highcharts} highcharts/css/bubble-legend/\n             *         Styling by CSS\n             *\n             * @type {string}\n             */\n            connectorClassName: void 0,\n            /**\n             * The color of the connector, can be also defined\n             * for an individual range.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            connectorColor: void 0,\n            /**\n             * The length of the connectors in pixels. If labels are\n             * centered, the distance is reduced to 0.\n             *\n             * @sample highcharts/bubble-legend/connectorandlabels/\n             *         Increased connector length\n             */\n            connectorDistance: 60,\n            /**\n             * The width of the connectors in pixels.\n             *\n             * @sample highcharts/bubble-legend/connectorandlabels/\n             *         Increased connector width\n             */\n            connectorWidth: 1,\n            /**\n             * Enable or disable the bubble legend.\n             */\n            enabled: false,\n            /**\n             * Options for the bubble legend labels.\n             */\n            labels: {\n                /**\n                 * An additional class name to apply to the bubble legend\n                 * label graphical elements. This option does not replace\n                 * default class names of the graphical element.\n                 *\n                 * @sample {highcharts} highcharts/css/bubble-legend/\n                 *         Styling by CSS\n                 *\n                 * @type {string}\n                 */\n                className: void 0,\n                /**\n                 * Whether to allow data labels to overlap.\n                 */\n                allowOverlap: false,\n                /**\n                 * A format string for the bubble legend labels. Available\n                 * variables are the same as for `formatter`.\n                 *\n                 * @sample highcharts/bubble-legend/format/\n                 *         Add a unit\n                 *\n                 * @type {string}\n                 */\n                format: '',\n                /**\n                 * Available `this` properties are:\n                 *\n                 * - `this.value`: The bubble value.\n                 *\n                 * - `this.radius`: The radius of the bubble range.\n                 *\n                 * - `this.center`: The center y position of the range.\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Highcharts.BubbleLegendFormatterContextObject>}\n                 */\n                formatter: void 0,\n                /**\n                 * The alignment of the labels compared to the bubble\n                 * legend. Can be one of `left`, `center` or `right`.\n                 *\n                 * @sample highcharts/bubble-legend/connectorandlabels/\n                 *         Labels on left\n                 *\n                 * @type {Highcharts.AlignValue}\n                 */\n                align: 'right',\n                /**\n                 * CSS styles for the labels.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @ignore-option */\n                    fontSize: '0.9em',\n                    /** @ignore-option */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * The x position offset of the label relative to the\n                 * connector.\n                 */\n                x: 0,\n                /**\n                 * The y position offset of the label relative to the\n                 * connector.\n                 */\n                y: 0\n            },\n            /**\n             * Maximum bubble legend range size. If values for ranges are\n             * not specified, the `minSize` and the `maxSize` are calculated\n             * from bubble series.\n             */\n            maxSize: 60,\n            /**\n             * Minimum bubble legend range size. If values for ranges are\n             * not specified, the `minSize` and the `maxSize` are calculated\n             * from bubble series.\n             */\n            minSize: 10,\n            /**\n             * The position of the bubble legend in the legend.\n             * @sample highcharts/bubble-legend/connectorandlabels/\n             *         Bubble legend as last item in legend\n             */\n            legendIndex: 0,\n            /**\n             * Options for specific range. One range consists of bubble,\n             * label and connector.\n             *\n             * @sample highcharts/bubble-legend/ranges/\n             *         Manually defined ranges\n             * @sample highcharts/bubble-legend/autoranges/\n             *         Auto calculated ranges\n             *\n             * @type {Array<*>}\n             */\n            ranges: {\n                /**\n                 * Range size value, similar to bubble Z data.\n                 * @type {number}\n                 */\n                value: void 0,\n                /**\n                 * The color of the border for individual range.\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: void 0,\n                /**\n                 * The color of the bubble for individual range.\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                color: void 0,\n                /**\n                 * The color of the connector for individual range.\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                connectorColor: void 0\n            },\n            /**\n             * Whether the bubble legend range value should be represented\n             * by the area or the width of the bubble. The default, area,\n             * corresponds best to the human perception of the size of each\n             * bubble.\n             *\n             * @sample highcharts/bubble-legend/ranges/\n             *         Size by width\n             *\n             * @type {Highcharts.BubbleSizeByValue}\n             */\n            sizeBy: 'area',\n            /**\n             * When this is true, the absolute value of z determines the\n             * size of the bubble. This means that with the default\n             * zThreshold of 0, a bubble of value -1 will have the same size\n             * as a bubble of value 1, while a bubble of value 0 will have a\n             * smaller size according to minSize.\n             */\n            sizeByAbsoluteValue: false,\n            /**\n             * Define the visual z index of the bubble legend.\n             */\n            zIndex: 1,\n            /**\n             * Ranges with lower value than zThreshold are skipped.\n             */\n            zThreshold: 0\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BubbleLegendDefaults;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleLegendItem.js', [_modules['Core/Color/Color.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Color, F, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Paweł Potaczek\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { noop } = H;\n        const { arrayMax, arrayMin, isNumber, merge, pick, stableSort } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * BubbleLegend class.\n         *\n         * @private\n         * @class\n         * @name Highcharts.BubbleLegend\n         * @param {Highcharts.LegendBubbleLegendOptions} options\n         * Options of BubbleLegendItem.\n         *\n         * @param {Highcharts.Legend} legend\n         * Legend of item.\n         */\n        class BubbleLegendItem {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options, legend) {\n                this.setState = noop;\n                this.init(options, legend);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create basic bubbleLegend properties similar to item in legend.\n             * @private\n             */\n            init(options, legend) {\n                this.options = options;\n                this.visible = true;\n                this.chart = legend.chart;\n                this.legend = legend;\n            }\n            /**\n             * Depending on the position option, add bubbleLegend to legend items.\n             *\n             * @private\n             *\n             * @param {Array<(Highcharts.Point|Highcharts.Series)>} items\n             *        All legend items\n             */\n            addToLegend(items) {\n                // Insert bubbleLegend into legend items\n                items.splice(this.options.legendIndex, 0, this);\n            }\n            /**\n             * Calculate ranges, sizes and call the next steps of bubbleLegend\n             * creation.\n             *\n             * @private\n             *\n             * @param {Highcharts.Legend} legend\n             *        Legend instance\n             */\n            drawLegendSymbol(legend) {\n                const itemDistance = pick(legend.options.itemDistance, 20), legendItem = this.legendItem || {}, options = this.options, ranges = options.ranges, connectorDistance = options.connectorDistance;\n                let connectorSpace;\n                // Do not create bubbleLegend now if ranges or ranges values are not\n                // specified or if are empty array.\n                if (!ranges || !ranges.length || !isNumber(ranges[0].value)) {\n                    legend.options.bubbleLegend.autoRanges = true;\n                    return;\n                }\n                // Sort ranges to right render order\n                stableSort(ranges, function (a, b) {\n                    return b.value - a.value;\n                });\n                this.ranges = ranges;\n                this.setOptions();\n                this.render();\n                // Get max label size\n                const maxLabel = this.getMaxLabelSize(), radius = this.ranges[0].radius, size = radius * 2;\n                // Space for connectors and labels.\n                connectorSpace =\n                    connectorDistance - radius + maxLabel.width;\n                connectorSpace = connectorSpace > 0 ? connectorSpace : 0;\n                this.maxLabel = maxLabel;\n                this.movementX = options.labels.align === 'left' ?\n                    connectorSpace : 0;\n                legendItem.labelWidth = size + connectorSpace + itemDistance;\n                legendItem.labelHeight = size + maxLabel.height / 2;\n            }\n            /**\n             * Set style options for each bubbleLegend range.\n             * @private\n             */\n            setOptions() {\n                const ranges = this.ranges, options = this.options, series = this.chart.series[options.seriesIndex], baseline = this.legend.baseline, bubbleAttribs = {\n                    zIndex: options.zIndex,\n                    'stroke-width': options.borderWidth\n                }, connectorAttribs = {\n                    zIndex: options.zIndex,\n                    'stroke-width': options.connectorWidth\n                }, labelAttribs = {\n                    align: (this.legend.options.rtl ||\n                        options.labels.align === 'left') ? 'right' : 'left',\n                    zIndex: options.zIndex\n                }, fillOpacity = series.options.marker.fillOpacity, styledMode = this.chart.styledMode;\n                // Allow to parts of styles be used individually for range\n                ranges.forEach(function (range, i) {\n                    if (!styledMode) {\n                        bubbleAttribs.stroke = pick(range.borderColor, options.borderColor, series.color);\n                        bubbleAttribs.fill = pick(range.color, options.color, fillOpacity !== 1 ?\n                            color(series.color).setOpacity(fillOpacity)\n                                .get('rgba') :\n                            series.color);\n                        connectorAttribs.stroke = pick(range.connectorColor, options.connectorColor, series.color);\n                    }\n                    // Set options needed for rendering each range\n                    ranges[i].radius = this.getRangeRadius(range.value);\n                    ranges[i] = merge(ranges[i], {\n                        center: (ranges[0].radius - ranges[i].radius +\n                            baseline)\n                    });\n                    if (!styledMode) {\n                        merge(true, ranges[i], {\n                            bubbleAttribs: merge(bubbleAttribs),\n                            connectorAttribs: merge(connectorAttribs),\n                            labelAttribs: labelAttribs\n                        });\n                    }\n                }, this);\n            }\n            /**\n             * Calculate radius for each bubble range,\n             * used code from BubbleSeries.js 'getRadius' method.\n             *\n             * @private\n             *\n             * @param {number} value\n             *        Range value\n             *\n             * @return {number|null}\n             *         Radius for one range\n             */\n            getRangeRadius(value) {\n                const options = this.options, seriesIndex = this.options.seriesIndex, bubbleSeries = this.chart.series[seriesIndex], zMax = options.ranges[0].value, zMin = options.ranges[options.ranges.length - 1].value, minSize = options.minSize, maxSize = options.maxSize;\n                return bubbleSeries.getRadius.call(this, zMin, zMax, minSize, maxSize, value);\n            }\n            /**\n             * Render the legendItem group.\n             * @private\n             */\n            render() {\n                const legendItem = this.legendItem || {}, renderer = this.chart.renderer, zThreshold = this.options.zThreshold;\n                if (!this.symbols) {\n                    this.symbols = {\n                        connectors: [],\n                        bubbleItems: [],\n                        labels: []\n                    };\n                }\n                // Nesting SVG groups to enable handleOverflow\n                legendItem.symbol = renderer.g('bubble-legend');\n                legendItem.label = renderer.g('bubble-legend-item')\n                    .css(this.legend.itemStyle || {});\n                // To enable default 'hideOverlappingLabels' method\n                legendItem.symbol.translateX = 0;\n                legendItem.symbol.translateY = 0;\n                // To use handleOverflow method\n                legendItem.symbol.add(legendItem.label);\n                legendItem.label.add(legendItem.group);\n                for (const range of this.ranges) {\n                    if (range.value >= zThreshold) {\n                        this.renderRange(range);\n                    }\n                }\n                this.hideOverlappingLabels();\n            }\n            /**\n             * Render one range, consisting of bubble symbol, connector and label.\n             *\n             * @private\n             *\n             * @param {Highcharts.LegendBubbleLegendRangesOptions} range\n             *        Range options\n             */\n            renderRange(range) {\n                const mainRange = this.ranges[0], legend = this.legend, options = this.options, labelsOptions = options.labels, chart = this.chart, bubbleSeries = chart.series[options.seriesIndex], renderer = chart.renderer, symbols = this.symbols, labels = symbols.labels, elementCenter = range.center, absoluteRadius = Math.abs(range.radius), connectorDistance = options.connectorDistance || 0, labelsAlign = labelsOptions.align, rtl = legend.options.rtl, borderWidth = options.borderWidth, connectorWidth = options.connectorWidth, posX = mainRange.radius || 0, posY = elementCenter - absoluteRadius -\n                    borderWidth / 2 + connectorWidth / 2, crispMovement = (posY % 1 ? 1 : 0.5) -\n                    (connectorWidth % 2 ? 0 : 0.5), styledMode = renderer.styledMode;\n                let connectorLength = rtl || labelsAlign === 'left' ?\n                    -connectorDistance : connectorDistance;\n                // Set options for centered labels\n                if (labelsAlign === 'center') {\n                    connectorLength = 0; // do not use connector\n                    options.connectorDistance = 0;\n                    range.labelAttribs.align = 'center';\n                }\n                // Render bubble symbol\n                symbols.bubbleItems.push(renderer\n                    .circle(posX, elementCenter + crispMovement, absoluteRadius)\n                    .attr(styledMode ? {} : range.bubbleAttribs)\n                    .addClass((styledMode ?\n                    'highcharts-color-' +\n                        bubbleSeries.colorIndex + ' ' :\n                    '') +\n                    'highcharts-bubble-legend-symbol ' +\n                    (options.className || '')).add(this.legendItem.symbol));\n                // Render connector\n                symbols.connectors.push(renderer\n                    .path(renderer.crispLine([\n                    ['M', posX, posY],\n                    ['L', posX + connectorLength, posY]\n                ], options.connectorWidth))\n                    .attr((styledMode ? {} : range.connectorAttribs))\n                    .addClass((styledMode ?\n                    'highcharts-color-' +\n                        this.options.seriesIndex + ' ' : '') +\n                    'highcharts-bubble-legend-connectors ' +\n                    (options.connectorClassName || '')).add(this.legendItem.symbol));\n                // Render label\n                const label = renderer\n                    .text(this.formatLabel(range))\n                    .attr((styledMode ? {} : range.labelAttribs))\n                    .css(styledMode ? {} : labelsOptions.style)\n                    .addClass('highcharts-bubble-legend-labels ' +\n                    (options.labels.className || '')).add(this.legendItem.symbol);\n                // Now that the label is added we can read the bounding box and\n                // vertically align\n                const position = {\n                    x: posX + connectorLength + options.labels.x,\n                    y: posY + options.labels.y + label.getBBox().height * 0.4\n                };\n                label.attr(position);\n                labels.push(label);\n                // To enable default 'hideOverlappingLabels' method\n                label.placed = true;\n                label.alignAttr = position;\n            }\n            /**\n             * Get the label which takes up the most space.\n             * @private\n             */\n            getMaxLabelSize() {\n                const labels = this.symbols.labels;\n                let maxLabel, labelSize;\n                labels.forEach(function (label) {\n                    labelSize = label.getBBox(true);\n                    if (maxLabel) {\n                        maxLabel = labelSize.width > maxLabel.width ?\n                            labelSize : maxLabel;\n                    }\n                    else {\n                        maxLabel = labelSize;\n                    }\n                });\n                return maxLabel || {};\n            }\n            /**\n             * Get formatted label for range.\n             *\n             * @private\n             *\n             * @param {Highcharts.LegendBubbleLegendRangesOptions} range\n             *        Range options\n             *\n             * @return {string}\n             *         Range label text\n             */\n            formatLabel(range) {\n                const options = this.options, formatter = options.labels.formatter, format = options.labels.format;\n                const { numberFormatter } = this.chart;\n                return format ? F.format(format, range) :\n                    formatter ? formatter.call(range) :\n                        numberFormatter(range.value, 1);\n            }\n            /**\n             * By using default chart 'hideOverlappingLabels' method, hide or show\n             * labels and connectors.\n             * @private\n             */\n            hideOverlappingLabels() {\n                const chart = this.chart, allowOverlap = this.options.labels.allowOverlap, symbols = this.symbols;\n                if (!allowOverlap && symbols) {\n                    chart.hideOverlappingLabels(symbols.labels);\n                    // Hide or show connectors\n                    symbols.labels.forEach(function (label, index) {\n                        if (!label.newOpacity) {\n                            symbols.connectors[index].hide();\n                        }\n                        else if (label.newOpacity !== label.oldOpacity) {\n                            symbols.connectors[index].show();\n                        }\n                    });\n                }\n            }\n            /**\n             * Calculate ranges from created series.\n             *\n             * @private\n             *\n             * @return {Array<Highcharts.LegendBubbleLegendRangesOptions>}\n             *         Array of range objects\n             */\n            getRanges() {\n                const bubbleLegend = this.legend.bubbleLegend, series = bubbleLegend.chart.series, rangesOptions = bubbleLegend.options.ranges;\n                let ranges, zData, minZ = Number.MAX_VALUE, maxZ = -Number.MAX_VALUE;\n                series.forEach(function (s) {\n                    // Find the min and max Z, like in bubble series\n                    if (s.isBubble && !s.ignoreSeries) {\n                        zData = s.zData.filter(isNumber);\n                        if (zData.length) {\n                            minZ = pick(s.options.zMin, Math.min(minZ, Math.max(arrayMin(zData), s.options.displayNegative === false ?\n                                s.options.zThreshold :\n                                -Number.MAX_VALUE)));\n                            maxZ = pick(s.options.zMax, Math.max(maxZ, arrayMax(zData)));\n                        }\n                    }\n                });\n                // Set values for ranges\n                if (minZ === maxZ) {\n                    // Only one range if min and max values are the same.\n                    ranges = [{ value: maxZ }];\n                }\n                else {\n                    ranges = [\n                        { value: minZ },\n                        { value: (minZ + maxZ) / 2 },\n                        { value: maxZ, autoRanges: true }\n                    ];\n                }\n                // Prevent reverse order of ranges after redraw\n                if (rangesOptions.length && rangesOptions[0].radius) {\n                    ranges.reverse();\n                }\n                // Merge ranges values with user options\n                ranges.forEach(function (range, i) {\n                    if (rangesOptions && rangesOptions[i]) {\n                        ranges[i] = merge(rangesOptions[i], range);\n                    }\n                });\n                return ranges;\n            }\n            /**\n             * Calculate bubble legend sizes from rendered series.\n             *\n             * @private\n             *\n             * @return {Array<number,number>}\n             *         Calculated min and max bubble sizes\n             */\n            predictBubbleSizes() {\n                const chart = this.chart, legendOptions = chart.legend.options, floating = legendOptions.floating, horizontal = legendOptions.layout === 'horizontal', lastLineHeight = horizontal ? chart.legend.lastLineHeight : 0, plotSizeX = chart.plotSizeX, plotSizeY = chart.plotSizeY, bubbleSeries = chart.series[this.options.seriesIndex], pxSizes = bubbleSeries.getPxExtremes(), minSize = Math.ceil(pxSizes.minPxSize), maxPxSize = Math.ceil(pxSizes.maxPxSize), plotSize = Math.min(plotSizeY, plotSizeX);\n                let calculatedSize, maxSize = bubbleSeries.options.maxSize;\n                // Calculate predicted max size of bubble\n                if (floating || !(/%$/.test(maxSize))) {\n                    calculatedSize = maxPxSize;\n                }\n                else {\n                    maxSize = parseFloat(maxSize);\n                    calculatedSize = ((plotSize + lastLineHeight) * maxSize / 100) /\n                        (maxSize / 100 + 1);\n                    // Get maxPxSize from bubble series if calculated bubble legend\n                    // size will not affect to bubbles series.\n                    if ((horizontal && plotSizeY - calculatedSize >=\n                        plotSizeX) || (!horizontal && plotSizeX -\n                        calculatedSize >= plotSizeY)) {\n                        calculatedSize = maxPxSize;\n                    }\n                }\n                return [minSize, Math.ceil(calculatedSize)];\n            }\n            /**\n             * Correct ranges with calculated sizes.\n             * @private\n             */\n            updateRanges(min, max) {\n                const bubbleLegendOptions = this.legend.options.bubbleLegend;\n                bubbleLegendOptions.minSize = min;\n                bubbleLegendOptions.maxSize = max;\n                bubbleLegendOptions.ranges = this.getRanges();\n            }\n            /**\n             * Because of the possibility of creating another legend line, predicted\n             * bubble legend sizes may differ by a few pixels, so it is necessary to\n             * correct them.\n             * @private\n             */\n            correctSizes() {\n                const legend = this.legend, chart = this.chart, bubbleSeries = chart.series[this.options.seriesIndex], pxSizes = bubbleSeries.getPxExtremes(), bubbleSeriesSize = pxSizes.maxPxSize, bubbleLegendSize = this.options.maxSize;\n                if (Math.abs(Math.ceil(bubbleSeriesSize) - bubbleLegendSize) >\n                    1) {\n                    this.updateRanges(this.options.minSize, pxSizes.maxPxSize);\n                    legend.render();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @interface Highcharts.BubbleLegendFormatterContextObject\n         */ /**\n        * The center y position of the range.\n        * @name Highcharts.BubbleLegendFormatterContextObject#center\n        * @type {number}\n        */ /**\n        * The radius of the bubble range.\n        * @name Highcharts.BubbleLegendFormatterContextObject#radius\n        * @type {number}\n        */ /**\n        * The bubble value.\n        * @name Highcharts.BubbleLegendFormatterContextObject#value\n        * @type {number}\n        */\n        ''; // detach doclets above\n\n        return BubbleLegendItem;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleLegendComposition.js', [_modules['Series/Bubble/BubbleLegendDefaults.js'], _modules['Series/Bubble/BubbleLegendItem.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (BubbleLegendDefaults, BubbleLegendItem, D, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Paweł Potaczek\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { composed } = H;\n        const { addEvent, objectEach, pushUnique, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * If ranges are not specified, determine ranges from rendered bubble series\n         * and render legend again.\n         */\n        function chartDrawChartBox(proceed, options, callback) {\n            const chart = this, legend = chart.legend, bubbleSeries = getVisibleBubbleSeriesIndex(chart) >= 0;\n            let bubbleLegendOptions, bubbleSizes, legendItem;\n            if (legend && legend.options.enabled && legend.bubbleLegend &&\n                legend.options.bubbleLegend.autoRanges && bubbleSeries) {\n                bubbleLegendOptions = legend.bubbleLegend.options;\n                bubbleSizes = legend.bubbleLegend.predictBubbleSizes();\n                legend.bubbleLegend.updateRanges(bubbleSizes[0], bubbleSizes[1]);\n                // Disable animation on init\n                if (!bubbleLegendOptions.placed) {\n                    legend.group.placed = false;\n                    legend.allItems.forEach((item) => {\n                        legendItem = item.legendItem || {};\n                        if (legendItem.group) {\n                            legendItem.group.translateY = void 0;\n                        }\n                    });\n                }\n                // Create legend with bubbleLegend\n                legend.render();\n                chart.getMargins();\n                chart.axes.forEach(function (axis) {\n                    if (axis.visible) { // #11448\n                        axis.render();\n                    }\n                    if (!bubbleLegendOptions.placed) {\n                        axis.setScale();\n                        axis.updateNames();\n                        // Disable axis animation on init\n                        objectEach(axis.ticks, function (tick) {\n                            tick.isNew = true;\n                            tick.isNewLabel = true;\n                        });\n                    }\n                });\n                bubbleLegendOptions.placed = true;\n                // After recalculate axes, calculate margins again.\n                chart.getMargins();\n                // Call default 'drawChartBox' method.\n                proceed.call(chart, options, callback);\n                // Check bubble legend sizes and correct them if necessary.\n                legend.bubbleLegend.correctSizes();\n                // Correct items positions with different dimensions in legend.\n                retranslateItems(legend, getLinesHeights(legend));\n            }\n            else {\n                proceed.call(chart, options, callback);\n                // Allow color change on static bubble legend after click on legend\n                if (legend && legend.options.enabled && legend.bubbleLegend) {\n                    legend.render();\n                    retranslateItems(legend, getLinesHeights(legend));\n                }\n            }\n        }\n        /**\n         * Compose classes for use with Bubble series.\n         * @private\n         *\n         * @param {Highcharts.Chart} ChartClass\n         * Core chart class to use with Bubble series.\n         *\n         * @param {Highcharts.Legend} LegendClass\n         * Core legend class to use with Bubble series.\n         *\n         * @param {Highcharts.Series} SeriesClass\n         * Core series class to use with Bubble series.\n         */\n        function compose(ChartClass, LegendClass, SeriesClass) {\n            if (pushUnique(composed, 'Series.BubbleLegend')) {\n                setOptions({\n                    // Set default bubble legend options\n                    legend: {\n                        bubbleLegend: BubbleLegendDefaults\n                    }\n                });\n                wrap(ChartClass.prototype, 'drawChartBox', chartDrawChartBox);\n                addEvent(LegendClass, 'afterGetAllItems', onLegendAfterGetAllItems);\n                addEvent(SeriesClass, 'legendItemClick', onSeriesLegendItemClick);\n            }\n        }\n        /**\n         * Check if there is at least one visible bubble series.\n         *\n         * @private\n         * @function getVisibleBubbleSeriesIndex\n         * @param {Highcharts.Chart} chart\n         * Chart to check.\n         * @return {number}\n         * First visible bubble series index\n         */\n        function getVisibleBubbleSeriesIndex(chart) {\n            const series = chart.series;\n            let i = 0;\n            while (i < series.length) {\n                if (series[i] &&\n                    series[i].isBubble &&\n                    series[i].visible &&\n                    series[i].zData.length) {\n                    return i;\n                }\n                i++;\n            }\n            return -1;\n        }\n        /**\n         * Calculate height for each row in legend.\n         *\n         * @private\n         * @function getLinesHeights\n         *\n         * @param {Highcharts.Legend} legend\n         * Legend to calculate from.\n         *\n         * @return {Array<Highcharts.Dictionary<number>>}\n         * Informations about line height and items amount\n         */\n        function getLinesHeights(legend) {\n            const items = legend.allItems, lines = [], length = items.length;\n            let lastLine, legendItem, legendItem2, i = 0, j = 0;\n            for (i = 0; i < length; i++) {\n                legendItem = items[i].legendItem || {};\n                legendItem2 = (items[i + 1] || {}).legendItem || {};\n                if (legendItem.labelHeight) {\n                    // for bubbleLegend\n                    items[i].itemHeight = legendItem.labelHeight;\n                }\n                if ( // Line break\n                items[i] === items[length - 1] ||\n                    legendItem.y !== legendItem2.y) {\n                    lines.push({ height: 0 });\n                    lastLine = lines[lines.length - 1];\n                    // Find the highest item in line\n                    for (j; j <= i; j++) {\n                        if (items[j].itemHeight > lastLine.height) {\n                            lastLine.height = items[j].itemHeight;\n                        }\n                    }\n                    lastLine.step = i;\n                }\n            }\n            return lines;\n        }\n        /**\n         * Start the bubble legend creation process.\n         */\n        function onLegendAfterGetAllItems(e) {\n            const legend = this, bubbleLegend = legend.bubbleLegend, legendOptions = legend.options, options = legendOptions.bubbleLegend, bubbleSeriesIndex = getVisibleBubbleSeriesIndex(legend.chart);\n            // Remove unnecessary element\n            if (bubbleLegend && bubbleLegend.ranges && bubbleLegend.ranges.length) {\n                // Allow change the way of calculating ranges in update\n                if (options.ranges.length) {\n                    options.autoRanges =\n                        !!options.ranges[0].autoRanges;\n                }\n                // Update bubbleLegend dimensions in each redraw\n                legend.destroyItem(bubbleLegend);\n            }\n            // Create bubble legend\n            if (bubbleSeriesIndex >= 0 &&\n                legendOptions.enabled &&\n                options.enabled) {\n                options.seriesIndex = bubbleSeriesIndex;\n                legend.bubbleLegend = new BubbleLegendItem(options, legend);\n                legend.bubbleLegend.addToLegend(e.allItems);\n            }\n        }\n        /**\n         * Toggle bubble legend depending on the visible status of bubble series.\n         */\n        function onSeriesLegendItemClick(e) {\n            // #14080 don't fire this code if click function is prevented\n            if (e.defaultPrevented) {\n                return false;\n            }\n            const series = this, chart = series.chart, visible = series.visible, legend = series.chart.legend;\n            let status;\n            if (legend && legend.bubbleLegend) {\n                // Temporary correct 'visible' property\n                series.visible = !visible;\n                // Save future status for getRanges method\n                series.ignoreSeries = visible;\n                // Check if at lest one bubble series is visible\n                status = getVisibleBubbleSeriesIndex(chart) >= 0;\n                // Hide bubble legend if all bubble series are disabled\n                if (legend.bubbleLegend.visible !== status) {\n                    // Show or hide bubble legend\n                    legend.update({\n                        bubbleLegend: { enabled: status }\n                    });\n                    legend.bubbleLegend.visible = status; // Restore default status\n                }\n                series.visible = visible;\n            }\n        }\n        /**\n         * Correct legend items translation in case of different elements heights.\n         *\n         * @private\n         * @function Highcharts.Legend#retranslateItems\n         *\n         * @param {Highcharts.Legend} legend\n         * Legend to translate in.\n         *\n         * @param {Array<Highcharts.Dictionary<number>>} lines\n         * Informations about line height and items amount\n         */\n        function retranslateItems(legend, lines) {\n            const items = legend.allItems, rtl = legend.options.rtl;\n            let orgTranslateX, orgTranslateY, movementX, legendItem, actualLine = 0;\n            items.forEach((item, index) => {\n                legendItem = item.legendItem || {};\n                if (!legendItem.group) {\n                    return;\n                }\n                orgTranslateX = legendItem.group.translateX || 0;\n                orgTranslateY = legendItem.y || 0;\n                movementX = item.movementX;\n                if (movementX || (rtl && item.ranges)) {\n                    movementX = rtl ?\n                        orgTranslateX - item.options.maxSize / 2 :\n                        orgTranslateX + movementX;\n                    legendItem.group.attr({ translateX: movementX });\n                }\n                if (index > lines[actualLine].step) {\n                    actualLine++;\n                }\n                legendItem.group.attr({\n                    translateY: Math.round(orgTranslateY + lines[actualLine].height / 2)\n                });\n                legendItem.y = orgTranslateY + lines[actualLine].height / 2;\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const BubbleLegendComposition = {\n            compose\n        };\n\n        return BubbleLegendComposition;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubblePoint.js', [_modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Point, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { scatter: { prototype: { pointClass: ScatterPoint } } } } = SeriesRegistry;\n        const { extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BubblePoint extends ScatterPoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            haloPath(size) {\n                return Point.prototype.haloPath.call(this, \n                // #6067\n                size === 0 ? 0 : (this.marker ? this.marker.radius || 0 : 0) + size);\n            }\n        }\n        /* *\n         *\n         *  Class Prototype\n         *\n         * */\n        extend(BubblePoint.prototype, {\n            ttBelow: false\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BubblePoint;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleSeries.js', [_modules['Series/Bubble/BubbleLegendComposition.js'], _modules['Series/Bubble/BubblePoint.js'], _modules['Core/Color/Color.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BubbleLegendComposition, BubblePoint, Color, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { composed, noop } = H;\n        const { series: Series, seriesTypes: { column: { prototype: columnProto }, scatter: ScatterSeries } } = SeriesRegistry;\n        const { addEvent, arrayMax, arrayMin, clamp, extend, isNumber, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Add logic to pad each axis with the amount of pixels necessary to avoid the\n         * bubbles to overflow.\n         */\n        function onAxisFoundExtremes() {\n            const axisLength = this.len, { coll, isXAxis, min } = this, dataKey = isXAxis ? 'xData' : 'yData', range = (this.max || 0) - (min || 0);\n            let pxMin = 0, pxMax = axisLength, transA = axisLength / range, hasActiveSeries;\n            if (coll !== 'xAxis' && coll !== 'yAxis') {\n                return;\n            }\n            // Handle padding on the second pass, or on redraw\n            this.series.forEach((series) => {\n                if (series.bubblePadding && series.reserveSpace()) {\n                    // Correction for #1673\n                    this.allowZoomOutside = true;\n                    hasActiveSeries = true;\n                    const data = series[dataKey];\n                    if (isXAxis) {\n                        (series.onPoint || series).getRadii(0, 0, series);\n                        if (series.onPoint) {\n                            series.radii = series.onPoint.radii;\n                        }\n                    }\n                    if (range > 0) {\n                        let i = data.length;\n                        while (i--) {\n                            if (isNumber(data[i]) &&\n                                this.dataMin <= data[i] &&\n                                data[i] <= this.max) {\n                                const radius = series.radii && series.radii[i] || 0;\n                                pxMin = Math.min(((data[i] - min) * transA) - radius, pxMin);\n                                pxMax = Math.max(((data[i] - min) * transA) + radius, pxMax);\n                            }\n                        }\n                    }\n                }\n            });\n            // Apply the padding to the min and max properties\n            if (hasActiveSeries && range > 0 && !this.logarithmic) {\n                pxMax -= axisLength;\n                transA *= (axisLength +\n                    Math.max(0, pxMin) - // #8901\n                    Math.min(pxMax, axisLength)) / axisLength;\n                [\n                    ['min', 'userMin', pxMin],\n                    ['max', 'userMax', pxMax]\n                ].forEach((keys) => {\n                    if (typeof pick(this.options[keys[0]], this[keys[1]]) === 'undefined') {\n                        this[keys[0]] += keys[2] / transA;\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BubbleSeries extends ScatterSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, LegendClass, SeriesClass) {\n                BubbleLegendComposition.compose(ChartClass, LegendClass, SeriesClass);\n                if (pushUnique(composed, 'Series.Bubble')) {\n                    addEvent(AxisClass, 'foundExtremes', onAxisFoundExtremes);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Perform animation on the bubbles\n             * @private\n             */\n            animate(init) {\n                if (!init &&\n                    this.points.length < this.options.animationLimit // #8099\n                ) {\n                    this.points.forEach(function (point) {\n                        const { graphic } = point;\n                        if (graphic && graphic.width) { // URL symbols don't have width\n                            // Start values\n                            if (!this.hasRendered) {\n                                graphic.attr({\n                                    x: point.plotX,\n                                    y: point.plotY,\n                                    width: 1,\n                                    height: 1\n                                });\n                            }\n                            // Run animation\n                            graphic.animate(this.markerAttribs(point), this.options.animation);\n                        }\n                    }, this);\n                }\n            }\n            /**\n             * Get the radius for each point based on the minSize, maxSize and each\n             * point's Z value. This must be done prior to Series.translate because\n             * the axis needs to add padding in accordance with the point sizes.\n             * @private\n             */\n            getRadii() {\n                const zData = this.zData, yData = this.yData, radii = [];\n                let len, i, value, zExtremes = this.chart.bubbleZExtremes;\n                const { minPxSize, maxPxSize } = this.getPxExtremes();\n                // Get the collective Z extremes of all bubblish series. The chart-level\n                // `bubbleZExtremes` are only computed once, and reset on `updatedData`\n                // in any member series.\n                if (!zExtremes) {\n                    let zMin = Number.MAX_VALUE;\n                    let zMax = -Number.MAX_VALUE;\n                    let valid;\n                    this.chart.series.forEach((otherSeries) => {\n                        if (otherSeries.bubblePadding && otherSeries.reserveSpace()) {\n                            const zExtremes = (otherSeries.onPoint || otherSeries).getZExtremes();\n                            if (zExtremes) {\n                                // Changed '||' to 'pick' because min or max can be 0.\n                                // #17280\n                                zMin = Math.min(pick(zMin, zExtremes.zMin), zExtremes.zMin);\n                                zMax = Math.max(pick(zMax, zExtremes.zMax), zExtremes.zMax);\n                                valid = true;\n                            }\n                        }\n                    });\n                    if (valid) {\n                        zExtremes = { zMin, zMax };\n                        this.chart.bubbleZExtremes = zExtremes;\n                    }\n                    else {\n                        zExtremes = { zMin: 0, zMax: 0 };\n                    }\n                }\n                // Set the shape type and arguments to be picked up in drawPoints\n                for (i = 0, len = zData.length; i < len; i++) {\n                    value = zData[i];\n                    // Separate method to get individual radius for bubbleLegend\n                    radii.push(this.getRadius(zExtremes.zMin, zExtremes.zMax, minPxSize, maxPxSize, value, yData && yData[i]));\n                }\n                this.radii = radii;\n            }\n            /**\n             * Get the individual radius for one point.\n             * @private\n             */\n            getRadius(zMin, zMax, minSize, maxSize, value, yValue) {\n                const options = this.options, sizeByArea = options.sizeBy !== 'width', zThreshold = options.zThreshold;\n                let zRange = zMax - zMin, pos = 0.5;\n                // #8608 - bubble should be visible when z is undefined\n                if (yValue === null || value === null) {\n                    return null;\n                }\n                if (isNumber(value)) {\n                    // When sizing by threshold, the absolute value of z determines\n                    // the size of the bubble.\n                    if (options.sizeByAbsoluteValue) {\n                        value = Math.abs(value - zThreshold);\n                        zMax = zRange = Math.max(zMax - zThreshold, Math.abs(zMin - zThreshold));\n                        zMin = 0;\n                    }\n                    // Issue #4419 - if value is less than zMin, push a radius that's\n                    // always smaller than the minimum size\n                    if (value < zMin) {\n                        return minSize / 2 - 1;\n                    }\n                    // Relative size, a number between 0 and 1\n                    if (zRange > 0) {\n                        pos = (value - zMin) / zRange;\n                    }\n                }\n                if (sizeByArea && pos >= 0) {\n                    pos = Math.sqrt(pos);\n                }\n                return Math.ceil(minSize + pos * (maxSize - minSize)) / 2;\n            }\n            /**\n             * Define hasData function for non-cartesian series.\n             * Returns true if the series has points at all.\n             * @private\n             */\n            hasData() {\n                return !!this.processedXData.length; // != 0\n            }\n            /**\n             * @private\n             */\n            pointAttribs(point, state) {\n                const markerOptions = this.options.marker, fillOpacity = markerOptions.fillOpacity, attr = Series.prototype.pointAttribs.call(this, point, state);\n                if (fillOpacity !== 1) {\n                    attr.fill = color(attr.fill)\n                        .setOpacity(fillOpacity)\n                        .get('rgba');\n                }\n                return attr;\n            }\n            /**\n             * Extend the base translate method to handle bubble size\n             * @private\n             */\n            translate() {\n                // Run the parent method\n                super.translate.call(this);\n                this.getRadii();\n                this.translateBubble();\n            }\n            translateBubble() {\n                const { data, options, radii } = this, { minPxSize } = this.getPxExtremes();\n                // Set the shape type and arguments to be picked up in drawPoints\n                let i = data.length;\n                while (i--) {\n                    const point = data[i];\n                    const radius = radii ? radii[i] : 0; // #1737\n                    // Negative points means negative z values (#9728)\n                    if (this.zoneAxis === 'z') {\n                        point.negative = (point.z || 0) < (options.zThreshold || 0);\n                    }\n                    if (isNumber(radius) && radius >= minPxSize / 2) {\n                        // Shape arguments\n                        point.marker = extend(point.marker, {\n                            radius,\n                            width: 2 * radius,\n                            height: 2 * radius\n                        });\n                        // Alignment box for the data label\n                        point.dlBox = {\n                            x: point.plotX - radius,\n                            y: point.plotY - radius,\n                            width: 2 * radius,\n                            height: 2 * radius\n                        };\n                    }\n                    else { // below zThreshold\n                        // #1691\n                        point.shapeArgs = point.plotY = point.dlBox = void 0;\n                        point.isInside = false; // #17281\n                    }\n                }\n            }\n            getPxExtremes() {\n                const smallestSize = Math.min(this.chart.plotWidth, this.chart.plotHeight);\n                const getPxSize = (length) => {\n                    let isPercent;\n                    if (typeof length === 'string') {\n                        isPercent = /%$/.test(length);\n                        length = parseInt(length, 10);\n                    }\n                    return isPercent ? smallestSize * length / 100 : length;\n                };\n                const minPxSize = getPxSize(pick(this.options.minSize, 8));\n                // Prioritize min size if conflict to make sure bubbles are\n                // always visible. #5873\n                const maxPxSize = Math.max(getPxSize(pick(this.options.maxSize, '20%')), minPxSize);\n                return { minPxSize, maxPxSize };\n            }\n            getZExtremes() {\n                const options = this.options, zData = (this.zData || []).filter(isNumber);\n                if (zData.length) {\n                    const zMin = pick(options.zMin, clamp(arrayMin(zData), options.displayNegative === false ?\n                        (options.zThreshold || 0) :\n                        -Number.MAX_VALUE, Number.MAX_VALUE));\n                    const zMax = pick(options.zMax, arrayMax(zData));\n                    if (isNumber(zMin) && isNumber(zMax)) {\n                        return { zMin, zMax };\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * A bubble series is a three dimensional series type where each point\n         * renders an X, Y and Z value. Each points is drawn as a bubble where the\n         * position along the X and Y axes mark the X and Y values, and the size of\n         * the bubble relates to the Z value.\n         *\n         * @sample {highcharts} highcharts/demo/bubble/\n         *         Bubble chart\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    cluster\n         * @product      highcharts highstock\n         * @requires     highcharts-more\n         * @optionparent plotOptions.bubble\n         */\n        BubbleSeries.defaultOptions = merge(ScatterSeries.defaultOptions, {\n            dataLabels: {\n                formatter: function () {\n                    const { numberFormatter } = this.series.chart;\n                    const { z } = this.point;\n                    return isNumber(z) ? numberFormatter(z, -1) : '';\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            /**\n             * If there are more points in the series than the `animationLimit`, the\n             * animation won't run. Animation affects overall performance and\n             * doesn't work well with heavy data series.\n             *\n             * @since 6.1.0\n             */\n            animationLimit: 250,\n            /**\n             * Whether to display negative sized bubbles. The threshold is given\n             * by the [zThreshold](#plotOptions.bubble.zThreshold) option, and negative\n             * bubbles can be visualized by setting\n             * [negativeColor](#plotOptions.bubble.negativeColor).\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-negative/\n             *         Negative bubbles\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     3.0\n             * @apioption plotOptions.bubble.displayNegative\n             */\n            /**\n             * @extends   plotOptions.series.marker\n             * @excluding enabled, enabledThreshold, height, radius, width\n             */\n            marker: {\n                lineColor: null,\n                lineWidth: 1,\n                /**\n                 * The fill opacity of the bubble markers.\n                 */\n                fillOpacity: 0.5,\n                /**\n                 * In bubble charts, the radius is overridden and determined based\n                 * on the point's data value.\n                 *\n                 * @ignore-option\n                 */\n                radius: null,\n                states: {\n                    hover: {\n                        radiusPlus: 0\n                    }\n                },\n                /**\n                 * A predefined shape or symbol for the marker. Possible values are\n                 * \"circle\", \"square\", \"diamond\", \"triangle\" and \"triangle-down\".\n                 *\n                 * Additionally, the URL to a graphic can be given on the form\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/bubble-symbol/\n                 *         Bubble chart with various symbols\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-symbol/\n                 *         General chart with predefined, graphic and custom markers\n                 *\n                 * @type  {Highcharts.SymbolKeyValue|string}\n                 * @since 5.0.11\n                 */\n                symbol: 'circle'\n            },\n            /**\n             * Minimum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the `z` value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type    {number|string}\n             * @since   3.0\n             * @product highcharts highstock\n             */\n            minSize: 8,\n            /**\n             * Maximum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the `z` value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type    {number|string}\n             * @since   3.0\n             * @product highcharts highstock\n             */\n            maxSize: '20%',\n            /**\n             * When a point's Z value is below the\n             * [zThreshold](#plotOptions.bubble.zThreshold)\n             * setting, this color is used.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-negative/\n             *         Negative bubbles\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.bubble.negativeColor\n             */\n            /**\n             * Whether the bubble's value should be represented by the area or the\n             * width of the bubble. The default, `area`, corresponds best to the\n             * human perception of the size of each bubble.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-sizeby/\n             *         Comparison of area and size\n             *\n             * @type       {Highcharts.BubbleSizeByValue}\n             * @default    area\n             * @since      3.0.7\n             * @apioption  plotOptions.bubble.sizeBy\n             */\n            /**\n             * When this is true, the absolute value of z determines the size of\n             * the bubble. This means that with the default `zThreshold` of 0, a\n             * bubble of value -1 will have the same size as a bubble of value 1,\n             * while a bubble of value 0 will have a smaller size according to\n             * `minSize`.\n             *\n             * @sample    {highcharts} highcharts/plotoptions/bubble-sizebyabsolutevalue/\n             *            Size by absolute value, various thresholds\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.9\n             * @product   highcharts\n             * @apioption plotOptions.bubble.sizeByAbsoluteValue\n             */\n            /**\n             * When this is true, the series will not cause the Y axis to cross\n             * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n             * unless the data actually crosses the plane.\n             *\n             * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n             * 3 will make the Y axis show negative values according to the\n             * `minPadding` option. If `softThreshold` is `true`, the Y axis starts\n             * at 0.\n             *\n             * @since   4.1.9\n             * @product highcharts\n             */\n            softThreshold: false,\n            states: {\n                hover: {\n                    halo: {\n                        size: 5\n                    }\n                }\n            },\n            tooltip: {\n                pointFormat: '({point.x}, {point.y}), Size: {point.z}'\n            },\n            turboThreshold: 0,\n            /**\n             * The minimum for the Z value range. Defaults to the highest Z value\n             * in the data.\n             *\n             * @see [zMin](#plotOptions.bubble.zMin)\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-zmin-zmax/\n             *         Z has a possible range of 0-100\n             *\n             * @type      {number}\n             * @since     4.0.3\n             * @product   highcharts\n             * @apioption plotOptions.bubble.zMax\n             */\n            /**\n             * @default   z\n             * @apioption plotOptions.bubble.colorKey\n             */\n            /**\n             * The minimum for the Z value range. Defaults to the lowest Z value\n             * in the data.\n             *\n             * @see [zMax](#plotOptions.bubble.zMax)\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-zmin-zmax/\n             *         Z has a possible range of 0-100\n             *\n             * @type      {number}\n             * @since     4.0.3\n             * @product   highcharts\n             * @apioption plotOptions.bubble.zMin\n             */\n            /**\n             * When [displayNegative](#plotOptions.bubble.displayNegative) is `false`,\n             * bubbles with lower Z values are skipped. When `displayNegative`\n             * is `true` and a [negativeColor](#plotOptions.bubble.negativeColor)\n             * is given, points with lower Z is colored.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-negative/\n             *         Negative bubbles\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            zThreshold: 0,\n            zoneAxis: 'z'\n        });\n        extend(BubbleSeries.prototype, {\n            alignDataLabel: columnProto.alignDataLabel,\n            applyZones: noop,\n            bubblePadding: true,\n            isBubble: true,\n            pointArrayMap: ['y', 'z'],\n            pointClass: BubblePoint,\n            parallelArrays: ['x', 'y', 'z'],\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            specialGroup: 'group',\n            zoneAxis: 'z'\n        });\n        // On updated data in any series, delete the chart-level Z extremes cache\n        addEvent(BubbleSeries, 'updatedData', (e) => {\n            delete e.target.chart.bubbleZExtremes;\n        });\n        // After removing series, delete the chart-level Z extremes cache, #17502.\n        addEvent(BubbleSeries, 'remove', (e) => {\n            delete e.target.chart.bubbleZExtremes;\n        });\n        SeriesRegistry.registerSeriesType('bubble', BubbleSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"area\"|\"width\"} Highcharts.BubbleSizeByValue\n         */\n        ''; // detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `bubble` series. If the [type](#series.bubble.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.bubble\n         * @excluding dataParser, dataURL, stack\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.bubble\n         */\n        /**\n         * An array of data points for the series. For the `bubble` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,y,z`. If the first value is a string, it is applied as the name of\n         *    the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 1, 2],\n         *        [1, 5, 5],\n         *        [2, 0, 2]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.bubble.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 1,\n         *        z: 1,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 5,\n         *        z: 4,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.line.data\n         * @product   highcharts\n         * @apioption series.bubble.data\n         */\n        /**\n         * @extends     series.line.data.marker\n         * @excluding   enabledThreshold, height, radius, width\n         * @product     highcharts\n         * @apioption   series.bubble.data.marker\n         */\n        /**\n         * The size value for each bubble. The bubbles' diameters are computed\n         * based on the `z`, and controlled by series options like `minSize`,\n         * `maxSize`, `sizeBy`, `zMin` and `zMax`.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.bubble.data.z\n         */\n        /**\n         * @excluding enabled, enabledThreshold, height, radius, width\n         * @apioption series.bubble.marker\n         */\n        ''; // adds doclets above to transpiled file\n\n        return BubbleSeries;\n    });\n    _registerModule(_modules, 'Series/ColumnRange/ColumnRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { column: { prototype: { pointClass: { prototype: columnProto } } }, arearange: { prototype: { pointClass: AreaRangePoint } } } } = SeriesRegistry;\n        const { extend, isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class ColumnRangePoint extends AreaRangePoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            isValid() {\n                return isNumber(this.low);\n            }\n        }\n        extend(ColumnRangePoint.prototype, {\n            setState: columnProto.setState\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnRangePoint;\n    });\n    _registerModule(_modules, 'Series/ColumnRange/ColumnRangeSeries.js', [_modules['Series/ColumnRange/ColumnRangePoint.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ColumnRangePoint, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { seriesTypes: { arearange: AreaRangeSeries, column: ColumnSeries, column: { prototype: columnProto } } } = SeriesRegistry;\n        const { addEvent, clamp, extend, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The column range is a cartesian series type with higher and lower\n         * Y values along an X axis. To display horizontal bars, set\n         * [chart.inverted](#chart.inverted) to `true`.\n         *\n         * @sample {highcharts|highstock} highcharts/demo/columnrange/\n         *         Inverted column range\n         *\n         * @extends      plotOptions.column\n         * @since        2.3.0\n         * @excluding    negativeColor, stacking, softThreshold, threshold\n         * @product      highcharts highstock\n         * @requires     highcharts-more\n         * @optionparent plotOptions.columnrange\n         */\n        const columnRangeOptions = {\n            borderRadius: {\n                where: 'all'\n            },\n            /**\n             * Extended data labels for range series types. Range series data labels\n             * have no `x` and `y` options. Instead, they have `xLow`, `xHigh`,\n             * `yLow` and `yHigh` options to allow the higher and lower data label\n             * sets individually.\n             *\n             * @declare   Highcharts.SeriesAreaRangeDataLabelsOptionsObject\n             * @extends   plotOptions.arearange.dataLabels\n             * @since     2.3.0\n             * @product   highcharts highstock\n             * @apioption plotOptions.columnrange.dataLabels\n             */\n            pointRange: null,\n            legendSymbol: 'rectangle',\n            /** @ignore-option */\n            marker: null,\n            states: {\n                hover: {\n                    /** @ignore-option */\n                    halo: false\n                }\n            }\n        };\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ColumnRangeSeries class\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.columnrange\n         *\n         * @augments Highcharts.Series\n         */\n        class ColumnRangeSeries extends AreaRangeSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            setOptions() {\n                // #14359 Prevent side-effect from stacking.\n                merge(true, arguments[0], { stacking: void 0 });\n                return AreaRangeSeries.prototype.setOptions.apply(this, arguments);\n            }\n            // Overrides from modules that may be loaded after this module\n            // @todo move to compositions\n            translate() {\n                return columnProto.translate.apply(this);\n            }\n            // public crispCol(): BBoxObject {\n            //     return columnProto.crispCol.apply(this, arguments as any);\n            // }\n            // public drawPoints(): void {\n            //     return columnProto.drawPoints.apply(this, arguments as any);\n            // }\n            // public drawTracker(): void {\n            //     return columnProto.drawTracker.apply(this, arguments as any);\n            // }\n            // public getColumnMetrics(): ColumnMetricsObject {\n            //     return columnProto.getColumnMetrics.apply(this, arguments as any);\n            // }\n            pointAttribs() {\n                return columnProto.pointAttribs.apply(this, arguments);\n            }\n            // public adjustForMissingColumns(): number {\n            //     return columnProto.adjustForMissingColumns.apply(this, arguments);\n            // }\n            // public animate(): void {\n            //     return columnProto.animate.apply(this, arguments as any);\n            // }\n            translate3dPoints() {\n                return columnProto.translate3dPoints.apply(this, arguments);\n            }\n            translate3dShapes() {\n                return columnProto.translate3dShapes.apply(this, arguments);\n            }\n            afterColumnTranslate() {\n                /**\n                 * Translate data points from raw values x and y to plotX and plotY\n                 * @private\n                 */\n                const yAxis = this.yAxis, xAxis = this.xAxis, startAngleRad = xAxis.startAngleRad, chart = this.chart, isRadial = this.xAxis.isRadial, safeDistance = Math.max(chart.chartWidth, chart.chartHeight) + 999;\n                let height, heightDifference, start, y;\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Don't draw too far outside plot area (#6835)\n                 * @private\n                 */\n                function safeBounds(pixelPos) {\n                    return clamp(pixelPos, -safeDistance, safeDistance);\n                }\n                // Set plotLow and plotHigh\n                this.points.forEach((point) => {\n                    const shapeArgs = point.shapeArgs || {}, minPointLength = this.options.minPointLength, plotY = point.plotY, plotHigh = yAxis.translate(point.high, 0, 1, 0, 1);\n                    if (isNumber(plotHigh) && isNumber(plotY)) {\n                        point.plotHigh = safeBounds(plotHigh);\n                        point.plotLow = safeBounds(plotY);\n                        // adjust shape\n                        y = point.plotHigh;\n                        height = pick(point.rectPlotY, point.plotY) - point.plotHigh;\n                        // Adjust for minPointLength\n                        if (Math.abs(height) < minPointLength) {\n                            heightDifference = (minPointLength - height);\n                            height += heightDifference;\n                            y -= heightDifference / 2;\n                            // Adjust for negative ranges or reversed Y axis (#1457)\n                        }\n                        else if (height < 0) {\n                            height *= -1;\n                            y -= height;\n                        }\n                        if (isRadial && this.polar) {\n                            start = point.barX + startAngleRad;\n                            point.shapeType = 'arc';\n                            point.shapeArgs = this.polar.arc(y + height, y, start, start + point.pointWidth);\n                        }\n                        else {\n                            shapeArgs.height = height;\n                            shapeArgs.y = y;\n                            const { x = 0, width = 0 } = shapeArgs;\n                            // #17912, aligning column range points\n                            // merge if shapeArgs contains more properties e.g. for 3d\n                            point.shapeArgs = merge(point.shapeArgs, this.crispCol(x, y, width, height));\n                            point.tooltipPos = chart.inverted ?\n                                [\n                                    yAxis.len + yAxis.pos - chart.plotLeft - y -\n                                        height / 2,\n                                    xAxis.len + xAxis.pos - chart.plotTop - x -\n                                        width / 2,\n                                    height\n                                ] : [\n                                xAxis.left - chart.plotLeft + x + width / 2,\n                                yAxis.pos - chart.plotTop + y + height / 2,\n                                height\n                            ]; // don't inherit from column tooltip position - #3372\n                        }\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        ColumnRangeSeries.defaultOptions = merge(ColumnSeries.defaultOptions, AreaRangeSeries.defaultOptions, columnRangeOptions);\n        addEvent(ColumnRangeSeries, 'afterColumnTranslate', function () {\n            ColumnRangeSeries.prototype.afterColumnTranslate.apply(this);\n        }, { order: 5 });\n        extend(ColumnRangeSeries.prototype, {\n            directTouch: true,\n            pointClass: ColumnRangePoint,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            adjustForMissingColumns: columnProto.adjustForMissingColumns,\n            animate: columnProto.animate,\n            crispCol: columnProto.crispCol,\n            drawGraph: noop,\n            drawPoints: columnProto.drawPoints,\n            getSymbol: noop,\n            drawTracker: columnProto.drawTracker,\n            getColumnMetrics: columnProto.getColumnMetrics\n            // pointAttribs: columnProto.pointAttribs,\n            // polarArc: columnProto.polarArc\n            // translate3dPoints: columnProto.translate3dPoints,\n            // translate3dShapes: columnProto.translate3dShapes\n        });\n        SeriesRegistry.registerSeriesType('columnrange', ColumnRangeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `columnrange` series. If the [type](#series.columnrange.type)\n         * option is not specified, it is inherited from\n         * [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.columnrange\n         * @excluding dataParser, dataURL, stack, stacking\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.columnrange\n         */\n        /**\n         * An array of data points for the series. For the `columnrange` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,low,high`. If the first value is a string, it is applied as the name\n         *    of the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 4, 2],\n         *        [1, 2, 1],\n         *        [2, 9, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.columnrange.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 0,\n         *        high: 4,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 5,\n         *        high: 3,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding marker\n         * @product   highcharts highstock\n         * @apioption series.columnrange.data\n         */\n        /**\n         * @extends   series.columnrange.dataLabels\n         * @product   highcharts highstock\n         * @apioption series.columnrange.data.dataLabels\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnrange.states.hover\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnrange.states.select\n         */\n        ''; // adds doclets above into transpiled\n\n        return ColumnRangeSeries;\n    });\n    _registerModule(_modules, 'Series/ColumnPyramid/ColumnPyramidSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Column pyramid series display one pyramid per value along an X axis.\n         * To display horizontal pyramids, set [chart.inverted](#chart.inverted) to\n         * `true`.\n         *\n         * @sample {highcharts|highstock} highcharts/demo/column-pyramid/\n         *         Column pyramid\n         * @sample {highcharts|highstock} highcharts/plotoptions/columnpyramid-stacked/\n         *         Column pyramid stacked\n         * @sample {highcharts|highstock} highcharts/plotoptions/columnpyramid-inverted/\n         *         Column pyramid inverted\n         *\n         * @extends      plotOptions.column\n         * @since        7.0.0\n         * @product      highcharts highstock\n         * @excluding    boostThreshold, borderRadius, crisp, depth, edgeColor,\n         *               edgeWidth, groupZPadding, negativeColor, softThreshold,\n         *               threshold, zoneAxis, zones, boostBlending\n         * @requires     highcharts-more\n         * @optionparent plotOptions.columnpyramid\n         */\n        const ColumnPyramidSeriesDefaults = {};\n        /**\n         * A `columnpyramid` series. If the [type](#series.columnpyramid.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.columnpyramid\n         * @excluding connectEnds, connectNulls, dashStyle, dataParser, dataURL,\n         *            gapSize, gapUnit, linecap, lineWidth, marker, step,\n         *            boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.columnpyramid\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnpyramid.states.hover\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnpyramid.states.select\n         */\n        /**\n         * An array of data points for the series. For the `columnpyramid` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. The `x` values will be automatically\n         *    calculated, either starting at 0 and incremented by 1, or from\n         *    `pointStart` and `pointInterval` given in the series options. If the axis\n         *    has categories, these will be used. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of arrays with 2 values. In this case, the values correspond to\n         *    `x,y`. If the first value is a string, it is applied as the name of the\n         *    point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 6],\n         *        [1, 2],\n         *        [2, 6]\n         *    ]\n         *    ```\n         *\n         * 3. An array of objects with named values. The objects are point configuration\n         *    objects as seen below. If the total number of data points exceeds the\n         *    series' [turboThreshold](#series.columnpyramid.turboThreshold), this\n         *    option is not available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 9,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 6,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n         * @extends   series.line.data\n         * @excluding marker\n         * @product   highcharts highstock\n         * @apioption series.columnpyramid.data\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnPyramidSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/ColumnPyramid/ColumnPyramidSeries.js', [_modules['Series/ColumnPyramid/ColumnPyramidSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ColumnPyramidSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { clamp, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ColumnPyramidSeries class\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.columnpyramid\n         *\n         * @augments Highcharts.Series\n         */\n        class ColumnPyramidSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Overrides the column translate method\n             * @private\n             */\n            translate() {\n                const series = this, chart = series.chart, options = series.options, dense = series.dense =\n                    series.closestPointRange * series.xAxis.transA < 2, borderWidth = series.borderWidth = pick(options.borderWidth, dense ? 0 : 1 // #3635\n                ), yAxis = series.yAxis, threshold = options.threshold, minPointLength = pick(options.minPointLength, 5), metrics = series.getColumnMetrics(), pointWidth = metrics.width, pointXOffset = series.pointXOffset = metrics.offset;\n                let translatedThreshold = series.translatedThreshold =\n                    yAxis.getThreshold(threshold), \n                // postprocessed for border width\n                seriesBarW = series.barW =\n                    Math.max(pointWidth, 1 + 2 * borderWidth);\n                if (chart.inverted) {\n                    translatedThreshold -= 0.5; // #3355\n                }\n                // When the pointPadding is 0,\n                // we want the pyramids to be packed tightly,\n                // so we allow individual pyramids to have individual sizes.\n                // When pointPadding is greater,\n                // we strive for equal-width columns (#2694).\n                if (options.pointPadding) {\n                    seriesBarW = Math.ceil(seriesBarW);\n                }\n                super.translate();\n                // Record the new values\n                for (const point of series.points) {\n                    const yBottom = pick(point.yBottom, translatedThreshold), safeDistance = 999 + Math.abs(yBottom), plotY = clamp(point.plotY, -safeDistance, yAxis.len + safeDistance), \n                    // Don't draw too far outside plot area\n                    // (#1303, #2241, #4264)\n                    barW = seriesBarW / 2, barY = Math.min(plotY, yBottom), barH = Math.max(plotY, yBottom) - barY;\n                    let barX = point.plotX + pointXOffset, stackTotal, stackHeight, topPointY, topXwidth, bottomXwidth, invBarPos, x1, x2, x3, x4, y1, y2;\n                    // Adjust for null or missing points\n                    if (options.centerInCategory) {\n                        barX = series.adjustForMissingColumns(barX, pointWidth, point, metrics);\n                    }\n                    point.barX = barX;\n                    point.pointWidth = pointWidth;\n                    // Fix the tooltip on center of grouped pyramids\n                    // (#1216, #424, #3648)\n                    point.tooltipPos = chart.inverted ?\n                        [\n                            yAxis.len + yAxis.pos - chart.plotLeft - plotY,\n                            series.xAxis.len - barX - barW,\n                            barH\n                        ] :\n                        [\n                            barX + barW,\n                            plotY + yAxis.pos - chart.plotTop,\n                            barH\n                        ];\n                    stackTotal =\n                        threshold + (point.total || point.y);\n                    // overwrite stacktotal (always 100 / -100)\n                    if (options.stacking === 'percent') {\n                        stackTotal =\n                            threshold + (point.y < 0) ?\n                                -100 :\n                                100;\n                    }\n                    // get the highest point (if stack, extract from total)\n                    topPointY = yAxis.toPixels((stackTotal), true);\n                    // calculate height of stack (in pixels)\n                    stackHeight =\n                        chart.plotHeight - topPointY -\n                            (chart.plotHeight - translatedThreshold);\n                    // topXwidth and bottomXwidth = width of lines from the center\n                    // calculated from tanges proportion.\n                    // Cannot be a NaN #12514\n                    topXwidth = stackHeight ?\n                        (barW * (barY - topPointY)) / stackHeight : 0;\n                    // like topXwidth, but with height of point\n                    bottomXwidth = stackHeight ?\n                        (barW * (barY + barH - topPointY)) / stackHeight :\n                        0;\n                    /*\n                            /\\\n                           /  \\\n                    x1,y1,------ x2,y1\n                        /       \\\n                       -----------\n                    x4,y2        x3,y2\n                    */\n                    x1 = barX - topXwidth + barW;\n                    x2 = barX + topXwidth + barW;\n                    x3 = barX + bottomXwidth + barW;\n                    x4 = barX - bottomXwidth + barW;\n                    y1 = barY - minPointLength;\n                    y2 = barY + barH;\n                    if (point.y < 0) {\n                        y1 = barY;\n                        y2 = barY + barH + minPointLength;\n                    }\n                    // inverted chart\n                    if (chart.inverted) {\n                        invBarPos = yAxis.width - barY;\n                        stackHeight =\n                            topPointY - (yAxis.width - translatedThreshold);\n                        // proportion tanges\n                        topXwidth = (barW *\n                            (topPointY - invBarPos)) / stackHeight;\n                        bottomXwidth = (barW *\n                            (topPointY - (invBarPos - barH))) / stackHeight;\n                        x1 = barX + barW + topXwidth; // top bottom\n                        x2 = x1 - 2 * topXwidth; // top top\n                        x3 = barX - bottomXwidth + barW; // bottom top\n                        x4 = barX + bottomXwidth + barW; // bottom bottom\n                        y1 = barY;\n                        y2 = barY + barH - minPointLength;\n                        if (point.y < 0) {\n                            y2 = barY + barH + minPointLength;\n                        }\n                    }\n                    // Register shape type and arguments to be used in drawPoints\n                    point.shapeType = 'path';\n                    point.shapeArgs = {\n                        x: x1,\n                        y: y1,\n                        width: x2 - x1,\n                        height: barH,\n                        // path of pyramid\n                        d: [\n                            ['M', x1, y1],\n                            ['L', x2, y1],\n                            ['L', x3, y2],\n                            ['L', x4, y2],\n                            ['Z']\n                        ]\n                    };\n                }\n            }\n        }\n        /* *\n         *\n         *  Static properties\n         *\n         * */\n        ColumnPyramidSeries.defaultOptions = merge(ColumnSeries.defaultOptions, ColumnPyramidSeriesDefaults);\n        SeriesRegistry.registerSeriesType('columnpyramid', ColumnPyramidSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnPyramidSeries;\n    });\n    _registerModule(_modules, 'Series/ErrorBar/ErrorBarSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Error bars are a graphical representation of the variability of data and\n         * are used on graphs to indicate the error, or uncertainty in a reported\n         * measurement.\n         *\n         * @sample highcharts/demo/error-bar/\n         *         Error bars on a column series\n         * @sample highcharts/series-errorbar/on-scatter/\n         *         Error bars on a scatter series\n         * @sample highcharts/series-errorbar/datalabels/\n         *         Error bars with data labels\n         *\n         * @extends      plotOptions.boxplot\n         * @excluding    boostBlending, boostThreshold\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.errorbar\n         */\n        const ErrorBarSeriesDefaults = {\n            /**\n             * The main color of the bars. This can be overridden by\n             * [stemColor](#plotOptions.errorbar.stemColor) and\n             * [whiskerColor](#plotOptions.errorbar.whiskerColor) individually.\n             *\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #000000\n             * @since   3.0\n             * @product highcharts\n             */\n            color: \"#000000\" /* Palette.neutralColor100 */,\n            grouping: false,\n            /**\n             * The parent series of the error bar. The default value links it to\n             * the previous series. Otherwise, use the id of the parent series.\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            linkedTo: ':previous',\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'\n            },\n            /**\n             * The line width of the whiskers, the horizontal lines marking\n             * low and high values. When `null`, the general\n             * [lineWidth](#plotOptions.errorbar.lineWidth) applies.\n             *\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type    {number}\n             * @since   3.0\n             * @product highcharts\n             */\n            whiskerWidth: null\n        };\n        /**\n         * A `errorbar` series. If the [type](#series.errorbar.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.errorbar\n         * @excluding dataParser, dataURL, stack, stacking, boostThreshold,\n         *            boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.errorbar\n         */\n        /**\n         * An array of data points for the series. For the `errorbar` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,low,high`. If the first value is a string, it is applied as the name\n         *    of the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 10, 2],\n         *        [1, 1, 8],\n         *        [2, 4, 5]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.errorbar.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 0,\n         *        high: 0,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 5,\n         *        high: 5,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding dataLabels, drilldown, marker, states\n         * @product   highcharts\n         * @apioption series.errorbar.data\n         */\n        ''; // adds doclets above to transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ErrorBarSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/ErrorBar/ErrorBarSeries.js', [_modules['Series/BoxPlot/BoxPlotSeries.js'], _modules['Series/Column/ColumnSeries.js'], _modules['Series/ErrorBar/ErrorBarSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BoxPlotSeries, ColumnSeries, ErrorBarSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { arearange: AreaRangeSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Errorbar series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.errorbar\n         *\n         * @augments Highcharts.Series\n         */\n        class ErrorBarSeries extends BoxPlotSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getColumnMetrics() {\n                const series = this;\n                // Get the width and X offset, either on top of the linked series\n                // column or standalone\n                return ((series.linkedParent && series.linkedParent.columnMetrics) ||\n                    ColumnSeries.prototype.getColumnMetrics.call(series));\n            }\n            drawDataLabels() {\n                const series = this, valKey = series.pointValKey;\n                if (AreaRangeSeries) {\n                    AreaRangeSeries.prototype.drawDataLabels.call(series);\n                    // Arearange drawDataLabels does not reset point.y to high,\n                    // but to low after drawing (#4133)\n                    for (const point of series.points) {\n                        point.y = point[valKey];\n                    }\n                }\n            }\n            toYData(point) {\n                // return a plain array for speedy calculation\n                return [point.low, point.high];\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        ErrorBarSeries.defaultOptions = merge(BoxPlotSeries.defaultOptions, ErrorBarSeriesDefaults);\n        addEvent(ErrorBarSeries, 'afterTranslate', function () {\n            for (const point of this.points) {\n                point.plotLow = point.plotY;\n            }\n        }, { order: 0 });\n        extend(ErrorBarSeries.prototype, {\n            // pointClass: ErrorBarPoint, // just a declaration\n            pointArrayMap: ['low', 'high'],\n            pointValKey: 'high',\n            doQuartiles: false\n        });\n        SeriesRegistry.registerSeriesType('errorbar', ErrorBarSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ErrorBarSeries;\n    });\n    _registerModule(_modules, 'Series/Gauge/GaugePoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: { pointClass: Point } } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class GaugePoint extends Point {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Don't do any hover colors or anything\n             * @private\n             */\n            setState(state) {\n                this.state = state;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GaugePoint;\n    });\n    _registerModule(_modules, 'Series/Gauge/GaugeSeries.js', [_modules['Series/Gauge/GaugePoint.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (GaugePoint, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { series: Series, seriesTypes: { column: ColumnSeries } } = SeriesRegistry;\n        const { clamp, isNumber, extend, merge, pick, pInt, defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * The `gauge` series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.map\n         *\n         * @augments Highcharts.Series\n         */\n        class GaugeSeries extends Series {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Calculate paths etc\n             * @private\n             */\n            translate() {\n                const series = this, yAxis = series.yAxis, options = series.options, center = yAxis.center;\n                series.generatePoints();\n                series.points.forEach((point) => {\n                    const dialOptions = merge(options.dial, point.dial), radius = (pInt(dialOptions.radius) * center[2]) / 200, baseLength = (pInt(dialOptions.baseLength) * radius) / 100, rearLength = (pInt(dialOptions.rearLength) * radius) / 100, baseWidth = dialOptions.baseWidth, topWidth = dialOptions.topWidth;\n                    let overshoot = options.overshoot, rotation = yAxis.startAngleRad + yAxis.translate(point.y, void 0, void 0, void 0, true);\n                    // Handle the wrap and overshoot options\n                    if (isNumber(overshoot) || options.wrap === false) {\n                        overshoot = isNumber(overshoot) ?\n                            (overshoot / 180 * Math.PI) : 0;\n                        rotation = clamp(rotation, yAxis.startAngleRad - overshoot, yAxis.endAngleRad + overshoot);\n                    }\n                    rotation = rotation * 180 / Math.PI;\n                    point.shapeType = 'path';\n                    const d = dialOptions.path || [\n                        ['M', -rearLength, -baseWidth / 2],\n                        ['L', baseLength, -baseWidth / 2],\n                        ['L', radius, -topWidth / 2],\n                        ['L', radius, topWidth / 2],\n                        ['L', baseLength, baseWidth / 2],\n                        ['L', -rearLength, baseWidth / 2],\n                        ['Z']\n                    ];\n                    point.shapeArgs = {\n                        d,\n                        translateX: center[0],\n                        translateY: center[1],\n                        rotation: rotation\n                    };\n                    // Positions for data label\n                    point.plotX = center[0];\n                    point.plotY = center[1];\n                    if (defined(point.y) && yAxis.max - yAxis.min) {\n                        point.percentage =\n                            (point.y - yAxis.min) / (yAxis.max - yAxis.min) * 100;\n                    }\n                });\n            }\n            /**\n             * Draw the points where each point is one needle\n             * @private\n             */\n            drawPoints() {\n                const series = this, chart = series.chart, center = series.yAxis.center, pivot = series.pivot, options = series.options, pivotOptions = options.pivot, renderer = chart.renderer;\n                series.points.forEach((point) => {\n                    const graphic = point.graphic, shapeArgs = point.shapeArgs, d = shapeArgs.d, dialOptions = merge(options.dial, point.dial); // #1233\n                    if (graphic) {\n                        graphic.animate(shapeArgs);\n                        shapeArgs.d = d; // animate alters it\n                    }\n                    else {\n                        point.graphic =\n                            renderer[point.shapeType](shapeArgs)\n                                .addClass('highcharts-dial')\n                                .add(series.group);\n                    }\n                    // Presentational attributes\n                    if (!chart.styledMode) {\n                        point.graphic[graphic ? 'animate' : 'attr']({\n                            stroke: dialOptions.borderColor,\n                            'stroke-width': dialOptions.borderWidth,\n                            fill: dialOptions.backgroundColor\n                        });\n                    }\n                });\n                // Add or move the pivot\n                if (pivot) {\n                    pivot.animate({\n                        translateX: center[0],\n                        translateY: center[1]\n                    });\n                }\n                else if (pivotOptions) {\n                    series.pivot =\n                        renderer.circle(0, 0, pivotOptions.radius)\n                            .attr({\n                            zIndex: 2\n                        })\n                            .addClass('highcharts-pivot')\n                            .translate(center[0], center[1])\n                            .add(series.group);\n                    // Presentational attributes\n                    if (!chart.styledMode) {\n                        series.pivot.attr({\n                            fill: pivotOptions.backgroundColor,\n                            stroke: pivotOptions.borderColor,\n                            'stroke-width': pivotOptions.borderWidth\n                        });\n                    }\n                }\n            }\n            /**\n             * Animate the arrow up from startAngle\n             * @private\n             */\n            animate(init) {\n                const series = this;\n                if (!init) {\n                    series.points.forEach((point) => {\n                        const graphic = point.graphic;\n                        if (graphic) {\n                            // start value\n                            graphic.attr({\n                                rotation: series.yAxis.startAngleRad * 180 / Math.PI\n                            });\n                            // animate\n                            graphic.animate({\n                                rotation: point.shapeArgs.rotation\n                            }, series.options.animation);\n                        }\n                    });\n                }\n            }\n            /**\n             * @private\n             */\n            render() {\n                this.group = this.plotGroup('group', 'series', this.visible ? 'inherit' : 'hidden', this.options.zIndex, this.chart.seriesGroup);\n                Series.prototype.render.call(this);\n                this.group.clip(this.chart.clipRect);\n            }\n            /**\n             * Extend the basic setData method by running processData and generatePoints\n             * immediately, in order to access the points from the legend.\n             * @private\n             */\n            setData(data, redraw) {\n                Series.prototype.setData.call(this, data, false);\n                this.processData();\n                this.generatePoints();\n                if (pick(redraw, true)) {\n                    this.chart.redraw();\n                }\n            }\n            /**\n             * Define hasData function for non-cartesian series.\n             * Returns true if the series has points at all.\n             * @private\n             */\n            hasData() {\n                return !!this.points.length; // != 0\n            }\n        }\n        /* *\n         *\n         *  Static properties\n         *\n         * */\n        /**\n         * Gauges are circular plots displaying one or more values with a dial\n         * pointing to values along the perimeter.\n         *\n         * @sample highcharts/demo/gauge-speedometer/\n         *         Gauge chart\n         *\n         * @extends      plotOptions.line\n         * @excluding    animationLimit, boostThreshold, colorAxis, colorKey,\n         *               connectEnds, connectNulls, cropThreshold, dashStyle,\n         *               dragDrop, findNearestPointBy, getExtremesFromAll, marker,\n         *               negativeColor, pointPlacement, shadow, softThreshold,\n         *               stacking, states, step, threshold, turboThreshold, xAxis,\n         *               zoneAxis, zones, dataSorting, boostBlending\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.gauge\n         */\n        GaugeSeries.defaultOptions = merge(Series.defaultOptions, {\n            /**\n             * When this option is `true`, the dial will wrap around the axes.\n             * For instance, in a full-range gauge going from 0 to 360, a value\n             * of 400 will point to 40\\. When `wrap` is `false`, the dial stops\n             * at 360.\n             *\n             * @see [overshoot](#plotOptions.gauge.overshoot)\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.gauge.wrap\n             */\n            /**\n             * Data labels for the gauge. For gauges, the data labels are\n             * enabled by default and shown in a bordered box below the point.\n             *\n             * @since   2.3.0\n             * @product highcharts\n             */\n            dataLabels: {\n                borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                borderRadius: 3,\n                borderWidth: 1,\n                crop: false,\n                defer: false,\n                enabled: true,\n                verticalAlign: 'top',\n                y: 15,\n                zIndex: 2\n            },\n            /**\n             * Options for the dial or arrow pointer of the gauge.\n             *\n             * In styled mode, the dial is styled with the\n             * `.highcharts-gauge-series .highcharts-dial` rule.\n             *\n             * @sample {highcharts} highcharts/css/gauge/\n             *         Styled mode\n             *\n             * @type    {*}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            dial: {\n                /**\n                 * The background or fill color of the gauge's dial.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #000000\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.backgroundColor\n                 */\n                backgroundColor: \"#000000\" /* Palette.neutralColor100 */,\n                /**\n                 * The length of the dial's base part, relative to the total\n                 * radius or length of the dial.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {string}\n                 * @default   70%\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.baseLength\n                 */\n                baseLength: '70%',\n                /**\n                 * The pixel width of the base of the gauge dial. The base is\n                 * the part closest to the pivot, defined by baseLength.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   3\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.baseWidth\n                 */\n                baseWidth: 3,\n                /**\n                 * The border color or stroke of the gauge's dial. By default,\n                 * the borderWidth is 0, so this must be set in addition to a\n                 * custom border color.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #cccccc\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.borderColor\n                 */\n                borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                /**\n                 * The width of the gauge dial border in pixels.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.borderWidth\n                 */\n                borderWidth: 0,\n                /**\n                 * An array with an SVG path for the custom dial.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-path/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {Highcharts.SVGPathArray}\n                 * @since 10.2.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.path\n                 */\n                /**\n                 * The radius or length of the dial, in percentages relative to\n                 * the radius of the gauge itself.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {string}\n                 * @default   80%\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.radius\n                 */\n                radius: '80%',\n                /**\n                 * The length of the dial's rear end, the part that extends out\n                 * on the other side of the pivot. Relative to the dial's\n                 * length.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {string}\n                 * @default   10%\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.rearLength\n                 */\n                rearLength: '10%',\n                /**\n                 * The width of the top of the dial, closest to the perimeter.\n                 * The pivot narrows in from the base to the top.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   1\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.topWidth\n                 */\n                topWidth: 1\n            },\n            /**\n             * Allow the dial to overshoot the end of the perimeter axis by\n             * this many degrees. Say if the gauge axis goes from 0 to 60, a\n             * value of 100, or 1000, will show 5 degrees beyond the end of the\n             * axis when this option is set to 5.\n             *\n             * @see [wrap](#plotOptions.gauge.wrap)\n             *\n             * @sample {highcharts} highcharts/plotoptions/gauge-overshoot/\n             *         Allow 5 degrees overshoot\n             *\n             * @type      {number}\n             * @since     3.0.10\n             * @product   highcharts\n             * @apioption plotOptions.gauge.overshoot\n             */\n            /**\n             * Options for the pivot or the center point of the gauge.\n             *\n             * In styled mode, the pivot is styled with the\n             * `.highcharts-gauge-series .highcharts-pivot` rule.\n             *\n             * @sample {highcharts} highcharts/css/gauge/\n             *         Styled mode\n             *\n             * @type    {*}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            pivot: {\n                /**\n                 * The pixel radius of the pivot.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   5\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.radius\n                 */\n                radius: 5,\n                /**\n                 * The border or stroke width of the pivot.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.borderWidth\n                 */\n                borderWidth: 0,\n                /**\n                 * The border or stroke color of the pivot. In able to change\n                 * this, the borderWidth must also be set to something other\n                 * than the default 0.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #cccccc\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.borderColor\n                 */\n                borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                /**\n                 * The background color or fill of the pivot.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #000000\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.backgroundColor\n                 */\n                backgroundColor: \"#000000\" /* Palette.neutralColor100 */\n            },\n            tooltip: {\n                headerFormat: ''\n            },\n            /**\n             * Whether to display this particular series or series type in the\n             * legend. Defaults to false for gauge series.\n             *\n             * @since   2.3.0\n             * @product highcharts\n             */\n            showInLegend: false\n            // Prototype members\n        });\n        extend(GaugeSeries.prototype, {\n            // chart.angular will be set to true when a gauge series is present,\n            // and this will be used on the axes\n            angular: true,\n            directTouch: true,\n            drawGraph: noop,\n            drawTracker: ColumnSeries.prototype.drawTracker,\n            fixedBox: true,\n            forceDL: true,\n            noSharedTooltip: true,\n            pointClass: GaugePoint,\n            trackerGroups: ['group', 'dataLabelsGroup']\n        });\n        SeriesRegistry.registerSeriesType('gauge', GaugeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API options\n         *\n         * */\n        /**\n         * A `gauge` series. If the [type](#series.gauge.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.gauge\n         * @excluding animationLimit, boostThreshold, connectEnds, connectNulls,\n         *            cropThreshold, dashStyle, dataParser, dataURL, findNearestPointBy,\n         *            getExtremesFromAll, marker, negativeColor, pointPlacement, shadow,\n         *            softThreshold, stack, stacking, states, step, threshold,\n         *            turboThreshold, zoneAxis, zones, dataSorting, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.gauge\n         */\n        /**\n         * An array of data points for the series. For the `gauge` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.gauge.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        y: 6,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        y: 8,\n         *        name: \"Point1\",\n         *       color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * The typical gauge only contains a single data value.\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.line.data\n         * @excluding drilldown, marker, x\n         * @product   highcharts\n         * @apioption series.gauge.data\n         */\n        ''; // adds the doclets above in the transpiled file\n\n        return GaugeSeries;\n    });\n    _registerModule(_modules, 'Series/DragNodesComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (pushUnique(composed, 'DragNodes')) {\n                addEvent(ChartClass, 'load', onChartLoad);\n            }\n        }\n        /**\n         * Draggable mode:\n         * @private\n         */\n        function onChartLoad() {\n            const chart = this;\n            let mousedownUnbinder, mousemoveUnbinder, mouseupUnbinder;\n            if (chart.container) {\n                mousedownUnbinder = addEvent(chart.container, 'mousedown', (event) => {\n                    const point = chart.hoverPoint;\n                    if (point &&\n                        point.series &&\n                        point.series.hasDraggableNodes &&\n                        point.series.options.draggable) {\n                        point.series.onMouseDown(point, event);\n                        mousemoveUnbinder = addEvent(chart.container, 'mousemove', (e) => (point &&\n                            point.series &&\n                            point.series.onMouseMove(point, e)));\n                        mouseupUnbinder = addEvent(chart.container.ownerDocument, 'mouseup', (e) => {\n                            mousemoveUnbinder();\n                            mouseupUnbinder();\n                            return point &&\n                                point.series &&\n                                point.series.onMouseUp(point, e);\n                        });\n                    }\n                });\n            }\n            addEvent(chart, 'destroy', function () {\n                mousedownUnbinder();\n            });\n        }\n        /**\n         * Mouse down action, initializing drag&drop mode.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occurred.\n         * @param {Highcharts.PointerEventObject} event\n         *        Browser event, before normalization.\n         */\n        function onMouseDown(point, event) {\n            const normalizedEvent = this.chart.pointer?.normalize(event) || event;\n            point.fixedPosition = {\n                chartX: normalizedEvent.chartX,\n                chartY: normalizedEvent.chartY,\n                plotX: point.plotX,\n                plotY: point.plotY\n            };\n            point.inDragMode = true;\n        }\n        /**\n         * Mouse move action during drag&drop.\n         *\n         * @private\n         *\n         * @param {global.Event} event\n         *        Browser event, before normalization.\n         * @param {Highcharts.Point} point\n         *        The point that event occurred.\n         *\n         */\n        function onMouseMove(point, event) {\n            if (point.fixedPosition && point.inDragMode) {\n                const series = this, chart = series.chart, normalizedEvent = chart.pointer?.normalize(event) || event, diffX = point.fixedPosition.chartX - normalizedEvent.chartX, diffY = point.fixedPosition.chartY - normalizedEvent.chartY, graphLayoutsLookup = chart.graphLayoutsLookup;\n                let newPlotX, newPlotY;\n                // At least 5px to apply change (avoids simple click):\n                if (Math.abs(diffX) > 5 || Math.abs(diffY) > 5) {\n                    newPlotX = point.fixedPosition.plotX - diffX;\n                    newPlotY = point.fixedPosition.plotY - diffY;\n                    if (chart.isInsidePlot(newPlotX, newPlotY)) {\n                        point.plotX = newPlotX;\n                        point.plotY = newPlotY;\n                        point.hasDragged = true;\n                        this.redrawHalo(point);\n                        graphLayoutsLookup.forEach((layout) => {\n                            layout.restartSimulation();\n                        });\n                    }\n                }\n            }\n        }\n        /**\n         * Mouse up action, finalizing drag&drop.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occurred.\n         */\n        function onMouseUp(point) {\n            if (point.fixedPosition) {\n                if (point.hasDragged) {\n                    if (this.layout.enableSimulation) {\n                        this.layout.start();\n                    }\n                    else {\n                        this.chart.redraw();\n                    }\n                }\n                point.inDragMode = point.hasDragged = false;\n                if (!this.options.fixedDraggable) {\n                    delete point.fixedPosition;\n                }\n            }\n        }\n        /**\n         * Redraw halo on mousemove during the drag&drop action.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that should show halo.\n         */\n        function redrawHalo(point) {\n            if (point && this.halo) {\n                this.halo.attr({\n                    d: point.haloPath(this.options.states.hover.halo.size)\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DragNodesComposition = {\n            compose,\n            onMouseDown,\n            onMouseMove,\n            onMouseUp,\n            redrawHalo\n        };\n\n        return DragNodesComposition;\n    });\n    _registerModule(_modules, 'Series/GraphLayoutComposition.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (A, H, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setAnimation } = A;\n        const { composed } = H;\n        const { addEvent, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const integrations = {};\n        const layouts = {};\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (pushUnique(composed, 'GraphLayout')) {\n                addEvent(ChartClass, 'afterPrint', onChartAfterPrint);\n                addEvent(ChartClass, 'beforePrint', onChartBeforePrint);\n                addEvent(ChartClass, 'predraw', onChartPredraw);\n                addEvent(ChartClass, 'render', onChartRender);\n            }\n        }\n        /**\n         * Re-enable simulation after print.\n         * @private\n         */\n        function onChartAfterPrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    // return to default simulation\n                    layout.updateSimulation();\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Disable simulation before print if enabled.\n         * @private\n         */\n        function onChartBeforePrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    layout.updateSimulation(false);\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Clear previous layouts.\n         * @private\n         */\n        function onChartPredraw() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    layout.stop();\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            let systemsStable, afterRender = false;\n            const layoutStep = (layout) => {\n                if (layout.maxIterations-- &&\n                    isFinite(layout.temperature) &&\n                    !layout.isStable() &&\n                    !layout.enableSimulation) {\n                    // Hook similar to build-in addEvent, but instead of\n                    // creating whole events logic, use just a function.\n                    // It's faster which is important for rAF code.\n                    // Used e.g. in packed-bubble series for bubble radius\n                    // calculations\n                    if (layout.beforeStep) {\n                        layout.beforeStep();\n                    }\n                    layout.step();\n                    systemsStable = false;\n                    afterRender = true;\n                }\n            };\n            if (this.graphLayoutsLookup) {\n                setAnimation(false, this);\n                // Start simulation\n                this.graphLayoutsLookup.forEach((layout) => layout.start());\n                // Just one sync step, to run different layouts similar to\n                // async mode.\n                while (!systemsStable) {\n                    systemsStable = true;\n                    this.graphLayoutsLookup.forEach(layoutStep);\n                }\n                if (afterRender) {\n                    this.series.forEach((series) => {\n                        if (series && series.layout) {\n                            series.render();\n                        }\n                    });\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const GraphLayoutComposition = {\n            compose,\n            integrations,\n            layouts\n        };\n\n        return GraphLayoutComposition;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubblePoint.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js']], function (Chart, Point, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { bubble: { prototype: { pointClass: BubblePoint } } } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PackedBubblePoint extends BubblePoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Destroy point.\n             * Then remove point from the layout.\n             * @private\n             */\n            destroy() {\n                if (this.series.layout) {\n                    this.series.layout.removeElementFromCollection(this, this.series.layout.nodes);\n                }\n                return Point.prototype.destroy.apply(this, arguments);\n            }\n            firePointEvent() {\n                const series = this.series, seriesOptions = series.options;\n                if (this.isParentNode && seriesOptions.parentNode) {\n                    const temp = seriesOptions.allowPointSelect;\n                    seriesOptions.allowPointSelect = (seriesOptions.parentNode.allowPointSelect);\n                    Point.prototype.firePointEvent.apply(this, arguments);\n                    seriesOptions.allowPointSelect = temp;\n                }\n                else {\n                    Point.prototype.firePointEvent.apply(this, arguments);\n                }\n            }\n            select() {\n                const point = this, series = this.series, chart = series.chart;\n                if (point.isParentNode) {\n                    chart.getSelectedPoints = chart.getSelectedParentNodes;\n                    Point.prototype.select.apply(this, arguments);\n                    chart.getSelectedPoints = Chart.prototype.getSelectedPoints;\n                }\n                else {\n                    Point.prototype.select.apply(this, arguments);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PackedBubblePoint;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * A packed bubble series is a two dimensional series type, where each point\n         * renders a value in X, Y position. Each point is drawn as a bubble\n         * where the bubbles don't overlap with each other and the radius\n         * of the bubble relates to the value.\n         *\n         * @sample highcharts/demo/packed-bubble/\n         *         Packed bubble chart\n         * @sample highcharts/demo/packed-bubble-split/\n         *         Split packed bubble chart\n         *\n         * @extends      plotOptions.bubble\n         * @excluding    connectEnds, connectNulls, cropThreshold, dragDrop, jitter,\n         *               keys, pointPlacement, sizeByAbsoluteValue, step, xAxis,\n         *               yAxis, zMax, zMin, dataSorting, boostThreshold,\n         *               boostBlending\n         * @product      highcharts\n         * @since        7.0.0\n         * @requires     highcharts-more\n         * @optionparent plotOptions.packedbubble\n         *\n         * @private\n         */\n        const PackedBubbleSeriesDefaults = {\n            /**\n             * Minimum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height, divided by the square\n             * root of total number of points.\n             *\n             * @sample highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type {number|string}\n             *\n             * @private\n             */\n            minSize: '10%',\n            /**\n             * Maximum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height, divided by the square\n             * root of total number of points.\n             *\n             * @sample highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type {number|string}\n             *\n             * @private\n             */\n            maxSize: '50%',\n            sizeBy: 'area',\n            zoneAxis: 'y',\n            crisp: false,\n            tooltip: {\n                pointFormat: 'Value: {point.value}'\n            },\n            /**\n             * Flag to determine if nodes are draggable or not. Available for\n             * graph with useSimulation set to true only.\n             *\n             * @since 7.1.0\n             *\n             * @private\n             */\n            draggable: true,\n            /**\n             * An option is giving a possibility to choose between using simulation\n             * for calculating bubble positions. These reflects in both animation\n             * and final position of bubbles. Simulation is also adding options to\n             * the series graph based on used layout. In case of big data sets, with\n             * any performance issues, it is possible to disable animation and pack\n             * bubble in a simple circular way.\n             *\n             * @sample highcharts/series-packedbubble/spiral/\n             *         useSimulation set to false\n             *\n             * @since 7.1.0\n             *\n             * @private\n             */\n            useSimulation: true,\n            /**\n             * Series options for parent nodes.\n             *\n             * @since 8.1.1\n             *\n             * @private\n             */\n            parentNode: {\n                /**\n                 * Allow this series' parent nodes to be selected\n                 * by clicking on the graph.\n                 *\n                 * @since 8.1.1\n                 */\n                allowPointSelect: false\n            },\n            /**\n            /**\n             *\n             * @declare Highcharts.SeriesPackedBubbleDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _node_ in the networkgraph. In v7.0\n                 * defaults to `{key}`, since v7.1 defaults to `undefined` and\n                 * `formatter` is used instead.\n                 *\n                 * @type      {string}\n                 * @since     7.0.0\n                 * @apioption plotOptions.packedbubble.dataLabels.format\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Callback JavaScript function to format the data label for a node.\n                 * Note that if a `format` is defined, the format takes precedence\n                 * and the formatter is ignored.\n                 *\n                 * @type  {Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction}\n                 * @since 7.0.0\n                 */\n                formatter: function () {\n                    const { numberFormatter } = this.series.chart;\n                    const { value } = this.point;\n                    return isNumber(value) ? numberFormatter(value, -1) : '';\n                },\n                /**\n                 * @type      {string}\n                 * @since     7.1.0\n                 * @apioption plotOptions.packedbubble.dataLabels.parentNodeFormat\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * @type  {Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction}\n                 * @since 7.1.0\n                 */\n                parentNodeFormatter: function () {\n                    return this.name;\n                },\n                /**\n                 * @sample {highcharts} highcharts/series-packedbubble/packed-dashboard\n                 *         Dashboard with dataLabels on parentNodes\n                 *\n                 * @declare Highcharts.SeriesPackedBubbleDataLabelsTextPathOptionsObject\n                 * @since   7.1.0\n                 */\n                parentNodeTextPath: {\n                    /**\n                     * Presentation attributes for the text path.\n                     *\n                     * @type      {Highcharts.SVGAttributes}\n                     * @since     7.1.0\n                     * @apioption plotOptions.packedbubble.dataLabels.attributes\n                     */\n                    /**\n                     * Enable or disable `textPath` option for link's or marker's\n                     * data labels.\n                     *\n                     * @since 7.1.0\n                     */\n                    enabled: true\n                },\n                /**\n                 * Options for a _node_ label text which should follow marker's\n                 * shape.\n                 *\n                 * **Note:** Only SVG-based renderer supports this option.\n                 *\n                 * @extends   plotOptions.series.dataLabels.textPath\n                 * @apioption plotOptions.packedbubble.dataLabels.textPath\n                 */\n                padding: 0,\n                style: {\n                    transition: 'opacity 2000ms'\n                }\n            },\n            /**\n             * Options for layout algorithm when simulation is enabled. Inside there\n             * are options to change the speed, padding, initial bubbles positions\n             * and more.\n             *\n             * @extends   plotOptions.networkgraph.layoutAlgorithm\n             * @excluding approximation, attractiveForce, repulsiveForce, theta\n             * @since     7.1.0\n             *\n             * @private\n             */\n            layoutAlgorithm: {\n                /**\n                 * Initial layout algorithm for positioning nodes. Can be one of\n                 * the built-in options (\"circle\", \"random\") or a function where\n                 * positions should be set on each node (`this.nodes`) as\n                 * `node.plotX` and `node.plotY`.\n                 *\n                 * @sample highcharts/series-networkgraph/initial-positions/\n                 *         Initial positions with callback\n                 *\n                 * @type {\"circle\"|\"random\"|Function}\n                 */\n                initialPositions: 'circle',\n                /**\n                 * @sample highcharts/series-packedbubble/initial-radius/\n                 *         Initial radius set to 200\n                 *\n                 * @extends   plotOptions.networkgraph.layoutAlgorithm.initialPositionRadius\n                 * @excluding states\n                 */\n                initialPositionRadius: 20,\n                /**\n                 * The distance between two bubbles, when the algorithm starts to\n                 * treat two bubbles as overlapping. The `bubblePadding` is also the\n                 * expected distance between all the bubbles on simulation end.\n                 */\n                bubblePadding: 5,\n                /**\n                 * Whether bubbles should interact with their parentNode to keep\n                 * them inside.\n                 */\n                parentNodeLimit: false,\n                /**\n                 * Whether series should interact with each other or not. When\n                 * `parentNodeLimit` is set to true, thi option should be set to\n                 * false to avoid sticking points in wrong series parentNode.\n                 */\n                seriesInteraction: true,\n                /**\n                 * In case of split series, this option allows user to drag and\n                 * drop points between series, for changing point related series.\n                 *\n                 * @sample highcharts/series-packedbubble/packed-dashboard/\n                 *         Example of drag'n drop bubbles for bubble kanban\n                 */\n                dragBetweenSeries: false,\n                /**\n                 * Layout algorithm options for parent nodes.\n                 *\n                 * @extends   plotOptions.networkgraph.layoutAlgorithm\n                 * @excluding approximation, attractiveForce, enableSimulation,\n                 *            repulsiveForce, theta\n                 */\n                parentNodeOptions: {\n                    maxIterations: 400,\n                    gravitationalConstant: 0.03,\n                    maxSpeed: 50,\n                    initialPositionRadius: 100,\n                    seriesInteraction: true,\n                    /**\n                     * Styling options for parentNodes markers. Similar to\n                     * line.marker options.\n                     *\n                     * @sample highcharts/series-packedbubble/parentnode-style/\n                     *         Bubble size\n                     *\n                     * @extends   plotOptions.series.marker\n                     * @excluding states\n                     */\n                    marker: {\n                        fillColor: null,\n                        fillOpacity: 1,\n                        lineWidth: null,\n                        lineColor: null,\n                        symbol: 'circle'\n                    }\n                },\n                enableSimulation: true,\n                /**\n                 * Type of the algorithm used when positioning bubbles.\n                 * @ignore-option\n                 */\n                type: 'packedbubble',\n                /**\n                 * Integration type. Integration determines how forces are applied\n                 * on particles. The `packedbubble` integration is based on\n                 * the networkgraph `verlet` integration, where the new position\n                 * is based on a previous position without velocity:\n                 * `newPosition += previousPosition - newPosition`.\n                 *\n                 * @sample highcharts/series-networkgraph/forces/\n                 *\n                 * @ignore-option\n                 */\n                integration: 'packedbubble',\n                maxIterations: 1000,\n                /**\n                 * Whether to split series into individual groups or to mix all\n                 * series together.\n                 *\n                 * @since   7.1.0\n                 * @default false\n                 */\n                splitSeries: false,\n                /**\n                 * Max speed that node can get in one iteration. In terms of\n                 * simulation, it's a maximum translation (in pixels) that a node\n                 * can move (in both, x and y, dimensions). While `friction` is\n                 * applied on all nodes, max speed is applied only for nodes that\n                 * move very fast, for example small or disconnected ones.\n                 *\n                 * @see [layoutAlgorithm.integration](#series.networkgraph.layoutAlgorithm.integration)\n                 *\n                 * @see [layoutAlgorithm.friction](#series.networkgraph.layoutAlgorithm.friction)\n                 */\n                maxSpeed: 5,\n                gravitationalConstant: 0.01,\n                friction: -0.981\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `packedbubble` series. If the [type](#series.packedbubble.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @type      {Object}\n         * @extends   series,plotOptions.packedbubble\n         * @excluding cropThreshold, dataParser, dataSorting, dataURL, dragDrop, stack,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.packedbubble\n         */\n        /**\n         * An array of data points for the series. For the `packedbubble` series type,\n         * points can be given in the following ways:\n         *\n         * 1.  An array of `values`.\n         *\n         *  ```js\n         *     data: [5, 1, 20]\n         *  ```\n         *\n         * 2.  An array of objects with named values. The objects are point\n         * configuration objects as seen below. If the total number of data points\n         * exceeds the series' [turboThreshold](#series.packedbubble.turboThreshold),\n         * this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         value: 1,\n         *         name: \"Point2\",\n         *         color: \"#00FF00\"\n         *     }, {\n         *         value: 5,\n         *         name: \"Point1\",\n         *         color: \"#FF00FF\"\n         *     }]\n         *  ```\n         *\n         * @type      {Array<Object|Array>}\n         * @extends   series.line.data\n         * @excluding marker, x, y\n         * @sample    {highcharts} highcharts/series/data-array-of-objects/\n         *            Config objects\n         * @product   highcharts\n         * @apioption series.packedbubble.data\n         */\n        /**\n         * @type      {Highcharts.SeriesPackedBubbleDataLabelsOptionsObject|Array<Highcharts.SeriesPackedBubbleDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.packedbubble.data.dataLabels\n         */\n        /**\n         * @excluding enabled,enabledThreshold,height,radius,width\n         * @product   highcharts\n         * @apioption series.packedbubble.marker\n         */\n        ''; // adds doclets above to transpiled file\n\n        return PackedBubbleSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/VerletIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Verlet integration, force is applied on a node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distance\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function attractive(link, force, distanceXY) {\n            const massFactor = link.getMass(), translatedX = -distanceXY.x * force * this.diffTemperature, translatedY = -distanceXY.y * force * this.diffTemperature;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.plotX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.plotY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.plotX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.plotY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force function. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Verlet integration, force is applied on a node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         */\n        function barycenter() {\n            let gravitationalConstant = this.options.gravitationalConstant, xFactor = this.barycenter.xFactor, yFactor = this.barycenter.yFactor;\n            // To consider:\n            xFactor = (xFactor - (this.box.left + this.box.width) / 2) *\n                gravitationalConstant;\n            yFactor = (yFactor - (this.box.top + this.box.height) / 2) *\n                gravitationalConstant;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    node.plotX -=\n                        xFactor / node.mass / node.degree;\n                    node.plotY -=\n                        yFactor / node.mass / node.degree;\n                }\n            });\n        }\n        /**\n         * Estiamte the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.5);\n        }\n        /**\n         * Integration method.\n         *\n         * In Verlet integration, forces are applied on node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * Verlet without velocity:\n         *\n         *    x(n+1) = 2 * x(n) - x(n-1) + A(T) * deltaT ^ 2\n         *\n         * where:\n         *     - x(n+1) - new position\n         *     - x(n) - current position\n         *     - x(n-1) - previous position\n         *\n         * Assuming A(t) = 0 (no acceleration) and (deltaT = 1) we get:\n         *\n         *     x(n+1) = x(n) + (x(n) - x(n-1))\n         *\n         * where:\n         *     - (x(n) - x(n-1)) - position change\n         *\n         * TO DO:\n         * Consider Verlet with velocity to support additional\n         * forces. Or even Time-Corrected Verlet by Jonathan\n         * \"lonesock\" Dummer\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout layout object\n         * @param {Highcharts.Point} node node that should be translated\n         */\n        function integrate(layout, node) {\n            let friction = -layout.options.friction, maxSpeed = layout.options.maxSpeed, prevX = node.prevX, prevY = node.prevY, \n            // Apply friction:\n            diffX = ((node.plotX + node.dispX -\n                prevX) * friction), diffY = ((node.plotY + node.dispY -\n                prevY) * friction), abs = Math.abs, signX = abs(diffX) / (diffX || 1), // need to deal with 0\n            signY = abs(diffY) / (diffY || 1);\n            // Apply max speed:\n            diffX = signX * Math.min(maxSpeed, Math.abs(diffX));\n            diffY = signY * Math.min(maxSpeed, Math.abs(diffY));\n            // Store for the next iteration:\n            node.prevX = node.plotX + node.dispX;\n            node.prevY = node.plotY + node.dispY;\n            // Update positions:\n            node.plotX += diffX;\n            node.plotY += diffY;\n            node.temperature = layout.vectorLength({\n                x: diffX,\n                y: diffY\n            });\n        }\n        /**\n         * Repulsive force.\n         *\n         * In Verlet integration, force is applied on a node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distance\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY) {\n            const factor = force * this.diffTemperature / node.mass / node.degree;\n            if (!node.fixedPosition) {\n                node.plotX += distanceXY.x * factor;\n                node.plotY += distanceXY.y * factor;\n            }\n        }\n        /**\n         * Repulsive force function. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d * (k > d ? 1 : 0); // Force only for close nodes\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const VerletIntegration = {\n            attractive,\n            attractiveForceFunction,\n            barycenter,\n            getK,\n            integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return VerletIntegration;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleIntegration.js', [_modules['Core/Globals.js'], _modules['Series/Networkgraph/VerletIntegration.js']], function (H, VerletIntegration) {\n        /* *\n         *\n         *  (c) 2010-2024 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function barycenter() {\n            const layout = this, gravitationalConstant = layout.options.gravitationalConstant, box = layout.box, nodes = layout.nodes;\n            let centerX, centerY;\n            for (const node of nodes) {\n                if (layout.options.splitSeries && !node.isParentNode) {\n                    centerX = node.series.parentNode.plotX;\n                    centerY = node.series.parentNode.plotY;\n                }\n                else {\n                    centerX = box.width / 2;\n                    centerY = box.height / 2;\n                }\n                if (!node.fixedPosition) {\n                    node.plotX -=\n                        (node.plotX - centerX) *\n                            gravitationalConstant /\n                            (node.mass * Math.sqrt(nodes.length));\n                    node.plotY -=\n                        (node.plotY - centerY) *\n                            gravitationalConstant /\n                            (node.mass * Math.sqrt(nodes.length));\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function repulsive(node, force, distanceXY, repNode) {\n            const factor = (force * this.diffTemperature / node.mass /\n                node.degree), x = distanceXY.x * factor, y = distanceXY.y * factor;\n            if (!node.fixedPosition) {\n                node.plotX += x;\n                node.plotY += y;\n            }\n            if (!repNode.fixedPosition) {\n                repNode.plotX -= x;\n                repNode.plotY -= y;\n            }\n        }\n        /**\n         * @private\n         */\n        function repulsiveForceFunction(d, k, node, repNode) {\n            return Math.min(d, (node.marker.radius +\n                repNode.marker.radius) / 2);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PackedBubbleIntegration = {\n            barycenter,\n            getK: noop,\n            integrate: VerletIntegration.integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return PackedBubbleIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/EulerIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         * @param {number} distanceR\n             */\n        function attractive(link, force, distanceXY, distanceR) {\n            const massFactor = link.getMass(), translatedX = (distanceXY.x / distanceR) * force, translatedY = (distanceXY.y / distanceR) * force;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.dispX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.dispY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.dispX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.dispY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force function. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return d / k }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            return d * d / k;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         */\n        function barycenter() {\n            const gravitationalConstant = this.options.gravitationalConstant, xFactor = this.barycenter.xFactor, yFactor = this.barycenter.yFactor;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    const degree = node.getDegree(), phi = degree * (1 + degree / 2);\n                    node.dispX += ((xFactor - node.plotX) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                    node.dispY += ((yFactor - node.plotY) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                }\n            });\n        }\n        /**\n         * Estimate the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.3);\n        }\n        /**\n         * Integration method.\n         *\n         * In Euler integration, force were stored in a node, not changing it's\n         * position. Now, in the integrator method, we apply changes.\n         *\n         * Euler:\n         *\n         * Basic form: `x(n+1) = x(n) + v(n)`\n         *\n         * With Rengoild-Fruchterman we get:\n         * `x(n+1) = x(n) + v(n) / length(v(n)) * min(v(n), temperature(n))`\n         * where:\n         * - `x(n+1)`: next position\n         * - `x(n)`: current position\n         * - `v(n)`: velocity (comes from net force)\n         * - `temperature(n)`: current temperature\n         *\n         * Known issues:\n         * Oscillations when force vector has the same magnitude but opposite\n         * direction in the next step. Potentially solved by decreasing force by\n         * `v * (1 / node.degree)`\n         *\n         * Note:\n         * Actually `min(v(n), temperature(n))` replaces simulated annealing.\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout\n         *        Layout object\n         * @param {Highcharts.Point} node\n         *        Node that should be translated\n         */\n        function integrate(layout, node) {\n            let distanceR;\n            node.dispX +=\n                node.dispX * layout.options.friction;\n            node.dispY +=\n                node.dispY * layout.options.friction;\n            distanceR = node.temperature = layout.vectorLength({\n                x: node.dispX,\n                y: node.dispY\n            });\n            if (distanceR !== 0) {\n                node.plotX += (node.dispX / distanceR *\n                    Math.min(Math.abs(node.dispX), layout.temperature));\n                node.plotY += (node.dispY / distanceR *\n                    Math.min(Math.abs(node.dispY), layout.temperature));\n            }\n        }\n        /**\n         * Repulsive force.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY, distanceR) {\n            node.dispX +=\n                (distanceXY.x / distanceR) * force / node.degree;\n            node.dispY +=\n                (distanceXY.y / distanceR) * force / node.degree;\n        }\n        /**\n         * Repulsive force function. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`.\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return k / d }`\n         *\n         * standard:\n         *    `function (d, k) { return k * k / d }`\n         *\n         * grid-variant:\n         *    `function (d, k) { return k * k / d * (2 * k - d > 0 ? 1 : 0) }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            return k * k / d;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const EulerIntegration = {\n            attractive,\n            attractiveForceFunction,\n            barycenter,\n            getK,\n            integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return EulerIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTreeNode.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree node class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTreeNode\n         *\n         * @param {Highcharts.Dictionary<number>} box\n         *        Available space for the node\n         */\n        class QuadTreeNode {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(box) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * Read only. If QuadTreeNode is an external node, Point is stored in\n                 * `this.body`.\n                 *\n                 * @name Highcharts.QuadTreeNode#body\n                 * @type {boolean|Highcharts.Point}\n                 */\n                this.body = false;\n                /**\n                 * Read only. Internal nodes when created are empty to reserve the\n                 * space. If Point is added to this QuadTreeNode, QuadTreeNode is no\n                 * longer empty.\n                 *\n                 * @name Highcharts.QuadTreeNode#isEmpty\n                 * @type {boolean}\n                 */\n                this.isEmpty = false;\n                /**\n                 * Read only. Flag to determine if QuadTreeNode is internal (and has\n                 * subnodes with mass and central position) or external (bound to\n                 * Point).\n                 *\n                 * @name Highcharts.QuadTreeNode#isInternal\n                 * @type {boolean}\n                 */\n                this.isInternal = false;\n                /**\n                 * Read only. Array of subnodes. Empty if QuadTreeNode has just one\n                 * Point. When added another Point to this QuadTreeNode, array is\n                 * filled with four subnodes.\n                 *\n                 * @name Highcharts.QuadTreeNode#nodes\n                 * @type {Array<Highcharts.QuadTreeNode>}\n                 */\n                this.nodes = [];\n                /**\n                 * Read only. The available space for node.\n                 *\n                 * @name Highcharts.QuadTreeNode#box\n                 * @type {Highcharts.Dictionary<number>}\n                 */\n                this.box = box;\n                /**\n                 * Read only. The minium of width and height values.\n                 *\n                 * @name Highcharts.QuadTreeNode#boxSize\n                 * @type {number}\n                 */\n                this.boxSize = Math.min(box.width, box.height);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * When inserting another node into the box, that already hove one node,\n             * divide the available space into another four quadrants.\n             *\n             * Indexes of quadrants are:\n             * ```\n             * -------------               -------------\n             * |           |               |     |     |\n             * |           |               |  0  |  1  |\n             * |           |   divide()    |     |     |\n             * |     1     | ----------->  -------------\n             * |           |               |     |     |\n             * |           |               |  3  |  2  |\n             * |           |               |     |     |\n             * -------------               -------------\n             * ```\n             */\n            divideBox() {\n                const halfWidth = this.box.width / 2, halfHeight = this.box.height / 2;\n                // Top left\n                this.nodes[0] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Top right\n                this.nodes[1] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom right\n                this.nodes[2] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom left\n                this.nodes[3] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n            }\n            /**\n             * Determine which of the quadrants should be used when placing node in\n             * the QuadTree. Returned index is always in range `< 0 , 3 >`.\n             * @private\n             */\n            getBoxPosition(point) {\n                const left = point.plotX < this.box.left + this.box.width / 2, top = point.plotY < this.box.top + this.box.height / 2;\n                let index;\n                if (left) {\n                    if (top) {\n                        // Top left\n                        index = 0;\n                    }\n                    else {\n                        // Bottom left\n                        index = 3;\n                    }\n                }\n                else {\n                    if (top) {\n                        // Top right\n                        index = 1;\n                    }\n                    else {\n                        // Bottom right\n                        index = 2;\n                    }\n                }\n                return index;\n            }\n            /**\n             * Insert recursively point(node) into the QuadTree. If the given\n             * quadrant is already occupied, divide it into smaller quadrants.\n             *\n             * @param {Highcharts.Point} point\n             *        Point/node to be inserted\n             * @param {number} depth\n             *        Max depth of the QuadTree\n             */\n            insert(point, depth) {\n                let newQuadTreeNode;\n                if (this.isInternal) {\n                    // Internal node:\n                    this.nodes[this.getBoxPosition(point)].insert(point, depth - 1);\n                }\n                else {\n                    this.isEmpty = false;\n                    if (!this.body) {\n                        // First body in a quadrant:\n                        this.isInternal = false;\n                        this.body = point;\n                    }\n                    else {\n                        if (depth) {\n                            // Every other body in a quadrant:\n                            this.isInternal = true;\n                            this.divideBox();\n                            // Reinsert main body only once:\n                            if (this.body !== true) {\n                                this.nodes[this.getBoxPosition(this.body)]\n                                    .insert(this.body, depth - 1);\n                                this.body = true;\n                            }\n                            // Add second body:\n                            this.nodes[this.getBoxPosition(point)]\n                                .insert(point, depth - 1);\n                        }\n                        else {\n                            // We are below max allowed depth. That means either:\n                            // - really huge number of points\n                            // - falling two points into exactly the same position\n                            // In this case, create another node in the QuadTree.\n                            //\n                            // Alternatively we could add some noise to the\n                            // position, but that could result in different\n                            // rendered chart in exporting.\n                            newQuadTreeNode = new QuadTreeNode({\n                                top: point.plotX || NaN,\n                                left: point.plotY || NaN,\n                                // Width/height below 1px\n                                width: 0.1,\n                                height: 0.1\n                            });\n                            newQuadTreeNode.body = point;\n                            newQuadTreeNode.isInternal = false;\n                            this.nodes.push(newQuadTreeNode);\n                        }\n                    }\n                }\n            }\n            /**\n             * Each quad node requires it's mass and center position. That mass and\n             * position is used to imitate real node in the layout by approximation.\n             */\n            updateMassAndCenter() {\n                let mass = 0, plotX = 0, plotY = 0;\n                if (this.isInternal) {\n                    // Calculate weightened mass of the quad node:\n                    for (const pointMass of this.nodes) {\n                        if (!pointMass.isEmpty) {\n                            mass += pointMass.mass;\n                            plotX += pointMass.plotX * pointMass.mass;\n                            plotY += pointMass.plotY * pointMass.mass;\n                        }\n                    }\n                    plotX /= mass;\n                    plotY /= mass;\n                }\n                else if (this.body) {\n                    // Just one node, use coordinates directly:\n                    mass = this.body.mass;\n                    plotX = this.body.plotX;\n                    plotY = this.body.plotY;\n                }\n                // Store details:\n                this.mass = mass;\n                this.plotX = plotX;\n                this.plotY = plotY;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTreeNode;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTree.js', [_modules['Series/Networkgraph/QuadTreeNode.js']], function (QuadTreeNode) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTree\n         *\n         * @param {number} x\n         *        Left position of the plotting area\n         * @param {number} y\n         *        Top position of the plotting area\n         * @param {number} width\n         *        Width of the plotting area\n         * @param {number} height\n         *        Height of the plotting area\n         */\n        class QuadTree {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(x, y, width, height) {\n                // Boundary rectangle:\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: width,\n                    height: height\n                };\n                this.maxDepth = 25;\n                this.root = new QuadTreeNode(this.box);\n                this.root.isInternal = true;\n                this.root.isRoot = true;\n                this.root.divideBox();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Calculate mass of the each QuadNode in the tree.\n             */\n            calculateMassAndCenter() {\n                this.visitNodeRecursive(null, null, function (node) {\n                    node.updateMassAndCenter();\n                });\n            }\n            /**\n             * Insert nodes into the QuadTree\n             *\n             * @param {Array<Highcharts.Point>} points\n             *        Points as nodes\n             */\n            insertNodes(points) {\n                for (const point of points) {\n                    this.root.insert(point, this.maxDepth);\n                }\n            }\n            /**\n             * Depth first treversal (DFS). Using `before` and `after` callbacks,\n             * we can get two results: preorder and postorder traversals, reminder:\n             *\n             * ```\n             *     (a)\n             *     / \\\n             *   (b) (c)\n             *   / \\\n             * (d) (e)\n             * ```\n             *\n             * DFS (preorder): `a -> b -> d -> e -> c`\n             *\n             * DFS (postorder): `d -> e -> b -> c -> a`\n             *\n             * @param {Highcharts.QuadTreeNode|null} node\n             *        QuadTree node\n             * @param {Function} [beforeCallback]\n             *        Function to be called before visiting children nodes.\n             * @param {Function} [afterCallback]\n             *        Function to be called after visiting children nodes.\n             */\n            visitNodeRecursive(node, beforeCallback, afterCallback) {\n                let goFurther;\n                if (!node) {\n                    node = this.root;\n                }\n                if (node === this.root && beforeCallback) {\n                    goFurther = beforeCallback(node);\n                }\n                if (goFurther === false) {\n                    return;\n                }\n                for (const qtNode of node.nodes) {\n                    if (qtNode.isInternal) {\n                        if (beforeCallback) {\n                            goFurther = beforeCallback(qtNode);\n                        }\n                        if (goFurther === false) {\n                            continue;\n                        }\n                        this.visitNodeRecursive(qtNode, beforeCallback, afterCallback);\n                    }\n                    else if (qtNode.body) {\n                        if (beforeCallback) {\n                            beforeCallback(qtNode.body);\n                        }\n                    }\n                    if (afterCallback) {\n                        afterCallback(qtNode);\n                    }\n                }\n                if (node === this.root && afterCallback) {\n                    afterCallback(node);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTree;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/ReingoldFruchtermanLayout.js', [_modules['Series/Networkgraph/EulerIntegration.js'], _modules['Core/Globals.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Series/Networkgraph/QuadTree.js'], _modules['Core/Utilities.js'], _modules['Series/Networkgraph/VerletIntegration.js']], function (EulerIntegration, H, GraphLayout, QuadTree, U, VerletIntegration) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { clamp, defined, isFunction, fireEvent, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Reingold-Fruchterman algorithm from\n         * \"Graph Drawing by Force-directed Placement\" paper.\n         * @private\n         */\n        class ReingoldFruchtermanLayout {\n            constructor() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                this.box = {};\n                this.currentStep = 0;\n                this.initialRendering = true;\n                this.links = [];\n                this.nodes = [];\n                this.series = [];\n                this.simulation = false;\n            }\n            static compose(ChartClass) {\n                GraphLayout.compose(ChartClass);\n                GraphLayout.integrations.euler = EulerIntegration;\n                GraphLayout.integrations.verlet = VerletIntegration;\n                GraphLayout.layouts['reingold-fruchterman'] =\n                    ReingoldFruchtermanLayout;\n            }\n            init(options) {\n                this.options = options;\n                this.nodes = [];\n                this.links = [];\n                this.series = [];\n                this.box = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n                this.setInitialRendering(true);\n                this.integration =\n                    GraphLayout.integrations[options.integration];\n                this.enableSimulation = options.enableSimulation;\n                this.attractiveForce = pick(options.attractiveForce, this.integration.attractiveForceFunction);\n                this.repulsiveForce = pick(options.repulsiveForce, this.integration.repulsiveForceFunction);\n                this.approximation = options.approximation;\n            }\n            updateSimulation(enable) {\n                this.enableSimulation = pick(enable, this.options.enableSimulation);\n            }\n            start() {\n                const layout = this, series = this.series, options = this.options;\n                layout.currentStep = 0;\n                layout.forces = series[0] && series[0].forces || [];\n                layout.chart = series[0] && series[0].chart;\n                if (layout.initialRendering) {\n                    layout.initPositions();\n                    // Render elements in initial positions:\n                    series.forEach(function (s) {\n                        s.finishedAnimating = true; // #13169\n                        s.render();\n                    });\n                }\n                layout.setK();\n                layout.resetSimulation(options);\n                if (layout.enableSimulation) {\n                    layout.step();\n                }\n            }\n            step() {\n                const anyLayout = this, allSeries = this.series;\n                // Algorithm:\n                this.currentStep++;\n                if (this.approximation === 'barnes-hut') {\n                    this.createQuadTree();\n                    this.quadTree.calculateMassAndCenter();\n                }\n                for (const forceName of this.forces || []) {\n                    anyLayout[forceName + 'Forces'](this.temperature);\n                }\n                // Limit to the plotting area and cool down:\n                this.applyLimits();\n                // Cool down the system:\n                this.temperature = this.coolDown(this.startTemperature, this.diffTemperature, this.currentStep);\n                this.prevSystemTemperature = this.systemTemperature;\n                this.systemTemperature = this.getSystemTemperature();\n                if (this.enableSimulation) {\n                    for (const series of allSeries) {\n                        // Chart could be destroyed during the simulation\n                        if (series.chart) {\n                            series.render();\n                        }\n                    }\n                    if (this.maxIterations-- &&\n                        isFinite(this.temperature) &&\n                        !this.isStable()) {\n                        if (this.simulation) {\n                            win.cancelAnimationFrame(this.simulation);\n                        }\n                        this.simulation = win.requestAnimationFrame(() => this.step());\n                    }\n                    else {\n                        this.simulation = false;\n                        this.series.forEach((s) => {\n                            fireEvent(s, 'afterSimulation');\n                        });\n                    }\n                }\n            }\n            stop() {\n                if (this.simulation) {\n                    win.cancelAnimationFrame(this.simulation);\n                }\n            }\n            setArea(x, y, w, h) {\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: w,\n                    height: h\n                };\n            }\n            setK() {\n                // Optimal distance between nodes,\n                // available space around the node:\n                this.k = this.options.linkLength || this.integration.getK(this);\n            }\n            addElementsToCollection(elements, collection) {\n                for (const element of elements) {\n                    if (collection.indexOf(element) === -1) {\n                        collection.push(element);\n                    }\n                }\n            }\n            removeElementFromCollection(element, collection) {\n                const index = collection.indexOf(element);\n                if (index !== -1) {\n                    collection.splice(index, 1);\n                }\n            }\n            clear() {\n                this.nodes.length = 0;\n                this.links.length = 0;\n                this.series.length = 0;\n                this.resetSimulation();\n            }\n            resetSimulation() {\n                this.forcedStop = false;\n                this.systemTemperature = 0;\n                this.setMaxIterations();\n                this.setTemperature();\n                this.setDiffTemperature();\n            }\n            restartSimulation() {\n                if (!this.simulation) {\n                    // When dragging nodes, we don't need to calculate\n                    // initial positions and rendering nodes:\n                    this.setInitialRendering(false);\n                    // Start new simulation:\n                    if (!this.enableSimulation) {\n                        // Run only one iteration to speed things up:\n                        this.setMaxIterations(1);\n                    }\n                    else {\n                        this.start();\n                    }\n                    if (this.chart) {\n                        this.chart.redraw();\n                    }\n                    // Restore defaults:\n                    this.setInitialRendering(true);\n                }\n                else {\n                    // Extend current simulation:\n                    this.resetSimulation();\n                }\n            }\n            setMaxIterations(maxIterations) {\n                this.maxIterations = pick(maxIterations, this.options.maxIterations);\n            }\n            setTemperature() {\n                this.temperature = this.startTemperature =\n                    Math.sqrt(this.nodes.length);\n            }\n            setDiffTemperature() {\n                this.diffTemperature = this.startTemperature /\n                    (this.options.maxIterations + 1);\n            }\n            setInitialRendering(enable) {\n                this.initialRendering = enable;\n            }\n            createQuadTree() {\n                this.quadTree = new QuadTree(this.box.left, this.box.top, this.box.width, this.box.height);\n                this.quadTree.insertNodes(this.nodes);\n            }\n            initPositions() {\n                const initialPositions = this.options.initialPositions;\n                if (isFunction(initialPositions)) {\n                    initialPositions.call(this);\n                    for (const node of this.nodes) {\n                        if (!defined(node.prevX)) {\n                            node.prevX = node.plotX;\n                        }\n                        if (!defined(node.prevY)) {\n                            node.prevY = node.plotY;\n                        }\n                        node.dispX = 0;\n                        node.dispY = 0;\n                    }\n                }\n                else if (initialPositions === 'circle') {\n                    this.setCircularPositions();\n                }\n                else {\n                    this.setRandomPositions();\n                }\n            }\n            setCircularPositions() {\n                const box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, angle = 2 * Math.PI / nodesLength, rootNodes = nodes.filter(function (node) {\n                    return node.linksTo.length === 0;\n                }), visitedNodes = {}, radius = this.options.initialPositionRadius, addToNodes = (node) => {\n                    for (const link of node.linksFrom || []) {\n                        if (!visitedNodes[link.toNode.id]) {\n                            visitedNodes[link.toNode.id] = true;\n                            sortedNodes.push(link.toNode);\n                            addToNodes(link.toNode);\n                        }\n                    }\n                };\n                let sortedNodes = [];\n                // Start with identified root nodes an sort the nodes by their\n                // hierarchy. In trees, this ensures that branches don't cross\n                // eachother.\n                for (const rootNode of rootNodes) {\n                    sortedNodes.push(rootNode);\n                    addToNodes(rootNode);\n                }\n                // Cyclic tree, no root node found\n                if (!sortedNodes.length) {\n                    sortedNodes = nodes;\n                    // Dangling, cyclic trees\n                }\n                else {\n                    for (const node of nodes) {\n                        if (sortedNodes.indexOf(node) === -1) {\n                            sortedNodes.push(node);\n                        }\n                    }\n                }\n                let node;\n                // Initial positions are laid out along a small circle, appearing\n                // as a cluster in the middle\n                for (let i = 0, iEnd = sortedNodes.length; i < iEnd; ++i) {\n                    node = sortedNodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width / 2 + radius * Math.cos(i * angle));\n                    node.plotY = node.prevY = pick(node.plotY, box.height / 2 + radius * Math.sin(i * angle));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            setRandomPositions() {\n                const box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, \n                /**\n                 * Return a repeatable, quasi-random number based on an integer\n                 * input. For the initial positions\n                 * @private\n                 */\n                unrandom = (n) => {\n                    let rand = n * n / Math.PI;\n                    rand = rand - Math.floor(rand);\n                    return rand;\n                };\n                let node;\n                // Initial positions:\n                for (let i = 0, iEnd = nodes.length; i < iEnd; ++i) {\n                    node = nodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width * unrandom(i));\n                    node.plotY = node.prevY = pick(node.plotY, box.height * unrandom(nodesLength + i));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            force(name, ...args) {\n                this.integration[name].apply(this, args);\n            }\n            barycenterForces() {\n                this.getBarycenter();\n                this.force('barycenter');\n            }\n            getBarycenter() {\n                let systemMass = 0, cx = 0, cy = 0;\n                for (const node of this.nodes) {\n                    cx += node.plotX * node.mass;\n                    cy += node.plotY * node.mass;\n                    systemMass += node.mass;\n                }\n                this.barycenter = {\n                    x: cx,\n                    y: cy,\n                    xFactor: cx / systemMass,\n                    yFactor: cy / systemMass\n                };\n                return this.barycenter;\n            }\n            barnesHutApproximation(node, quadNode) {\n                const distanceXY = this.getDistXY(node, quadNode), distanceR = this.vectorLength(distanceXY);\n                let goDeeper, force;\n                if (node !== quadNode && distanceR !== 0) {\n                    if (quadNode.isInternal) {\n                        // Internal node:\n                        if (quadNode.boxSize / distanceR <\n                            this.options.theta &&\n                            distanceR !== 0) {\n                            // Treat as an external node:\n                            force = this.repulsiveForce(distanceR, this.k);\n                            this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                            goDeeper = false;\n                        }\n                        else {\n                            // Go deeper:\n                            goDeeper = true;\n                        }\n                    }\n                    else {\n                        // External node, direct force:\n                        force = this.repulsiveForce(distanceR, this.k);\n                        this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                    }\n                }\n                return goDeeper;\n            }\n            repulsiveForces() {\n                if (this.approximation === 'barnes-hut') {\n                    for (const node of this.nodes) {\n                        this.quadTree.visitNodeRecursive(null, (quadNode) => (this.barnesHutApproximation(node, quadNode)));\n                    }\n                }\n                else {\n                    let force, distanceR, distanceXY;\n                    for (const node of this.nodes) {\n                        for (const repNode of this.nodes) {\n                            if (\n                            // Node cannot repulse itself:\n                            node !== repNode &&\n                                // Only close nodes affect each other:\n                                // layout.getDistR(node, repNode) < 2 * k &&\n                                // Not dragged:\n                                !node.fixedPosition) {\n                                distanceXY = this.getDistXY(node, repNode);\n                                distanceR = this.vectorLength(distanceXY);\n                                if (distanceR !== 0) {\n                                    force = this.repulsiveForce(distanceR, this.k);\n                                    this.force('repulsive', node, force * repNode.mass, distanceXY, distanceR);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            attractiveForces() {\n                let distanceXY, distanceR, force;\n                for (const link of this.links) {\n                    if (link.fromNode && link.toNode) {\n                        distanceXY = this.getDistXY(link.fromNode, link.toNode);\n                        distanceR = this.vectorLength(distanceXY);\n                        if (distanceR !== 0) {\n                            force = this.attractiveForce(distanceR, this.k);\n                            this.force('attractive', link, force, distanceXY, distanceR);\n                        }\n                    }\n                }\n            }\n            applyLimits() {\n                const nodes = this.nodes;\n                for (const node of nodes) {\n                    if (node.fixedPosition) {\n                        return;\n                    }\n                    this.integration.integrate(this, node);\n                    this.applyLimitBox(node, this.box);\n                    // Reset displacement:\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            /**\n             * External box that nodes should fall. When hitting an edge, node\n             * should stop or bounce.\n             * @private\n             */\n            applyLimitBox(node, box) {\n                const radius = node.radius;\n                /*\n                TO DO: Consider elastic collision instead of stopping.\n                o' means end position when hitting plotting area edge:\n\n                - \"inelastic\":\n                o\n                    \\\n                ______\n                |  o'\n                |   \\\n                |    \\\n\n                - \"elastic\"/\"bounced\":\n                o\n                    \\\n                ______\n                |  ^\n                | / \\\n                |o'  \\\n\n                Euler sample:\n                if (plotX < 0) {\n                    plotX = 0;\n                    dispX *= -1;\n                }\n\n                if (plotX > box.width) {\n                    plotX = box.width;\n                    dispX *= -1;\n                }\n\n                */\n                // Limit X-coordinates:\n                node.plotX = clamp(node.plotX, box.left + radius, box.width - radius);\n                // Limit Y-coordinates:\n                node.plotY = clamp(node.plotY, box.top + radius, box.height - radius);\n            }\n            /**\n             * From \"A comparison of simulated annealing cooling strategies\" by\n             * Nourani and Andresen work.\n             * @private\n             */\n            coolDown(temperature, temperatureStep, currentStep) {\n                // Logarithmic:\n                /*\n                return Math.sqrt(this.nodes.length) -\n                    Math.log(\n                        currentStep * layout.diffTemperature\n                    );\n                */\n                // Exponential:\n                /*\n                let alpha = 0.1;\n                layout.temperature = Math.sqrt(layout.nodes.length) *\n                    Math.pow(alpha, layout.diffTemperature);\n                */\n                // Linear:\n                return temperature - temperatureStep * currentStep;\n            }\n            isStable() {\n                return Math.abs(this.systemTemperature -\n                    this.prevSystemTemperature) < 0.00001 || this.temperature <= 0;\n            }\n            getSystemTemperature() {\n                let value = 0;\n                for (const node of this.nodes) {\n                    value += node.temperature;\n                }\n                return value;\n            }\n            vectorLength(vector) {\n                return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n            }\n            getDistR(nodeA, nodeB) {\n                const distance = this.getDistXY(nodeA, nodeB);\n                return this.vectorLength(distance);\n            }\n            getDistXY(nodeA, nodeB) {\n                const xDist = nodeA.plotX - nodeB.plotX, yDist = nodeA.plotY - nodeB.plotY;\n                return {\n                    x: xDist,\n                    y: yDist,\n                    absX: Math.abs(xDist),\n                    absY: Math.abs(yDist)\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ReingoldFruchtermanLayout;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleLayout.js', [_modules['Series/GraphLayoutComposition.js'], _modules['Series/PackedBubble/PackedBubbleIntegration.js'], _modules['Series/Networkgraph/ReingoldFruchtermanLayout.js'], _modules['Core/Utilities.js']], function (GraphLayout, PackedBubbleIntegration, ReingoldFruchtermanLayout, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function chartGetSelectedParentNodes() {\n            const allSeries = this.series, selectedParentsNodes = [];\n            allSeries.forEach((series) => {\n                if (series.parentNode && series.parentNode.selected) {\n                    selectedParentsNodes.push(series.parentNode);\n                }\n            });\n            return selectedParentsNodes;\n        }\n        /**\n         * Remove accumulated data points to redistribute all of them again\n         * (i.e after hiding series by legend)\n         * @private\n         */\n        function onChartBeforeRedraw() {\n            if (this.allDataPoints) {\n                delete this.allDataPoints;\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PackedBubbleLayout extends ReingoldFruchtermanLayout {\n            constructor() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                super(...arguments);\n                this.index = NaN;\n                this.nodes = [];\n                this.series = [];\n            }\n            static compose(ChartClass) {\n                ReingoldFruchtermanLayout.compose(ChartClass);\n                GraphLayout.integrations.packedbubble = PackedBubbleIntegration;\n                GraphLayout.layouts.packedbubble = PackedBubbleLayout;\n                const chartProto = ChartClass.prototype;\n                if (!chartProto.getSelectedParentNodes) {\n                    addEvent(ChartClass, 'beforeRedraw', onChartBeforeRedraw);\n                    chartProto.getSelectedParentNodes = chartGetSelectedParentNodes;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            beforeStep() {\n                if (this.options.marker) {\n                    this.series.forEach((series) => {\n                        if (series) {\n                            series.calculateParentRadius();\n                        }\n                    });\n                }\n            }\n            // #14439, new stable check.\n            isStable() {\n                const tempDiff = Math.abs(this.prevSystemTemperature -\n                    this.systemTemperature);\n                const upScaledTemperature = 10 * this.systemTemperature /\n                    Math.sqrt(this.nodes.length);\n                return Math.abs(upScaledTemperature) < 1 &&\n                    tempDiff < 0.00001 ||\n                    this.temperature <= 0;\n            }\n            setCircularPositions() {\n                const layout = this, box = layout.box, nodes = layout.nodes, nodesLength = nodes.length + 1, angle = 2 * Math.PI / nodesLength, radius = layout.options.initialPositionRadius;\n                let centerX, centerY, index = 0;\n                for (const node of nodes) {\n                    if (layout.options.splitSeries &&\n                        !node.isParentNode) {\n                        centerX = node.series.parentNode.plotX;\n                        centerY = node.series.parentNode.plotY;\n                    }\n                    else {\n                        centerX = box.width / 2;\n                        centerY = box.height / 2;\n                    }\n                    node.plotX = node.prevX = pick(node.plotX, centerX +\n                        radius * Math.cos(node.index || index * angle));\n                    node.plotY = node.prevY = pick(node.plotY, centerY +\n                        radius * Math.sin(node.index || index * angle));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                    index++;\n                }\n            }\n            repulsiveForces() {\n                const layout = this, bubblePadding = layout.options.bubblePadding;\n                let force, distanceR, distanceXY;\n                layout.nodes.forEach((node) => {\n                    node.degree = node.mass;\n                    node.neighbours = 0;\n                    layout.nodes.forEach((repNode) => {\n                        force = 0;\n                        if (\n                        // Node cannot repulse itself:\n                        node !== repNode &&\n                            // Only close nodes affect each other:\n                            // Not dragged:\n                            !node.fixedPosition &&\n                            (layout.options.seriesInteraction ||\n                                node.series === repNode.series)) {\n                            distanceXY = layout.getDistXY(node, repNode);\n                            distanceR = (layout.vectorLength(distanceXY) -\n                                (node.marker.radius +\n                                    repNode.marker.radius +\n                                    bubblePadding));\n                            // TODO padding configurable\n                            if (distanceR < 0) {\n                                node.degree += 0.01;\n                                node.neighbours++;\n                                force = layout.repulsiveForce(-distanceR / Math.sqrt(node.neighbours), layout.k, node, repNode);\n                            }\n                            layout.force('repulsive', node, force * repNode.mass, distanceXY, repNode, distanceR);\n                        }\n                    });\n                });\n            }\n            applyLimitBox(node, box) {\n                const layout = this, factor = 0.01;\n                let distanceXY, distanceR;\n                // parentNodeLimit should be used together\n                // with seriesInteraction: false\n                if (layout.options.splitSeries &&\n                    !node.isParentNode &&\n                    layout.options.parentNodeLimit) {\n                    distanceXY = layout.getDistXY(node, node.series.parentNode);\n                    distanceR = (node.series.parentNodeRadius -\n                        node.marker.radius -\n                        layout.vectorLength(distanceXY));\n                    if (distanceR < 0 &&\n                        distanceR > -2 * node.marker.radius) {\n                        node.plotX -= distanceXY.x * factor;\n                        node.plotY -= distanceXY.y * factor;\n                    }\n                }\n                super.applyLimitBox(node, box);\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        GraphLayout.layouts.packedbubble = PackedBubbleLayout;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PackedBubbleLayout;\n    });\n    _registerModule(_modules, 'Series/SimulationSeriesUtilities.js', [_modules['Core/Utilities.js'], _modules['Core/Animation/AnimationUtilities.js']], function (U, A) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge, syncTimeout } = U;\n        const { animObject } = A;\n        /**\n         * Create a setTimeout for the first drawDataLabels()\n         * based on the dataLabels.animation.defer value\n         * for series which have enabled simulation.\n         * @private\n         */\n        function initDataLabelsDefer() {\n            const dlOptions = this.options.dataLabels;\n            // Method drawDataLabels() fires for the first time after\n            // dataLabels.animation.defer time unless\n            // the dataLabels.animation = false or dataLabels.defer = false\n            // or if the simulation is disabled\n            if (!dlOptions?.defer ||\n                !this.options.layoutAlgorithm?.enableSimulation) {\n                this.deferDataLabels = false;\n            }\n            else {\n                syncTimeout(() => {\n                    this.deferDataLabels = false;\n                }, dlOptions ? animObject(dlOptions.animation).defer : 0);\n            }\n        }\n        /**\n         * Initialize the SVG group for the DataLabels with correct opacities\n         * and correct styles so that the animation for the series that have\n         * simulation enabled works fine.\n         * @private\n         */\n        function initDataLabels() {\n            const series = this, dlOptions = series.options.dataLabels;\n            if (!series.dataLabelsGroup) {\n                const dataLabelsGroup = this.initDataLabelsGroup();\n                // Apply the dataLabels.style not only to the\n                // individual dataLabels but also to the entire group\n                if (!series.chart.styledMode && dlOptions?.style) {\n                    dataLabelsGroup.css(dlOptions.style);\n                }\n                // Initialize the opacity of the group to 0 (start of animation)\n                dataLabelsGroup.attr({ opacity: 0 });\n                if (series.visible) { // #2597, #3023, #3024\n                    dataLabelsGroup.show();\n                }\n                return dataLabelsGroup;\n            }\n            // Place it on first and subsequent (redraw) calls\n            series.dataLabelsGroup.attr(merge({ opacity: 1 }, this.getPlotBox('data-labels')));\n            return series.dataLabelsGroup;\n        }\n        const DataLabelsDeferUtils = {\n            initDataLabels,\n            initDataLabelsDefer\n        };\n\n        return DataLabelsDeferUtils;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleSeries.js', [_modules['Core/Color/Color.js'], _modules['Series/DragNodesComposition.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Core/Globals.js'], _modules['Series/PackedBubble/PackedBubblePoint.js'], _modules['Series/PackedBubble/PackedBubbleSeriesDefaults.js'], _modules['Series/PackedBubble/PackedBubbleLayout.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/SimulationSeriesUtilities.js'], _modules['Core/Utilities.js']], function (Color, DragNodesComposition, GraphLayout, H, PackedBubblePoint, PackedBubbleSeriesDefaults, PackedBubbleLayout, SeriesRegistry, D, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { noop } = H;\n        const { series: { prototype: seriesProto }, seriesTypes: { bubble: BubbleSeries } } = SeriesRegistry;\n        const { initDataLabels, initDataLabelsDefer } = D;\n        const { addEvent, clamp, defined, extend, fireEvent, isArray, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.packedbubble\n         *\n         * @extends Highcharts.Series\n         */\n        class PackedBubbleSeries extends BubbleSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.parentNodeMass = 0;\n                this.deferDataLabels = true;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, LegendClass, SeriesClass) {\n                BubbleSeries.compose(AxisClass, ChartClass, LegendClass, SeriesClass);\n                DragNodesComposition.compose(ChartClass);\n                PackedBubbleLayout.compose(ChartClass);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Create a single array of all points from all series\n             * @private\n             */\n            accumulateAllPoints() {\n                const chart = this.chart, allDataPoints = [];\n                let yData;\n                for (const series of chart.series) {\n                    if (series.is('packedbubble') && // #13574\n                        series.reserveSpace()) {\n                        yData = series.yData || [];\n                        // add data to array only if series is visible\n                        for (let j = 0; j < yData.length; j++) {\n                            allDataPoints.push([\n                                null, null,\n                                yData[j],\n                                series.index,\n                                j,\n                                {\n                                    id: j,\n                                    marker: {\n                                        radius: 0\n                                    }\n                                }\n                            ]);\n                        }\n                    }\n                }\n                return allDataPoints;\n            }\n            /**\n             * Adding the basic layout to series points.\n             * @private\n             */\n            addLayout() {\n                const layoutOptions = this.options.layoutAlgorithm =\n                    this.options.layoutAlgorithm || {}, layoutType = layoutOptions.type || 'packedbubble', chartOptions = this.chart.options.chart;\n                let graphLayoutsStorage = this.chart.graphLayoutsStorage, graphLayoutsLookup = this.chart.graphLayoutsLookup, layout;\n                if (!graphLayoutsStorage) {\n                    this.chart.graphLayoutsStorage = graphLayoutsStorage = {};\n                    this.chart.graphLayoutsLookup = graphLayoutsLookup = [];\n                }\n                layout = graphLayoutsStorage[layoutType];\n                if (!layout) {\n                    layoutOptions.enableSimulation =\n                        !defined(chartOptions.forExport) ?\n                            layoutOptions.enableSimulation :\n                            !chartOptions.forExport;\n                    graphLayoutsStorage[layoutType] = layout =\n                        new GraphLayout.layouts[layoutType]();\n                    layout.init(layoutOptions);\n                    graphLayoutsLookup.splice(layout.index, 0, layout);\n                }\n                this.layout = layout;\n                this.points.forEach((node) => {\n                    node.mass = 2;\n                    node.degree = 1;\n                    node.collisionNmb = 1;\n                });\n                layout.setArea(0, 0, this.chart.plotWidth, this.chart.plotHeight);\n                layout.addElementsToCollection([this], layout.series);\n                layout.addElementsToCollection(this.points, layout.nodes);\n            }\n            /**\n             * Function responsible for adding series layout, used for parent nodes.\n             * @private\n             */\n            addSeriesLayout() {\n                const layoutOptions = this.options.layoutAlgorithm =\n                    this.options.layoutAlgorithm || {}, layoutType = (layoutOptions.type || 'packedbubble'), graphLayoutsStorage = this.chart.graphLayoutsStorage, graphLayoutsLookup = this.chart.graphLayoutsLookup, parentNodeOptions = merge(layoutOptions, layoutOptions.parentNodeOptions, {\n                    enableSimulation: this.layout.options.enableSimulation\n                });\n                let seriesLayout = graphLayoutsStorage[layoutType + '-series'];\n                if (!seriesLayout) {\n                    graphLayoutsStorage[layoutType + '-series'] = seriesLayout =\n                        new GraphLayout.layouts[layoutType]();\n                    seriesLayout.init(parentNodeOptions);\n                    graphLayoutsLookup.splice(seriesLayout.index, 0, seriesLayout);\n                }\n                this.parentNodeLayout = seriesLayout;\n                this.createParentNodes();\n            }\n            /**\n             * The function responsible for calculating the parent node radius\n             * based on the total surface of inside-bubbles and the group BBox\n             * @private\n             */\n            calculateParentRadius() {\n                const bBox = this.seriesBox(), parentPadding = 20, minParentRadius = 20;\n                this.parentNodeRadius = clamp(Math.sqrt(2 * this.parentNodeMass / Math.PI) + parentPadding, minParentRadius, bBox ?\n                    Math.max(Math.sqrt(Math.pow(bBox.width, 2) +\n                        Math.pow(bBox.height, 2)) / 2 + parentPadding, minParentRadius) :\n                    Math.sqrt(2 * this.parentNodeMass / Math.PI) + parentPadding);\n                if (this.parentNode) {\n                    this.parentNode.marker.radius =\n                        this.parentNode.radius = this.parentNodeRadius;\n                }\n            }\n            /**\n             * Calculate min and max bubble value for radius calculation.\n             * @private\n             */\n            calculateZExtremes() {\n                const chart = this.chart, allSeries = chart.series;\n                let zMin = this.options.zMin, zMax = this.options.zMax, valMin = Infinity, valMax = -Infinity;\n                if (zMin && zMax) {\n                    return [zMin, zMax];\n                }\n                // it is needed to deal with null\n                // and undefined values\n                allSeries.forEach((series) => {\n                    series.yData.forEach((y) => {\n                        if (defined(y)) {\n                            if (y > valMax) {\n                                valMax = y;\n                            }\n                            if (y < valMin) {\n                                valMin = y;\n                            }\n                        }\n                    });\n                });\n                zMin = pick(zMin, valMin);\n                zMax = pick(zMax, valMax);\n                return [zMin, zMax];\n            }\n            /**\n             * Check if two bubbles overlaps.\n             * @private\n             */\n            checkOverlap(bubble1, bubble2) {\n                const diffX = bubble1[0] - bubble2[0], // diff of X center values\n                diffY = bubble1[1] - bubble2[1], // diff of Y center values\n                sumRad = bubble1[2] + bubble2[2]; // sum of bubble radius\n                return (Math.sqrt(diffX * diffX + diffY * diffY) -\n                    Math.abs(sumRad)) < -0.001;\n            }\n            /**\n             * Creating parent nodes for split series, in which all the bubbles\n             * are rendered.\n             * @private\n             */\n            createParentNodes() {\n                const PackedBubblePoint = this.pointClass, chart = this.chart, parentNodeLayout = this.parentNodeLayout, layoutOptions = this.layout.options;\n                let nodeAdded, parentNode = this.parentNode, parentMarkerOptions = {\n                    radius: this.parentNodeRadius,\n                    lineColor: this.color,\n                    fillColor: color(this.color).brighten(0.4).get()\n                };\n                if (layoutOptions.parentNodeOptions) {\n                    parentMarkerOptions = merge(layoutOptions.parentNodeOptions.marker || {}, parentMarkerOptions);\n                }\n                this.parentNodeMass = 0;\n                this.points.forEach((p) => {\n                    this.parentNodeMass +=\n                        Math.PI * Math.pow(p.marker.radius, 2);\n                });\n                this.calculateParentRadius();\n                parentNodeLayout.nodes.forEach((node) => {\n                    if (node.seriesIndex === this.index) {\n                        nodeAdded = true;\n                    }\n                });\n                parentNodeLayout.setArea(0, 0, chart.plotWidth, chart.plotHeight);\n                if (!nodeAdded) {\n                    if (!parentNode) {\n                        parentNode = new PackedBubblePoint(this, {\n                            mass: this.parentNodeRadius / 2,\n                            marker: parentMarkerOptions,\n                            dataLabels: {\n                                inside: false\n                            },\n                            states: {\n                                normal: {\n                                    marker: parentMarkerOptions\n                                },\n                                hover: {\n                                    marker: parentMarkerOptions\n                                }\n                            },\n                            dataLabelOnNull: true,\n                            degree: this.parentNodeRadius,\n                            isParentNode: true,\n                            seriesIndex: this.index\n                        });\n                    }\n                    if (this.parentNode) {\n                        parentNode.plotX = this.parentNode.plotX;\n                        parentNode.plotY = this.parentNode.plotY;\n                    }\n                    this.parentNode = parentNode;\n                    parentNodeLayout.addElementsToCollection([this], parentNodeLayout.series);\n                    parentNodeLayout.addElementsToCollection([parentNode], parentNodeLayout.nodes);\n                }\n            }\n            /**\n             * Function responsible for adding all the layouts to the chart.\n             * @private\n             */\n            deferLayout() {\n                // TODO split layouts to independent methods\n                const layoutOptions = this.options.layoutAlgorithm;\n                if (!this.visible) {\n                    return;\n                }\n                // layout is using nodes for position calculation\n                this.addLayout();\n                if (layoutOptions.splitSeries) {\n                    this.addSeriesLayout();\n                }\n            }\n            destroy() {\n                // Remove the series from all layouts series collections #11469\n                if (this.chart.graphLayoutsLookup) {\n                    this.chart.graphLayoutsLookup.forEach((layout) => {\n                        layout.removeElementFromCollection(this, layout.series);\n                    }, this);\n                }\n                if (this.parentNode &&\n                    this.parentNodeLayout) {\n                    this.parentNodeLayout.removeElementFromCollection(this.parentNode, this.parentNodeLayout.nodes);\n                    if (this.parentNode.dataLabel) {\n                        this.parentNode.dataLabel =\n                            this.parentNode.dataLabel.destroy();\n                    }\n                }\n                seriesProto.destroy.apply(this, arguments);\n            }\n            /**\n             * Packedbubble has two separate collections of nodes if split, render\n             * dataLabels for both sets:\n             * @private\n             */\n            drawDataLabels() {\n                // We defer drawing the dataLabels\n                // until dataLabels.animation.defer time passes\n                if (this.deferDataLabels) {\n                    return;\n                }\n                seriesProto.drawDataLabels.call(this, this.points);\n                // Render parentNode labels:\n                if (this.parentNode) {\n                    this.parentNode.formatPrefix = 'parentNode';\n                    seriesProto.drawDataLabels.call(this, [this.parentNode]);\n                }\n            }\n            /**\n             * Create Background/Parent Nodes for split series.\n             * @private\n             */\n            drawGraph() {\n                // if the series is not using layout, don't add parent nodes\n                if (!this.layout || !this.layout.options.splitSeries) {\n                    return;\n                }\n                const chart = this.chart, nodeMarker = this.layout.options.parentNodeOptions.marker, parentOptions = {\n                    fill: (nodeMarker.fillColor ||\n                        color(this.color).brighten(0.4).get()),\n                    opacity: nodeMarker.fillOpacity,\n                    stroke: nodeMarker.lineColor || this.color,\n                    'stroke-width': pick(nodeMarker.lineWidth, this.options.lineWidth)\n                };\n                let parentAttribs = {};\n                // Create the group for parent Nodes if doesn't exist\n                // If exists it will only be adjusted to the updated plot size (#12063)\n                this.parentNodesGroup = this.plotGroup('parentNodesGroup', 'parentNode', this.visible ? 'inherit' : 'hidden', 0.1, chart.seriesGroup);\n                this.group?.attr({\n                    zIndex: 2\n                });\n                this.calculateParentRadius();\n                if (this.parentNode &&\n                    defined(this.parentNode.plotX) &&\n                    defined(this.parentNode.plotY) &&\n                    defined(this.parentNodeRadius)) {\n                    parentAttribs = merge({\n                        x: this.parentNode.plotX -\n                            this.parentNodeRadius,\n                        y: this.parentNode.plotY -\n                            this.parentNodeRadius,\n                        width: this.parentNodeRadius * 2,\n                        height: this.parentNodeRadius * 2\n                    }, parentOptions);\n                    if (!this.parentNode.graphic) {\n                        this.graph = this.parentNode.graphic =\n                            chart.renderer.symbol(parentOptions.symbol)\n                                .add(this.parentNodesGroup);\n                    }\n                    this.parentNode.graphic.attr(parentAttribs);\n                }\n            }\n            drawTracker() {\n                const parentNode = this.parentNode;\n                // chart = series.chart,\n                // pointer = chart.pointer,\n                // onMouseOver = function (e: PointerEvent): void {\n                //     const point = pointer.getPointFromEvent(e);\n                //     // undefined on graph in scatterchart\n                //     if (typeof point !== 'undefined') {\n                //         pointer.isDirectTouch = true;\n                //         point.onMouseOver(e);\n                //     }\n                // };\n                let dataLabels;\n                super.drawTracker();\n                // Add reference to the point\n                if (parentNode) {\n                    dataLabels = (isArray(parentNode.dataLabels) ?\n                        parentNode.dataLabels :\n                        (parentNode.dataLabel ? [parentNode.dataLabel] : []));\n                    if (parentNode.graphic) {\n                        parentNode.graphic.element.point = parentNode;\n                    }\n                    dataLabels.forEach((dataLabel) => {\n                        (dataLabel.div || dataLabel.element).point = parentNode;\n                    });\n                }\n            }\n            /**\n             * Calculate radius of bubbles in series.\n             * @private\n             */\n            getPointRadius() {\n                const chart = this.chart, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, seriesOptions = this.options, useSimulation = seriesOptions.useSimulation, smallestSize = Math.min(plotWidth, plotHeight), extremes = {}, radii = [], allDataPoints = chart.allDataPoints || [], allDataPointsLength = allDataPoints.length;\n                let minSize, maxSize, value, radius;\n                ['minSize', 'maxSize'].forEach((prop) => {\n                    const length = parseInt(seriesOptions[prop], 10), isPercent = /%$/.test(seriesOptions[prop]);\n                    extremes[prop] = isPercent ?\n                        smallestSize * length / 100 :\n                        length * Math.sqrt(allDataPointsLength);\n                });\n                chart.minRadius = minSize = extremes.minSize /\n                    Math.sqrt(allDataPointsLength);\n                chart.maxRadius = maxSize = extremes.maxSize /\n                    Math.sqrt(allDataPointsLength);\n                const zExtremes = useSimulation ?\n                    this.calculateZExtremes() :\n                    [minSize, maxSize];\n                allDataPoints.forEach((point, i) => {\n                    value = useSimulation ?\n                        clamp(point[2], zExtremes[0], zExtremes[1]) :\n                        point[2];\n                    radius = this.getRadius(zExtremes[0], zExtremes[1], minSize, maxSize, value);\n                    if (radius === 0) {\n                        radius = null;\n                    }\n                    allDataPoints[i][2] = radius;\n                    radii.push(radius);\n                });\n                this.radii = radii;\n            }\n            init() {\n                seriesProto.init.apply(this, arguments);\n                initDataLabelsDefer.call(this);\n                /* eslint-disable no-invalid-this */\n                // When one series is modified, the others need to be recomputed\n                this.eventsToUnbind.push(addEvent(this, 'updatedData', function () {\n                    this.chart.series.forEach((s) => {\n                        if (s.type === this.type) {\n                            s.isDirty = true;\n                        }\n                    }, this);\n                }));\n                /* eslint-enable no-invalid-this */\n                return this;\n            }\n            /**\n             * Mouse up action, finalizing drag&drop.\n             * @private\n             * @param {Highcharts.Point} point The point that event occurred.\n             */\n            onMouseUp(dnPoint) {\n                const point = dnPoint;\n                if (point.fixedPosition && !point.removed) {\n                    const layout = this.layout, parentNodeLayout = this.parentNodeLayout;\n                    let distanceXY, distanceR;\n                    if (parentNodeLayout && layout.options.dragBetweenSeries) {\n                        parentNodeLayout.nodes.forEach((node) => {\n                            if (point && point.marker &&\n                                node !== point.series.parentNode) {\n                                distanceXY = layout.getDistXY(point, node);\n                                distanceR = (layout.vectorLength(distanceXY) -\n                                    node.marker.radius -\n                                    point.marker.radius);\n                                if (distanceR < 0) {\n                                    node.series.addPoint(merge(point.options, {\n                                        plotX: point.plotX,\n                                        plotY: point.plotY\n                                    }), false);\n                                    layout.removeElementFromCollection(point, layout.nodes);\n                                    point.remove();\n                                }\n                            }\n                        });\n                    }\n                    DragNodesComposition.onMouseUp.apply(this, arguments);\n                }\n            }\n            /**\n             * This is the main function responsible\n             * for positioning all of the bubbles\n             * allDataPoints - bubble array, in format [pixel x value,\n             * pixel y value, radius,\n             * related series index, related point index]\n             * @private\n             * @param {Array<Highcharts.PackedBubbleData>} allDataPoints All points from all series\n             * @return {Array<Highcharts.PackedBubbleData>} Positions of all bubbles\n             */\n            placeBubbles(allDataPoints) {\n                const checkOverlap = this.checkOverlap, positionBubble = this.positionBubble, bubblePos = [];\n                let stage = 1, j = 0, k = 0, calculatedBubble, arr = [], i;\n                // sort all points\n                const sortedArr = allDataPoints.sort((a, b) => b[2] - a[2]);\n                if (sortedArr.length) {\n                    // create first bubble in the middle of the chart\n                    bubblePos.push([\n                        [\n                            0,\n                            0,\n                            sortedArr[0][2],\n                            sortedArr[0][3],\n                            sortedArr[0][4]\n                        ] // point index\n                    ]); // 0 level bubble\n                    if (sortedArr.length > 1) {\n                        bubblePos.push([\n                            [\n                                0,\n                                (0 - sortedArr[1][2] -\n                                    sortedArr[0][2]),\n                                // move bubble above first one\n                                sortedArr[1][2],\n                                sortedArr[1][3],\n                                sortedArr[1][4]\n                            ]\n                        ]); // 1 level 1st bubble\n                        // first two already positioned so starting from 2\n                        for (i = 2; i < sortedArr.length; i++) {\n                            sortedArr[i][2] = sortedArr[i][2] || 1;\n                            // in case if radius is calculated as 0.\n                            calculatedBubble = positionBubble(bubblePos[stage][j], bubblePos[stage - 1][k], sortedArr[i]); // calculate initial bubble position\n                            if (checkOverlap(calculatedBubble, bubblePos[stage][0])) {\n                                /* if new bubble is overlapping with first bubble\n                                    * in current level (stage)\n                                    */\n                                bubblePos.push([]);\n                                k = 0;\n                                /* reset index of bubble, used for\n                                    * positioning the bubbles around it,\n                                    * we are starting from first bubble in next\n                                    * stage because we are changing level to higher\n                                    */\n                                bubblePos[stage + 1].push(positionBubble(bubblePos[stage][j], bubblePos[stage][0], sortedArr[i]));\n                                // (last bubble, 1. from curr stage, new bubble)\n                                stage++; // the new level is created, above current\n                                j = 0; // set the index of bubble in curr level to 0\n                            }\n                            else if (stage > 1 &&\n                                bubblePos[stage - 1][k + 1] &&\n                                checkOverlap(calculatedBubble, bubblePos[stage - 1][k + 1])) {\n                                /* if new bubble is overlapping with one of the prev\n                                    * stage bubbles, it means that - bubble, used for\n                                    * positioning the bubbles around it has changed\n                                    * so we need to recalculate it\n                                    */\n                                k++;\n                                bubblePos[stage].push(positionBubble(bubblePos[stage][j], bubblePos[stage - 1][k], sortedArr[i]));\n                                // (last bubble, prev stage bubble, new bubble)\n                                j++;\n                            }\n                            else { // simply add calculated bubble\n                                j++;\n                                bubblePos[stage].push(calculatedBubble);\n                            }\n                        }\n                    }\n                    this.chart.stages = bubblePos;\n                    // it may not be necessary but adding it just in case -\n                    // it is containing all of the bubble levels\n                    this.chart.rawPositions =\n                        []\n                            .concat.apply([], bubblePos);\n                    // bubble positions merged into one array\n                    this.resizeRadius();\n                    arr = this.chart.rawPositions;\n                }\n                return arr;\n            }\n            /**\n             * Function that checks for a parentMarker and sets the correct opacity.\n             * @private\n             * @param {Highcharts.Pack} point\n             * Candidate point for opacity correction.\n             * @param {string} [state]\n             * The point state, can be either `hover`, `select` or 'normal'. If\n             * undefined, normal state is assumed.\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The presentational attributes to be set on the point.\n             */\n            pointAttribs(point, state) {\n                const options = this.options, hasParentMarker = point && point.isParentNode;\n                let markerOptions = options.marker;\n                if (hasParentMarker &&\n                    options.layoutAlgorithm &&\n                    options.layoutAlgorithm.parentNodeOptions) {\n                    markerOptions = options.layoutAlgorithm.parentNodeOptions.marker;\n                }\n                const fillOpacity = markerOptions.fillOpacity, attr = seriesProto.pointAttribs.call(this, point, state);\n                if (fillOpacity !== 1) {\n                    attr['fill-opacity'] = fillOpacity;\n                }\n                return attr;\n            }\n            /**\n             * Function that is adding one bubble based on positions and sizes of\n             * two other bubbles, lastBubble is the last added bubble, newOrigin is\n             * the bubble for positioning new bubbles. nextBubble is the currently\n             * added bubble for which we are calculating positions\n             * @private\n             * @param {Array<number>} lastBubble The closest last bubble\n             * @param {Array<number>} newOrigin New bubble\n             * @param {Array<number>} nextBubble The closest next bubble\n             * @return {Array<number>} Bubble with correct positions\n             */\n            positionBubble(lastBubble, newOrigin, nextBubble) {\n                const sqrt = Math.sqrt, asin = Math.asin, acos = Math.acos, pow = Math.pow, abs = Math.abs, distance = sqrt(// dist between lastBubble and newOrigin\n                pow((lastBubble[0] - newOrigin[0]), 2) +\n                    pow((lastBubble[1] - newOrigin[1]), 2)), alfa = acos(\n                // from cosinus theorem: alfa is an angle used for\n                // calculating correct position\n                (pow(distance, 2) +\n                    pow(nextBubble[2] + newOrigin[2], 2) -\n                    pow(nextBubble[2] + lastBubble[2], 2)) / (2 * (nextBubble[2] + newOrigin[2]) * distance)), beta = asin(// from sinus theorem.\n                abs(lastBubble[0] - newOrigin[0]) /\n                    distance), \n                // providing helping variables, related to angle between\n                // lastBubble and newOrigin\n                gamma = (lastBubble[1] - newOrigin[1]) < 0 ? 0 : Math.PI, \n                // if new origin y is smaller than last bubble y value\n                // (2 and 3 quarter),\n                // add Math.PI to final angle\n                delta = (lastBubble[0] - newOrigin[0]) *\n                    (lastBubble[1] - newOrigin[1]) < 0 ?\n                    1 : -1, // (1st and 3rd quarter)\n                finalAngle = gamma + alfa + beta * delta, cosA = Math.cos(finalAngle), sinA = Math.sin(finalAngle), posX = newOrigin[0] + (newOrigin[2] + nextBubble[2]) * sinA, \n                // center of new origin + (radius1 + radius2) * sinus A\n                posY = newOrigin[1] - (newOrigin[2] + nextBubble[2]) * cosA;\n                return [\n                    posX,\n                    posY,\n                    nextBubble[2],\n                    nextBubble[3],\n                    nextBubble[4]\n                ]; // the same as described before\n            }\n            render() {\n                const dataLabels = [];\n                seriesProto.render.apply(this, arguments);\n                // #10823 - dataLabels should stay visible\n                // when enabled allowOverlap.\n                if (!this.options.dataLabels.allowOverlap) {\n                    this.data.forEach((point) => {\n                        if (isArray(point.dataLabels)) {\n                            point.dataLabels.forEach((dataLabel) => {\n                                dataLabels.push(dataLabel);\n                            });\n                        }\n                    });\n                    // Only hide overlapping dataLabels for layouts that\n                    // use simulation. Spiral packedbubble don't need\n                    // additional dataLabel hiding on every simulation step\n                    if (this.options.useSimulation) {\n                        this.chart.hideOverlappingLabels(dataLabels);\n                    }\n                }\n            }\n            /**\n             * The function responsible for resizing the bubble radius.\n             * In shortcut: it is taking the initially\n             * calculated positions of bubbles. Then it is calculating the min max\n             * of both dimensions, creating something in shape of bBox.\n             * The comparison of bBox and the size of plotArea\n             * (later it may be also the size set by customer) is giving the\n             * value how to recalculate the radius so it will match the size\n             * @private\n             */\n            resizeRadius() {\n                const chart = this.chart, positions = chart.rawPositions, min = Math.min, max = Math.max, plotLeft = chart.plotLeft, plotTop = chart.plotTop, chartHeight = chart.plotHeight, chartWidth = chart.plotWidth;\n                let minX, maxX, minY, maxY, radius;\n                minX = minY = Number.POSITIVE_INFINITY; // set initial values\n                maxX = maxY = Number.NEGATIVE_INFINITY;\n                for (const position of positions) {\n                    radius = position[2];\n                    minX = min(minX, position[0] - radius);\n                    // (x center-radius) is the min x value used by specific bubble\n                    maxX = max(maxX, position[0] + radius);\n                    minY = min(minY, position[1] - radius);\n                    maxY = max(maxY, position[1] + radius);\n                }\n                const bBox = [maxX - minX, maxY - minY], spaceRatio = [\n                    (chartWidth - plotLeft) / bBox[0],\n                    (chartHeight - plotTop) / bBox[1]\n                ], smallerDimension = min.apply([], spaceRatio);\n                if (Math.abs(smallerDimension - 1) > 1e-10) {\n                    // if bBox is considered not the same width as possible size\n                    for (const position of positions) {\n                        position[2] *= smallerDimension;\n                    }\n                    this.placeBubbles(positions);\n                }\n                else {\n                    /** if no radius recalculation is needed, we need to position\n                     * the whole bubbles in center of chart plotarea\n                     * for this, we are adding two parameters,\n                     * diffY and diffX, that are related to differences\n                     * between the initial center and the bounding box\n                     */\n                    chart.diffY = chartHeight / 2 +\n                        plotTop - minY - (maxY - minY) / 2;\n                    chart.diffX = chartWidth / 2 +\n                        plotLeft - minX - (maxX - minX) / 2;\n                }\n            }\n            /**\n             * The function responsible for calculating series bubble' s bBox.\n             * Needed because of exporting failure when useSimulation\n             * is set to false\n             * @private\n             */\n            seriesBox() {\n                const chart = this.chart, data = this.data, max = Math.max, min = Math.min, \n                // bBox = [xMin, xMax, yMin, yMax]\n                bBox = [\n                    chart.plotLeft,\n                    chart.plotLeft + chart.plotWidth,\n                    chart.plotTop,\n                    chart.plotTop + chart.plotHeight\n                ];\n                let radius;\n                data.forEach((p) => {\n                    if (defined(p.plotX) &&\n                        defined(p.plotY) &&\n                        p.marker.radius) {\n                        radius = p.marker.radius;\n                        bBox[0] = min(bBox[0], p.plotX - radius);\n                        bBox[1] = max(bBox[1], p.plotX + radius);\n                        bBox[2] = min(bBox[2], p.plotY - radius);\n                        bBox[3] = max(bBox[3], p.plotY + radius);\n                    }\n                });\n                return isNumber(bBox.width / bBox.height) ?\n                    bBox :\n                    null;\n            }\n            /**\n             * Needed because of z-indexing issue if point is added in series.group\n             * @private\n             */\n            setVisible() {\n                const series = this;\n                seriesProto.setVisible.apply(series, arguments);\n                if (series.parentNodeLayout && series.graph) {\n                    if (series.visible) {\n                        series.graph.show();\n                        if (series.parentNode.dataLabel) {\n                            series.parentNode.dataLabel.show();\n                        }\n                    }\n                    else {\n                        series.graph.hide();\n                        series.parentNodeLayout\n                            .removeElementFromCollection(series.parentNode, series.parentNodeLayout.nodes);\n                        if (series.parentNode.dataLabel) {\n                            series.parentNode.dataLabel.hide();\n                        }\n                    }\n                }\n                else if (series.layout) {\n                    if (series.visible) {\n                        series.layout.addElementsToCollection(series.points, series.layout.nodes);\n                    }\n                    else {\n                        series.points.forEach((node) => {\n                            series.layout.removeElementFromCollection(node, series.layout.nodes);\n                        });\n                    }\n                }\n            }\n            /**\n             * Extend the base translate method to handle bubble size,\n             * and correct positioning them.\n             * @private\n             */\n            translate() {\n                const chart = this.chart, data = this.data, index = this.index, useSimulation = this.options.useSimulation;\n                let point, radius, positions;\n                this.processedXData = this.xData;\n                this.generatePoints();\n                // merged data is an array with all of the data from all series\n                if (!defined(chart.allDataPoints)) {\n                    chart.allDataPoints = this.accumulateAllPoints();\n                    // calculate radius for all added data\n                    this.getPointRadius();\n                }\n                // after getting initial radius, calculate bubble positions\n                if (useSimulation) {\n                    positions = chart.allDataPoints;\n                }\n                else {\n                    positions = this.placeBubbles(chart.allDataPoints);\n                    this.options.draggable = false;\n                }\n                // Set the shape and arguments to be picked up in drawPoints\n                for (const position of positions) {\n                    if (position[3] === index) {\n                        // update the series points with the val from positions\n                        // array\n                        point = data[position[4]];\n                        radius = pick(position[2], void 0);\n                        if (!useSimulation) {\n                            point.plotX = (position[0] - chart.plotLeft +\n                                chart.diffX);\n                            point.plotY = (position[1] - chart.plotTop +\n                                chart.diffY);\n                        }\n                        if (isNumber(radius)) {\n                            point.marker = extend(point.marker, {\n                                radius,\n                                width: 2 * radius,\n                                height: 2 * radius\n                            });\n                            point.radius = radius;\n                        }\n                    }\n                }\n                if (useSimulation) {\n                    this.deferLayout();\n                }\n                fireEvent(this, 'afterTranslate');\n            }\n        }\n        PackedBubbleSeries.defaultOptions = merge(BubbleSeries.defaultOptions, PackedBubbleSeriesDefaults);\n        extend(PackedBubbleSeries.prototype, {\n            pointClass: PackedBubblePoint,\n            axisTypes: [],\n            directTouch: true,\n            forces: ['barycenter', 'repulsive'],\n            hasDraggableNodes: true,\n            invertible: false,\n            isCartesian: false,\n            noSharedTooltip: true,\n            pointArrayMap: ['value'],\n            pointValKey: 'value',\n            requireSorting: false,\n            trackerGroups: ['group', 'dataLabelsGroup', 'parentNodesGroup'],\n            initDataLabels: initDataLabels,\n            alignDataLabel: seriesProto.alignDataLabel,\n            indexateNodes: noop,\n            onMouseDown: DragNodesComposition.onMouseDown,\n            onMouseMove: DragNodesComposition.onMouseMove,\n            redrawHalo: DragNodesComposition.redrawHalo,\n            searchPoint: noop // solving #12287\n        });\n        SeriesRegistry.registerSeriesType('packedbubble', PackedBubbleSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Formatter callback function.\n         *\n         * @callback Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction\n         *\n         * @param {Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject} this\n         *        Data label context to format\n         *\n         * @return {string}\n         *         Formatted data label text\n         */\n        /**\n         * Context for the formatter function.\n         *\n         * @interface Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject\n         * @extends Highcharts.PointLabelObject\n         * @since 7.0.0\n         */ /**\n        * The color of the node.\n        * @name Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject#color\n        * @type {Highcharts.ColorString}\n        * @since 7.0.0\n        */ /**\n        * The point (node) object. The node name, if defined, is available through\n        * `this.point.name`. Arrays: `this.point.linksFrom` and `this.point.linksTo`\n        * contains all nodes connected to this point.\n        * @name Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject#point\n        * @type {Highcharts.Point}\n        * @since 7.0.0\n        */ /**\n        * The ID of the node.\n        * @name Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject#key\n        * @type {string}\n        * @since 7.0.0\n        */\n        ''; // detach doclets above\n\n        return PackedBubbleSeries;\n    });\n    _registerModule(_modules, 'Series/Polygon/PolygonSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A polygon series can be used to draw any freeform shape in the cartesian\n         * coordinate system. A fill is applied with the `color` option, and\n         * stroke is applied through `lineWidth` and `lineColor` options.\n         *\n         * @sample {highcharts} highcharts/demo/polygon/\n         *         Polygon\n         * @sample {highstock} highcharts/demo/polygon/\n         *         Polygon\n         *\n         * @extends      plotOptions.scatter\n         * @since        4.1.0\n         * @excluding    jitter, softThreshold, threshold, cluster, boostThreshold,\n         *               boostBlending\n         * @product      highcharts highstock\n         * @requires     highcharts-more\n         * @optionparent plotOptions.polygon\n         */\n        const PolygonSeriesDefaults = {\n            marker: {\n                enabled: false,\n                states: {\n                    hover: {\n                        enabled: false\n                    }\n                }\n            },\n            stickyTracking: false,\n            tooltip: {\n                followPointer: true,\n                pointFormat: ''\n            },\n            trackByArea: true,\n            legendSymbol: 'rectangle'\n        };\n        /**\n         * A `polygon` series. If the [type](#series.polygon.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.polygon\n         * @excluding dataParser, dataURL, stack, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.polygon\n         */\n        /**\n         * An array of data points for the series. For the `polygon` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. The `x` values will be automatically\n         *    calculated, either starting at 0 and incremented by 1, or from\n         *    `pointStart` and `pointInterval` given in the series options. If the axis\n         *    has categories, these will be used. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of arrays with 2 values. In this case, the values correspond to\n         *    `x,y`. If the first value is a string, it is applied as the name of the\n         *    point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 10],\n         *        [1, 3],\n         *        [2, 1]\n         *    ]\n         *    ```\n         *\n         * 3. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.polygon.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 1,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 8,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n         * @extends   series.line.data\n         * @product   highcharts highstock\n         * @apioption series.polygon.data\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PolygonSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Polygon/PolygonSeries.js', [_modules['Core/Globals.js'], _modules['Series/Polygon/PolygonSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, PolygonSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { area: AreaSeries, line: LineSeries, scatter: ScatterSeries } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PolygonSeries extends ScatterSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getGraphPath() {\n                const graphPath = LineSeries.prototype.getGraphPath.call(this);\n                let i = graphPath.length + 1;\n                // Close all segments\n                while (i--) {\n                    if ((i === graphPath.length || graphPath[i][0] === 'M') && i > 0) {\n                        graphPath.splice(i, 0, ['Z']);\n                    }\n                }\n                this.areaPath = graphPath;\n                return graphPath;\n            }\n            drawGraph() {\n                // Hack into the fill logic in area.drawGraph\n                this.options.fillColor = this.color;\n                AreaSeries.prototype.drawGraph.call(this);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        PolygonSeries.defaultOptions = merge(ScatterSeries.defaultOptions, PolygonSeriesDefaults);\n        extend(PolygonSeries.prototype, {\n            type: 'polygon',\n            drawTracker: LineSeries.prototype.drawTracker,\n            setStackedPoints: noop // No stacking points on polygons (#5310)\n        });\n        SeriesRegistry.registerSeriesType('polygon', PolygonSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PolygonSeries;\n    });\n    _registerModule(_modules, 'Core/Axis/RadialAxis.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (D, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { composed, noop } = H;\n        const { addEvent, correctFloat, defined, extend, fireEvent, isObject, merge, pick, pushUnique, relativeLength, wrap } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var RadialAxis;\n        (function (RadialAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Circular axis around the perimeter of a polar chart.\n             * @private\n             */\n            const defaultCircularOptions = {\n                gridLineWidth: 1,\n                labels: {\n                    align: void 0,\n                    x: 0,\n                    y: void 0,\n                    style: {\n                        textOverflow: 'none' // wrap lines by default (#7248)\n                    }\n                },\n                maxPadding: 0,\n                minPadding: 0,\n                showLastLabel: false,\n                tickLength: 0\n            };\n            /**\n             * The default options extend defaultYAxisOptions.\n             * @private\n             */\n            const defaultRadialGaugeOptions = {\n                endOnTick: false,\n                gridLineWidth: 0,\n                labels: {\n                    align: 'center',\n                    distance: -25,\n                    x: 0,\n                    y: void 0 // Auto\n                },\n                lineWidth: 1,\n                minorGridLineWidth: 0,\n                minorTickInterval: 'auto',\n                minorTickLength: 10,\n                minorTickPosition: 'inside',\n                minorTickWidth: 1,\n                startOnTick: false,\n                tickLength: 10,\n                tickPixelInterval: 100,\n                tickPosition: 'inside',\n                tickWidth: 2,\n                title: {\n                    rotation: 0,\n                    text: ''\n                },\n                zIndex: 2 // Behind dials, points in the series group\n            };\n            /**\n             * Radial axis, like a spoke in a polar chart.\n             * @private\n             */\n            const defaultRadialOptions = {\n                /**\n                 * In a polar chart, this is the angle of the Y axis in degrees, where\n                 * 0 is up and 90 is right. The angle determines the position of the\n                 * axis line and the labels, though the coordinate system is unaffected.\n                 * Since v8.0.0 this option is also applicable for X axis (inverted\n                 * polar).\n                 *\n                 * @sample {highcharts} highcharts/xaxis/angle/\n                 *         Custom X axis' angle on inverted polar chart\n                 * @sample {highcharts} highcharts/yaxis/angle/\n                 *         Dual axis polar chart\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     4.2.7\n                 * @product   highcharts\n                 * @apioption xAxis.angle\n                 */\n                /**\n                 * Polar charts only. Whether the grid lines should draw as a polygon\n                 * with straight lines between categories, or as circles. Can be either\n                 * `circle` or `polygon`. Since v8.0.0 this option is also applicable\n                 * for X axis (inverted polar).\n                 *\n                 * @sample {highcharts} highcharts/demo/polar-spider/\n                 *         Polygon grid lines\n                 * @sample {highcharts} highcharts/xaxis/gridlineinterpolation/\n                 *         Circle and polygon on inverted polar\n                 * @sample {highcharts} highcharts/yaxis/gridlineinterpolation/\n                 *         Circle and polygon\n                 *\n                 * @type       {string}\n                 * @product    highcharts\n                 * @validvalue [\"circle\", \"polygon\"]\n                 * @apioption  xAxis.gridLineInterpolation\n                 */\n                gridLineInterpolation: 'circle',\n                gridLineWidth: 1,\n                labels: {\n                    align: 'right',\n                    x: -3,\n                    y: -2\n                },\n                showLastLabel: false,\n                title: {\n                    x: 4,\n                    text: null,\n                    rotation: 90\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * In case of auto connect, add one closestPointRange to the max value\n             * right before tickPositions are computed, so that ticks will extend\n             * passed the real max.\n             * @private\n             */\n            function beforeSetTickPositions() {\n                // If autoConnect is true, polygonal grid lines are connected, and\n                // one closestPointRange is added to the X axis to prevent the last\n                // point from overlapping the first.\n                this.autoConnect = (this.isCircular &&\n                    typeof pick(this.userMax, this.options.max) === 'undefined' &&\n                    correctFloat(this.endAngleRad - this.startAngleRad) ===\n                        correctFloat(2 * Math.PI));\n                // This will lead to add an extra tick to xAxis in order to display\n                // a correct range on inverted polar\n                if (!this.isCircular && this.chart.inverted) {\n                    this.max++;\n                }\n                if (this.autoConnect) {\n                    this.max += ((this.categories && 1) ||\n                        this.pointRange ||\n                        this.closestPointRange ||\n                        0); // #1197, #2260\n                }\n            }\n            /**\n             * Augments methods for the value axis.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Tick} TickClass\n             * Tick class to use.\n             *\n             * @return {Highcharts.Axis}\n             * Axis composition.\n             */\n            function compose(AxisClass, TickClass) {\n                if (pushUnique(composed, 'Axis.Radial')) {\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'autoLabelAlign', onAxisAutoLabelAlign);\n                    addEvent(AxisClass, 'destroy', onAxisDestroy);\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                    addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                    addEvent(TickClass, 'afterGetPosition', onTickAfterGetPosition);\n                    wrap(TickClass.prototype, 'getMarkPath', wrapTickGetMarkPath);\n                }\n                return AxisClass;\n            }\n            RadialAxis.compose = compose;\n            /**\n             * Attach and return collecting function for labels in radial axis for\n             * anti-collision.\n             *\n             * @private\n             */\n            function createLabelCollector() {\n                return () => {\n                    if (this.isRadial &&\n                        this.tickPositions &&\n                        // undocumented option for now, but working\n                        this.options.labels &&\n                        this.options.labels.allowOverlap !== true) {\n                        return this.tickPositions\n                            .map((pos) => this.ticks[pos] && this.ticks[pos].label)\n                            .filter((label) => Boolean(label));\n                    }\n                };\n            }\n            /**\n             * Creates an empty collector function.\n             * @private\n             */\n            function createLabelCollectorHidden() {\n                return noop;\n            }\n            /**\n             * Find the correct end values of crosshair in polar.\n             * @private\n             */\n            function getCrosshairPosition(options, x1, y1) {\n                const center = this.pane.center;\n                let value = options.value, shapeArgs, end, x2, y2;\n                if (this.isCircular) {\n                    if (!defined(value)) {\n                        // When the snap is set to false\n                        x2 = options.chartX || 0;\n                        y2 = options.chartY || 0;\n                        value = this.translate(Math.atan2(y2 - y1, x2 - x1) - this.startAngleRad, true);\n                    }\n                    else if (options.point) {\n                        // When the snap is set to true\n                        shapeArgs = options.point.shapeArgs || {};\n                        if (shapeArgs.start) {\n                            // Find a true value of the point based on the\n                            // angle\n                            value = this.chart.inverted ?\n                                this.translate(options.point.rectPlotY, true) :\n                                options.point.x;\n                        }\n                    }\n                    end = this.getPosition(value);\n                    x2 = end.x;\n                    y2 = end.y;\n                }\n                else {\n                    if (!defined(value)) {\n                        x2 = options.chartX;\n                        y2 = options.chartY;\n                    }\n                    if (defined(x2) && defined(y2)) {\n                        // Calculate radius of non-circular axis' crosshair\n                        y1 = center[1] + this.chart.plotTop;\n                        value = this.translate(Math.min(Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), center[2] / 2) - center[3] / 2, true);\n                    }\n                }\n                return [value, x2 || 0, y2 || 0];\n            }\n            /**\n             * Get the path for the axis line. This method is also referenced in the\n             * getPlotLinePath method.\n             *\n             * @private\n             * @param {number} _lineWidth\n             * Line width is not used.\n             * @param {number} [radius]\n             * Radius of radial path.\n             * @param {number} [innerRadius]\n             * Inner radius of radial path.\n             */\n            function getLinePath(_lineWidth, radius, innerRadius) {\n                const center = this.pane.center, chart = this.chart, left = this.left || 0, top = this.top || 0;\n                let end, r = pick(radius, center[2] / 2 - this.offset), path;\n                if (typeof innerRadius === 'undefined') {\n                    innerRadius = this.horiz ? 0 : this.center && -this.center[3] / 2;\n                }\n                // In case when innerSize of pane is set, it must be included\n                if (innerRadius) {\n                    r += innerRadius;\n                }\n                if (this.isCircular || typeof radius !== 'undefined') {\n                    path = this.chart.renderer.symbols.arc(left + center[0], top + center[1], r, r, {\n                        start: this.startAngleRad,\n                        end: this.endAngleRad,\n                        open: true,\n                        innerR: 0\n                    });\n                    // Bounds used to position the plotLine label next to the line\n                    // (#7117)\n                    path.xBounds = [left + center[0]];\n                    path.yBounds = [top + center[1] - r];\n                }\n                else {\n                    end = this.postTranslate(this.angleRad, r);\n                    path = [\n                        [\n                            'M',\n                            this.center[0] + chart.plotLeft,\n                            this.center[1] + chart.plotTop\n                        ],\n                        ['L', end.x, end.y]\n                    ];\n                }\n                return path;\n            }\n            /**\n             * Wrap the getOffset method to return zero offset for title or labels\n             * in a radial axis.\n             */\n            function getOffset() {\n                const axisProto = this.constructor.prototype;\n                // Call the Axis prototype method (the method we're in now is on the\n                // instance)\n                axisProto.getOffset.call(this);\n                // Title or label offsets are not counted\n                this.chart.axisOffset[this.side] = 0;\n            }\n            /**\n             * Find the path for plot bands along the radial axis.\n             *\n             * @private\n             */\n            function getPlotBandPath(from, to, options) {\n                const chart = this.chart, radiusToPixels = (radius) => {\n                    if (typeof radius === 'string') {\n                        let r = parseInt(radius, 10);\n                        if (percentRegex.test(radius)) {\n                            r = (r * fullRadius) / 100;\n                        }\n                        return r;\n                    }\n                    return radius;\n                }, center = this.center, startAngleRad = this.startAngleRad, fullRadius = center[2] / 2, offset = Math.min(this.offset, 0), left = this.left || 0, top = this.top || 0, percentRegex = /%$/, isCircular = this.isCircular; // X axis in a polar chart\n                let start, end, angle, xOnPerimeter, open, path, outerRadius = pick(radiusToPixels(options.outerRadius), fullRadius), innerRadius = radiusToPixels(options.innerRadius), thickness = pick(radiusToPixels(options.thickness), 10);\n                // Polygonal plot bands\n                if (this.options.gridLineInterpolation === 'polygon') {\n                    path = this.getPlotLinePath({ value: from }).concat(this.getPlotLinePath({ value: to, reverse: true }));\n                    // Circular grid bands\n                }\n                else {\n                    // Keep within bounds\n                    from = Math.max(from, this.min);\n                    to = Math.min(to, this.max);\n                    const transFrom = this.translate(from), transTo = this.translate(to);\n                    // Plot bands on Y axis (radial axis) - inner and outer\n                    // radius depend on to and from\n                    if (!isCircular) {\n                        outerRadius = transFrom || 0;\n                        innerRadius = transTo || 0;\n                    }\n                    // Handle full circle\n                    if (options.shape === 'circle' || !isCircular) {\n                        start = -Math.PI / 2;\n                        end = Math.PI * 1.5;\n                        open = true;\n                    }\n                    else {\n                        start = startAngleRad + (transFrom || 0);\n                        end = startAngleRad + (transTo || 0);\n                    }\n                    outerRadius -= offset; // #5283\n                    thickness -= offset; // #5283\n                    path = chart.renderer.symbols.arc(left + center[0], top + center[1], outerRadius, outerRadius, {\n                        // Math is for reversed yAxis (#3606)\n                        start: Math.min(start, end),\n                        end: Math.max(start, end),\n                        innerR: pick(innerRadius, outerRadius - thickness),\n                        open\n                    });\n                    // Provide positioning boxes for the label (#6406)\n                    if (isCircular) {\n                        angle = (end + start) / 2;\n                        xOnPerimeter = (left +\n                            center[0] +\n                            (center[2] / 2) * Math.cos(angle));\n                        path.xBounds = angle > -Math.PI / 2 && angle < Math.PI / 2 ?\n                            // Right hemisphere\n                            [xOnPerimeter, chart.plotWidth] :\n                            // Left hemisphere\n                            [0, xOnPerimeter];\n                        path.yBounds = [\n                            top + center[1] + (center[2] / 2) * Math.sin(angle)\n                        ];\n                        // Shift up or down to get the label clear of the perimeter\n                        path.yBounds[0] += ((angle > -Math.PI && angle < 0) ||\n                            (angle > Math.PI)) ? -10 : 10;\n                    }\n                }\n                return path;\n            }\n            /**\n             * Find the path for plot lines perpendicular to the radial axis.\n             */\n            function getPlotLinePath(options) {\n                const center = this.pane.center, chart = this.chart, inverted = chart.inverted, reverse = options.reverse, background = this.pane.options.background ?\n                    (this.pane.options.background[0] ||\n                        this.pane.options.background) :\n                    {}, innerRadius = background.innerRadius || '0%', outerRadius = background.outerRadius || '100%', x1 = center[0] + chart.plotLeft, y1 = center[1] + chart.plotTop, height = this.height, isCrosshair = options.isCrosshair, paneInnerR = center[3] / 2;\n                let value = options.value, innerRatio, distance, a, b, otherAxis, xy, tickPositions, crossPos, path;\n                const end = this.getPosition(value);\n                let x2 = end.x, y2 = end.y;\n                // Crosshair logic\n                if (isCrosshair) {\n                    // Find crosshair's position and perform destructuring\n                    // assignment\n                    crossPos = this.getCrosshairPosition(options, x1, y1);\n                    value = crossPos[0];\n                    x2 = crossPos[1];\n                    y2 = crossPos[2];\n                }\n                // Spokes\n                if (this.isCircular) {\n                    distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n                    a = (typeof innerRadius === 'string') ?\n                        relativeLength(innerRadius, 1) :\n                        (innerRadius / distance);\n                    b = (typeof outerRadius === 'string') ?\n                        relativeLength(outerRadius, 1) :\n                        (outerRadius / distance);\n                    // To ensure that gridlines won't be displayed in area\n                    // defined by innerSize in case of custom radiuses of pane's\n                    // background\n                    if (center && paneInnerR) {\n                        innerRatio = paneInnerR / distance;\n                        if (a < innerRatio) {\n                            a = innerRatio;\n                        }\n                        if (b < innerRatio) {\n                            b = innerRatio;\n                        }\n                    }\n                    path = [\n                        ['M', x1 + a * (x2 - x1), y1 - a * (y1 - y2)],\n                        ['L', x2 - (1 - b) * (x2 - x1), y2 + (1 - b) * (y1 - y2)]\n                    ];\n                    // Concentric circles\n                }\n                else {\n                    // Pick the right values depending if it is grid line or\n                    // crosshair\n                    value = this.translate(value);\n                    // This is required in case when xAxis is non-circular to\n                    // prevent grid lines (or crosshairs, if enabled) from\n                    // rendering above the center after they supposed to be\n                    // displayed below the center point\n                    if (value) {\n                        if (value < 0 || value > height) {\n                            value = 0;\n                        }\n                    }\n                    if (this.options.gridLineInterpolation === 'circle') {\n                        // A value of 0 is in the center, so it won't be\n                        // visible, but draw it anyway for update and animation\n                        // (#2366)\n                        path = this.getLinePath(0, value, paneInnerR);\n                        // Concentric polygons\n                    }\n                    else {\n                        path = [];\n                        // Find the other axis (a circular one) in the same pane\n                        chart[inverted ? 'yAxis' : 'xAxis'].forEach((a) => {\n                            if (a.pane === this.pane) {\n                                otherAxis = a;\n                            }\n                        });\n                        if (otherAxis) {\n                            tickPositions = otherAxis.tickPositions;\n                            if (otherAxis.autoConnect) {\n                                tickPositions =\n                                    tickPositions.concat([tickPositions[0]]);\n                            }\n                            // Reverse the positions for concatenation of polygonal\n                            // plot bands\n                            if (reverse) {\n                                tickPositions = tickPositions.slice().reverse();\n                            }\n                            if (value) {\n                                value += paneInnerR;\n                            }\n                            for (let i = 0; i < tickPositions.length; i++) {\n                                xy = otherAxis.getPosition(tickPositions[i], value);\n                                path.push(i ? ['L', xy.x, xy.y] : ['M', xy.x, xy.y]);\n                            }\n                        }\n                    }\n                }\n                return path;\n            }\n            /**\n             * Returns the x, y coordinate of a point given by a value and a pixel\n             * distance from center.\n             *\n             * @private\n             * @param {number} value\n             * Point value.\n             * @param {number} [length]\n             * Distance from center.\n             */\n            function getPosition(value, length) {\n                const translatedVal = this.translate(value);\n                return this.postTranslate(this.isCircular ? translatedVal : this.angleRad, // #2848\n                // In case when translatedVal is negative, the 0 value must be\n                // used instead, in order to deal with lines and labels that\n                // fall out of the visible range near the center of a pane\n                pick(this.isCircular ?\n                    length :\n                    (translatedVal < 0 ? 0 : translatedVal), this.center[2] / 2) - this.offset);\n            }\n            /**\n             * Find the position for the axis title, by default inside the gauge.\n             */\n            function getTitlePosition() {\n                const center = this.center, chart = this.chart, titleOptions = this.options.title;\n                return {\n                    x: chart.plotLeft + center[0] + (titleOptions.x || 0),\n                    y: (chart.plotTop +\n                        center[1] -\n                        ({\n                            high: 0.5,\n                            middle: 0.25,\n                            low: 0\n                        }[titleOptions.align] *\n                            center[2]) +\n                        (titleOptions.y || 0))\n                };\n            }\n            /**\n             * Modify radial axis.\n             * @private\n             *\n             * @param {Highcharts.Axis} radialAxis\n             * Radial axis to modify.\n             */\n            function modify(axis) {\n                axis.beforeSetTickPositions = beforeSetTickPositions;\n                axis.createLabelCollector = createLabelCollector;\n                axis.getCrosshairPosition = getCrosshairPosition;\n                axis.getLinePath = getLinePath;\n                axis.getOffset = getOffset;\n                axis.getPlotBandPath = getPlotBandPath;\n                axis.getPlotLinePath = getPlotLinePath;\n                axis.getPosition = getPosition;\n                axis.getTitlePosition = getTitlePosition;\n                axis.postTranslate = postTranslate;\n                axis.setAxisSize = setAxisSize;\n                axis.setAxisTranslation = setAxisTranslation;\n                axis.setOptions = setOptions;\n            }\n            /**\n             * Modify radial axis as hidden.\n             * @private\n             *\n             * @param {Highcharts.Axis} radialAxis\n             * Radial axis to modify.\n             */\n            function modifyAsHidden(radialAxis) {\n                radialAxis.isHidden = true;\n                radialAxis.createLabelCollector = createLabelCollectorHidden;\n                radialAxis.getOffset = noop;\n                radialAxis.redraw = renderHidden;\n                radialAxis.render = renderHidden;\n                radialAxis.setScale = noop;\n                radialAxis.setCategories = noop;\n                radialAxis.setTitle = noop;\n            }\n            /**\n             * Finalize modification of axis instance with radial logic.\n             */\n            function onAxisAfterInit() {\n                const chart = this.chart, options = this.options, isHidden = chart.angular && this.isXAxis, pane = this.pane, paneOptions = pane && pane.options;\n                if (!isHidden && pane && (chart.angular || chart.polar)) {\n                    const fullCircle = Math.PI * 2, \n                    // Start and end angle options are given in degrees relative to\n                    // top, while internal computations are in radians relative to\n                    // right (like SVG).\n                    start = (pick(paneOptions.startAngle, 0) - 90) * Math.PI / 180, end = (pick(paneOptions.endAngle, pick(paneOptions.startAngle, 0) + 360) - 90) * Math.PI / 180;\n                    // Y axis in polar charts\n                    this.angleRad = (options.angle || 0) * Math.PI / 180;\n                    // Gauges\n                    this.startAngleRad = start;\n                    this.endAngleRad = end;\n                    this.offset = options.offset || 0;\n                    // Normalize Start and End to <0, 2*PI> range\n                    // (in degrees: <0,360>)\n                    let normalizedStart = (start % fullCircle + fullCircle) %\n                        fullCircle, normalizedEnd = (end % fullCircle + fullCircle) % fullCircle;\n                    // Move normalized angles to <-PI, PI> range (<-180, 180>)\n                    // to match values returned by Math.atan2()\n                    if (normalizedStart > Math.PI) {\n                        normalizedStart -= fullCircle;\n                    }\n                    if (normalizedEnd > Math.PI) {\n                        normalizedEnd -= fullCircle;\n                    }\n                    this.normalizedStartAngleRad = normalizedStart;\n                    this.normalizedEndAngleRad = normalizedEnd;\n                }\n            }\n            /**\n             * Wrap auto label align to avoid setting axis-wide rotation on radial axes.\n             * (#4920)\n             */\n            function onAxisAutoLabelAlign(e) {\n                if (this.isRadial) {\n                    e.align = void 0;\n                    e.preventDefault();\n                }\n            }\n            /**\n             * Remove label collector function on axis remove/update.\n             */\n            function onAxisDestroy() {\n                if (this.chart &&\n                    this.chart.labelCollectors) {\n                    const index = (this.labelCollector ?\n                        this.chart.labelCollectors.indexOf(this.labelCollector) :\n                        -1);\n                    if (index >= 0) {\n                        this.chart.labelCollectors.splice(index, 1);\n                    }\n                }\n            }\n            /**\n             * Modify axis instance with radial logic before common axis init.\n             */\n            function onAxisInit(e) {\n                const chart = this.chart, angular = chart.angular, polar = chart.polar, isX = this.isXAxis, coll = this.coll, isHidden = angular && isX, paneIndex = e.userOptions.pane || 0, pane = this.pane = chart.pane && chart.pane[paneIndex];\n                let isCircular;\n                // Prevent changes for colorAxis\n                if (coll === 'colorAxis') {\n                    this.isRadial = false;\n                    return;\n                }\n                // Before prototype.init\n                if (angular) {\n                    if (isHidden) {\n                        modifyAsHidden(this);\n                    }\n                    else {\n                        modify(this);\n                    }\n                    isCircular = !isX;\n                }\n                else if (polar) {\n                    modify(this);\n                    // Check which axis is circular\n                    isCircular = this.horiz;\n                }\n                // Disable certain features on angular and polar axes\n                if (angular || polar) {\n                    this.isRadial = true;\n                    if (!this.labelCollector) {\n                        this.labelCollector = this.createLabelCollector();\n                    }\n                    if (this.labelCollector) {\n                        // Prevent overlapping axis labels (#9761)\n                        chart.labelCollectors.push(this.labelCollector);\n                    }\n                }\n                else {\n                    this.isRadial = false;\n                }\n                // A pointer back to this axis to borrow geometry\n                if (pane && isCircular) {\n                    pane.axis = this;\n                }\n                this.isCircular = isCircular;\n            }\n            /**\n             * Prepare axis translation.\n             */\n            function onAxisInitialAxisTranslation() {\n                if (this.isRadial) {\n                    this.beforeSetTickPositions();\n                }\n            }\n            /**\n             * Find the center position of the label based on the distance option.\n             */\n            function onTickAfterGetLabelPosition(e) {\n                const label = this.label;\n                if (!label) {\n                    return;\n                }\n                const axis = this.axis, labelBBox = label.getBBox(), labelOptions = axis.options.labels, angle = ((axis.translate(this.pos) + axis.startAngleRad +\n                    Math.PI / 2) / Math.PI * 180) % 360, correctAngle = Math.round(angle), labelYPosCorrection = !defined(labelOptions.y) ? -labelBBox.height * 0.3 : 0;\n                let optionsY = labelOptions.y, ret, centerSlot = 20, // 20 degrees to each side at the top and bottom\n                align = labelOptions.align, labelDir = 'end', // Direction of the label 'start' or 'end'\n                reducedAngle1 = correctAngle < 0 ?\n                    correctAngle + 360 : correctAngle, reducedAngle2 = reducedAngle1, translateY = 0, translateX = 0;\n                if (axis.isRadial) { // Both X and Y axes in a polar chart\n                    ret = axis.getPosition(this.pos, (axis.center[2] / 2) +\n                        relativeLength(pick(labelOptions.distance, -25), axis.center[2] / 2, -axis.center[2] / 2));\n                    // Automatically rotated\n                    if (labelOptions.rotation === 'auto') {\n                        label.attr({\n                            rotation: angle\n                        });\n                        // Vertically centered\n                    }\n                    else if (!defined(optionsY)) {\n                        optionsY = (axis.chart.renderer.fontMetrics(label).b -\n                            labelBBox.height / 2);\n                    }\n                    // Automatic alignment\n                    if (!defined(align)) {\n                        if (axis.isCircular) { // Y axis\n                            if (labelBBox.width >\n                                axis.len * axis.tickInterval / (axis.max - axis.min)) { // #3506\n                                centerSlot = 0;\n                            }\n                            if (angle > centerSlot && angle < 180 - centerSlot) {\n                                align = 'left'; // right hemisphere\n                            }\n                            else if (angle > 180 + centerSlot &&\n                                angle < 360 - centerSlot) {\n                                align = 'right'; // left hemisphere\n                            }\n                            else {\n                                align = 'center'; // top or bottom\n                            }\n                        }\n                        else {\n                            align = 'center';\n                        }\n                        label.attr({\n                            align: align\n                        });\n                    }\n                    // Auto alignment for solid-gauges with two labels (#10635)\n                    if (align === 'auto' &&\n                        axis.tickPositions.length === 2 &&\n                        axis.isCircular) {\n                        // Angles reduced to 0 - 90 or 180 - 270\n                        if (reducedAngle1 > 90 && reducedAngle1 < 180) {\n                            reducedAngle1 = 180 - reducedAngle1;\n                        }\n                        else if (reducedAngle1 > 270 && reducedAngle1 <= 360) {\n                            reducedAngle1 = 540 - reducedAngle1;\n                        }\n                        // Angles reduced to 0 - 180\n                        if (reducedAngle2 > 180 && reducedAngle2 <= 360) {\n                            reducedAngle2 = 360 - reducedAngle2;\n                        }\n                        if ((axis.pane.options.startAngle === correctAngle) ||\n                            (axis.pane.options.startAngle === correctAngle + 360) ||\n                            (axis.pane.options.startAngle === correctAngle - 360)) {\n                            labelDir = 'start';\n                        }\n                        if ((correctAngle >= -90 && correctAngle <= 90) ||\n                            (correctAngle >= -360 && correctAngle <= -270) ||\n                            (correctAngle >= 270 && correctAngle <= 360)) {\n                            align = (labelDir === 'start') ? 'right' : 'left';\n                        }\n                        else {\n                            align = (labelDir === 'start') ? 'left' : 'right';\n                        }\n                        // For angles between (90 + n * 180) +- 20\n                        if (reducedAngle2 > 70 && reducedAngle2 < 110) {\n                            align = 'center';\n                        }\n                        // auto Y translation\n                        if (reducedAngle1 < 15 ||\n                            (reducedAngle1 >= 180 && reducedAngle1 < 195)) {\n                            translateY = labelBBox.height * 0.3;\n                        }\n                        else if (reducedAngle1 >= 15 && reducedAngle1 <= 35) {\n                            translateY = labelDir === 'start' ?\n                                0 : labelBBox.height * 0.75;\n                        }\n                        else if (reducedAngle1 >= 195 && reducedAngle1 <= 215) {\n                            translateY = labelDir === 'start' ?\n                                labelBBox.height * 0.75 : 0;\n                        }\n                        else if (reducedAngle1 > 35 && reducedAngle1 <= 90) {\n                            translateY = labelDir === 'start' ?\n                                -labelBBox.height * 0.25 : labelBBox.height;\n                        }\n                        else if (reducedAngle1 > 215 && reducedAngle1 <= 270) {\n                            translateY = labelDir === 'start' ?\n                                labelBBox.height : -labelBBox.height * 0.25;\n                        }\n                        // auto X translation\n                        if (reducedAngle2 < 15) {\n                            translateX = labelDir === 'start' ?\n                                -labelBBox.height * 0.15 : labelBBox.height * 0.15;\n                        }\n                        else if (reducedAngle2 > 165 && reducedAngle2 <= 180) {\n                            translateX = labelDir === 'start' ?\n                                labelBBox.height * 0.15 : -labelBBox.height * 0.15;\n                        }\n                        label.attr({ align: align });\n                        label.translate(translateX, translateY + labelYPosCorrection);\n                    }\n                    e.pos.x = ret.x + (labelOptions.x || 0);\n                    e.pos.y = ret.y + (optionsY || 0);\n                }\n            }\n            /**\n             * Add special cases within the Tick class' methods for radial axes.\n             */\n            function onTickAfterGetPosition(e) {\n                if (this.axis.getPosition) {\n                    extend(e.pos, this.axis.getPosition(this.pos));\n                }\n            }\n            /**\n             * Translate from intermediate plotX (angle), plotY (axis.len - radius)\n             * to final chart coordinates.\n             *\n             * @private\n             * @param {number} angle\n             * Translation angle.\n             * @param {number} radius\n             * Translation radius.\n             */\n            function postTranslate(angle, radius) {\n                const chart = this.chart, center = this.center;\n                angle = this.startAngleRad + angle;\n                return {\n                    x: chart.plotLeft + center[0] + Math.cos(angle) * radius,\n                    y: chart.plotTop + center[1] + Math.sin(angle) * radius\n                };\n            }\n            /**\n             * Prevent setting Y axis dirty.\n             */\n            function renderHidden() {\n                this.isDirty = false;\n            }\n            /**\n             * Override the setAxisSize method to use the arc's circumference as\n             * length. This allows tickPixelInterval to apply to pixel lengths along\n             * the perimeter.\n             * @private\n             */\n            function setAxisSize() {\n                const axisProto = this.constructor.prototype;\n                let center, start;\n                axisProto.setAxisSize.call(this);\n                if (this.isRadial) {\n                    // Set the center array\n                    this.pane.updateCenter(this);\n                    // In case when the innerSize is set in a polar chart, the axis'\n                    // center cannot be a reference to pane's center\n                    center = this.center = this.pane.center.slice();\n                    // The sector is used in Axis.translate to compute the\n                    // translation of reversed axis points (#2570)\n                    if (this.isCircular) {\n                        this.sector = this.endAngleRad - this.startAngleRad;\n                    }\n                    else {\n                        // When the pane's startAngle or the axis' angle is set then\n                        // new x and y values for vertical axis' center must be\n                        // calculated\n                        start = this.postTranslate(this.angleRad, center[3] / 2);\n                        center[0] = start.x - this.chart.plotLeft;\n                        center[1] = start.y - this.chart.plotTop;\n                    }\n                    // Axis len is used to lay out the ticks\n                    this.len = this.width = this.height =\n                        (center[2] - center[3]) * pick(this.sector, 1) / 2;\n                }\n            }\n            /**\n             * Override setAxisTranslation by setting the translation to the\n             * difference in rotation. This allows the translate method to return\n             * angle for any given value.\n             *\n             * @private\n             */\n            function setAxisTranslation() {\n                const axisProto = this.constructor.prototype;\n                // Call uber method\n                axisProto.setAxisTranslation.call(this);\n                // Set transA and minPixelPadding\n                if (this.center) { // it's not defined the first time\n                    if (this.isCircular) {\n                        this.transA = (this.endAngleRad - this.startAngleRad) /\n                            ((this.max - this.min) || 1);\n                    }\n                    else {\n                        // The transA here is the length of the axis, so in case\n                        // of inner radius, the length must be decreased by it\n                        this.transA = ((this.center[2] - this.center[3]) / 2) /\n                            ((this.max - this.min) || 1);\n                    }\n                    if (this.isXAxis) {\n                        this.minPixelPadding = this.transA * this.minPointOffset;\n                    }\n                    else {\n                        // This is a workaround for regression #2593, but categories\n                        // still don't position correctly.\n                        this.minPixelPadding = 0;\n                    }\n                }\n            }\n            /**\n             * Merge and set options.\n             */\n            function setOptions(userOptions) {\n                const { coll } = this;\n                const { angular, inverted, polar } = this.chart;\n                let defaultPolarOptions = {};\n                if (angular) {\n                    if (!this.isXAxis) {\n                        defaultPolarOptions = merge(defaultOptions.yAxis, defaultRadialGaugeOptions);\n                    }\n                }\n                else if (polar) {\n                    defaultPolarOptions = this.horiz ?\n                        merge(defaultOptions.xAxis, defaultCircularOptions) :\n                        merge(coll === 'xAxis' ?\n                            defaultOptions.xAxis :\n                            defaultOptions.yAxis, defaultRadialOptions);\n                }\n                if (inverted && coll === 'yAxis') {\n                    defaultPolarOptions.stackLabels = isObject(defaultOptions.yAxis, true) ? defaultOptions.yAxis.stackLabels : {};\n                    defaultPolarOptions.reversedStacks = true;\n                }\n                const options = this.options = merge(defaultPolarOptions, userOptions);\n                // Make sure the plotBands array is instantiated for each Axis\n                // (#2649)\n                if (!options.plotBands) {\n                    options.plotBands = [];\n                }\n                fireEvent(this, 'afterSetOptions');\n            }\n            /**\n             * Wrap the getMarkPath function to return the path of the radial marker.\n             */\n            function wrapTickGetMarkPath(proceed, x, y, tickLength, tickWidth, horiz, renderer) {\n                const axis = this.axis;\n                let endPoint, ret;\n                if (axis.isRadial) {\n                    endPoint = axis.getPosition(this.pos, axis.center[2] / 2 + tickLength);\n                    ret = [\n                        'M',\n                        x,\n                        y,\n                        'L',\n                        endPoint.x,\n                        endPoint.y\n                    ];\n                }\n                else {\n                    ret = proceed.call(this, x, y, tickLength, tickWidth, horiz, renderer);\n                }\n                return ret;\n            }\n            /* eslint-enable valid-jsdoc */\n        })(RadialAxis || (RadialAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RadialAxis;\n    });\n    _registerModule(_modules, 'Series/PolarComposition.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Extensions/Pane/Pane.js'], _modules['Core/Axis/RadialAxis.js'], _modules['Core/Utilities.js']], function (A, H, Series, Pane, RadialAxis, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { animObject } = A;\n        const { composed } = H;\n        const { addEvent, defined, find, isNumber, merge, pick, pushUnique, relativeLength, splat, uniqueKey, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function clipCircle(renderer, x, y, r, innerR) {\n            const id = uniqueKey(), clipPath = renderer.createElement('clipPath').attr({\n                id: id\n            }).add(renderer.defs), wrapper = innerR ?\n                renderer.arc(x, y, r, innerR, 0, 2 * Math.PI).add(clipPath) :\n                renderer.circle(x, y, r).add(clipPath);\n            wrapper.id = id;\n            wrapper.clipPath = clipPath;\n            return wrapper;\n        }\n        /**\n         * Find correct align and vertical align based on an angle in polar chart\n         * @private\n         */\n        function findAlignments(angle, options) {\n            let align, verticalAlign;\n            if (options.align === null) {\n                if (angle > 20 && angle < 160) {\n                    align = 'left'; // right hemisphere\n                }\n                else if (angle > 200 && angle < 340) {\n                    align = 'right'; // left hemisphere\n                }\n                else {\n                    align = 'center'; // top or bottom\n                }\n                options.align = align;\n            }\n            if (options.verticalAlign === null) {\n                if (angle < 45 || angle > 315) {\n                    verticalAlign = 'bottom'; // top part\n                }\n                else if (angle > 135 && angle < 225) {\n                    verticalAlign = 'top'; // bottom part\n                }\n                else {\n                    verticalAlign = 'middle'; // left or right\n                }\n                options.verticalAlign = verticalAlign;\n            }\n            return options;\n        }\n        /**\n         * #6212 Calculate connectors for spline series in polar chart.\n         * @private\n         * @param {boolean} calculateNeighbours\n         *        Check if connectors should be calculated for neighbour points as\n         *        well allows short recurrence\n         */\n        function getConnectors(segment, index, calculateNeighbours, connectEnds) {\n            const smoothing = 1.5, denom = smoothing + 1, addedNumber = connectEnds ? 1 : 0;\n            let i, leftContX, leftContY, rightContX, rightContY, jointAngle;\n            // Calculate final index of points depending on the initial index value.\n            // Because of calculating neighbours, index may be outside segment\n            // array.\n            if (index >= 0 && index <= segment.length - 1) {\n                i = index;\n            }\n            else if (index < 0) {\n                i = segment.length - 1 + index;\n            }\n            else {\n                i = 0;\n            }\n            // 1 means control points midway between points, 2 means 1/3 from\n            // the point, 3 is 1/4 etc;\n            const prevPointInd = ((i - 1 < 0) ? segment.length - (1 + addedNumber) : i - 1), nextPointInd = (i + 1 > segment.length - 1) ? addedNumber : i + 1, previousPoint = segment[prevPointInd], nextPoint = segment[nextPointInd], previousX = previousPoint.plotX, previousY = previousPoint.plotY, nextX = nextPoint.plotX, nextY = nextPoint.plotY, plotX = segment[i].plotX, // actual point\n            plotY = segment[i].plotY;\n            leftContX = (smoothing * plotX + previousX) / denom;\n            leftContY = (smoothing * plotY + previousY) / denom;\n            rightContX = (smoothing * plotX + nextX) / denom;\n            rightContY = (smoothing * plotY + nextY) / denom;\n            // distance left control point\n            const dLControlPoint = Math.sqrt(Math.pow(leftContX - plotX, 2) + Math.pow(leftContY - plotY, 2)), dRControlPoint = Math.sqrt(Math.pow(rightContX - plotX, 2) + Math.pow(rightContY - plotY, 2)), leftContAngle = Math.atan2(leftContY - plotY, leftContX - plotX), rightContAngle = Math.atan2(rightContY - plotY, rightContX - plotX);\n            jointAngle = (Math.PI / 2) + ((leftContAngle + rightContAngle) / 2);\n            // Ensure the right direction, jointAngle should be in the same quadrant\n            // as leftContAngle\n            if (Math.abs(leftContAngle - jointAngle) > Math.PI / 2) {\n                jointAngle -= Math.PI;\n            }\n            // Find the corrected control points for a spline straight through the\n            // point\n            leftContX = plotX + Math.cos(jointAngle) * dLControlPoint;\n            leftContY = plotY + Math.sin(jointAngle) * dLControlPoint;\n            rightContX = plotX + Math.cos(Math.PI + jointAngle) * dRControlPoint;\n            rightContY = plotY + Math.sin(Math.PI + jointAngle) * dRControlPoint;\n            // push current point's connectors into returned object\n            const ret = {\n                rightContX: rightContX,\n                rightContY: rightContY,\n                leftContX: leftContX,\n                leftContY: leftContY,\n                plotX: plotX,\n                plotY: plotY\n            };\n            // calculate connectors for previous and next point and push them inside\n            // returned object\n            if (calculateNeighbours) {\n                ret.prevPointCont = getConnectors(segment, prevPointInd, false, connectEnds);\n            }\n            return ret;\n        }\n        function onChartAfterDrawChartBox() {\n            (this.pane || []).forEach((pane) => {\n                pane.render();\n            });\n        }\n        /**\n         * If polar has polygonal grid lines, force start and endOnTick on radial axis\n         * @private\n         */\n        function onChartAfterInit(event) {\n            const xAxis = event.args[0].xAxis, yAxis = event.args[0].yAxis, chart = event.args[0].chart;\n            if (xAxis && yAxis) {\n                if (yAxis.gridLineInterpolation === 'polygon') {\n                    xAxis.startOnTick = true;\n                    xAxis.endOnTick = true;\n                }\n                else if (xAxis.gridLineInterpolation === 'polygon' &&\n                    chart.inverted) {\n                    yAxis.startOnTick = true;\n                    yAxis.endOnTick = true;\n                }\n            }\n        }\n        function onChartGetAxes() {\n            if (!this.pane) {\n                this.pane = [];\n            }\n            this.options.pane = splat(this.options.pane);\n            this.options.pane.forEach((paneOptions) => {\n                new Pane(// eslint-disable-line no-new\n                paneOptions, this);\n            }, this);\n        }\n        /**\n         * Get selection dimensions\n         * @private\n         */\n        function onPointerGetSelectionBox(event) {\n            const marker = event.args.marker, xAxis = this.chart.xAxis[0], yAxis = this.chart.yAxis[0], inverted = this.chart.inverted, radialAxis = inverted ? yAxis : xAxis, linearAxis = inverted ? xAxis : yAxis;\n            if (this.chart.polar) {\n                event.preventDefault();\n                const start = (marker.attr ? marker.attr('start') : marker.start) - radialAxis.startAngleRad, r = (marker.attr ? marker.attr('r') : marker.r), end = (marker.attr ? marker.attr('end') : marker.end) - radialAxis.startAngleRad, innerR = (marker.attr ? marker.attr('innerR') : marker.innerR);\n                event.result.x = start + radialAxis.pos;\n                event.result.width = end - start;\n                // `innerR` goes from pane's center but `toValue` computes values from\n                // top\n                event.result.y = linearAxis.len + linearAxis.pos - r;\n                event.result.height = r - innerR;\n            }\n        }\n        /**\n         * Get attrs for Polar selection marker\n         * @private\n         */\n        function onPointerGetSelectionMarkerAttrs(event) {\n            const chart = this.chart;\n            if (chart.polar && chart.hoverPane && chart.hoverPane.axis) {\n                event.preventDefault();\n                const center = chart.hoverPane.center, mouseDownX = chart.mouseDownX || 0, mouseDownY = chart.mouseDownY || 0, chartY = event.args.chartY, chartX = event.args.chartX, fullCircle = Math.PI * 2, startAngleRad = chart.hoverPane.axis.startAngleRad, endAngleRad = chart.hoverPane.axis.endAngleRad, linearAxis = chart.inverted ? chart.xAxis[0] : chart.yAxis[0], attrs = {};\n                let shapeType = 'arc';\n                attrs.x = center[0] + chart.plotLeft;\n                attrs.y = center[1] + chart.plotTop;\n                // Adjust the width of the selection marker\n                if (this.zoomHor) {\n                    const paneRadRange = startAngleRad > 0 ?\n                        endAngleRad - startAngleRad :\n                        Math.abs(startAngleRad) + Math.abs(endAngleRad);\n                    let startAngle = Math.atan2(mouseDownY - chart.plotTop - center[1], mouseDownX - chart.plotLeft - center[0]) - startAngleRad, endAngle = Math.atan2(chartY - chart.plotTop - center[1], chartX - chart.plotLeft - center[0]) - startAngleRad;\n                    attrs.r = center[2] / 2;\n                    attrs.innerR = center[3] / 2;\n                    if (startAngle <= 0) {\n                        startAngle += fullCircle;\n                    }\n                    if (endAngle <= 0) {\n                        endAngle += fullCircle;\n                    }\n                    if (endAngle < startAngle) {\n                        // Swapping angles\n                        endAngle = [startAngle, startAngle = endAngle][0];\n                    }\n                    // If pane is not a full circle we need to let users zoom to the min\n                    // We do this by swapping angles after pointer crosses\n                    // middle angle (swapAngle) of the missing slice of the pane\n                    if (paneRadRange < fullCircle) {\n                        const swapAngle = endAngleRad + (fullCircle - paneRadRange) / 2;\n                        if (startAngleRad + endAngle > swapAngle) {\n                            endAngle = startAngle;\n                            startAngle = startAngleRad <= 0 ? startAngleRad : 0;\n                        }\n                    }\n                    const start = attrs.start =\n                        Math.max(startAngle + startAngleRad, startAngleRad), end = attrs.end =\n                        Math.min(endAngle + startAngleRad, endAngleRad);\n                    // Adjust the selection shape for polygon grid lines\n                    if (linearAxis.options.gridLineInterpolation === 'polygon') {\n                        const radialAxis = chart.hoverPane.axis, min = start - radialAxis.startAngleRad + radialAxis.pos, max = end - start;\n                        let path = linearAxis.getPlotLinePath({\n                            value: linearAxis.max\n                        }), pathStart = radialAxis.toValue(min), pathEnd = radialAxis.toValue(min + max);\n                        if (pathStart < radialAxis.getExtremes().min) {\n                            const { min, max } = radialAxis.getExtremes();\n                            pathStart = max - (min - pathStart);\n                        }\n                        if (pathEnd < radialAxis.getExtremes().min) {\n                            const { min, max } = radialAxis.getExtremes();\n                            pathEnd = max - (min - pathEnd);\n                        }\n                        if (pathEnd < pathStart) {\n                            // Swapping angles\n                            pathEnd = [pathStart, pathStart = pathEnd][0];\n                        }\n                        // Get trimmed path\n                        path = trimPath(path, pathStart, pathEnd, radialAxis);\n                        // Add center to the path\n                        path.push([\n                            'L', center[0] + chart.plotLeft,\n                            chart.plotTop + center[1]\n                        ]);\n                        attrs.d = path;\n                        shapeType = 'path';\n                    }\n                }\n                // Adjust the height of the selection marker\n                if (this.zoomVert) {\n                    const linearAxis = chart.inverted ? chart.xAxis[0] : chart.yAxis[0];\n                    let innerR = Math.sqrt(Math.pow(mouseDownX - chart.plotLeft - center[0], 2) +\n                        Math.pow(mouseDownY - chart.plotTop - center[1], 2)), r = Math.sqrt(Math.pow(chartX - chart.plotLeft - center[0], 2) +\n                        Math.pow(chartY - chart.plotTop - center[1], 2));\n                    if (r < innerR) {\n                        // Swapping angles\n                        innerR = [r, r = innerR][0];\n                    }\n                    if (r > center[2] / 2) {\n                        r = center[2] / 2;\n                    }\n                    if (innerR < center[3] / 2) {\n                        innerR = center[3] / 2;\n                    }\n                    if (!this.zoomHor) {\n                        attrs.start = startAngleRad;\n                        attrs.end = endAngleRad;\n                    }\n                    attrs.r = r;\n                    attrs.innerR = innerR;\n                    if (linearAxis.options.gridLineInterpolation === 'polygon') {\n                        const end = linearAxis.toValue(linearAxis.len + linearAxis.pos - innerR), start = linearAxis.toValue(linearAxis.len + linearAxis.pos - r), path = linearAxis.getPlotLinePath({\n                            value: start\n                        }).concat(linearAxis.getPlotLinePath({\n                            value: end,\n                            reverse: true\n                        }));\n                        attrs.d = path;\n                        shapeType = 'path';\n                    }\n                }\n                if (this.zoomHor &&\n                    this.zoomVert &&\n                    linearAxis.options.gridLineInterpolation === 'polygon') {\n                    const radialAxis = chart.hoverPane.axis, start = attrs.start || 0, end = attrs.end || 0, min = start - radialAxis.startAngleRad + radialAxis.pos, max = end - start, pathStart = radialAxis.toValue(min), pathEnd = radialAxis.toValue(min + max);\n                    // Trim path\n                    if (attrs.d instanceof Array) {\n                        let innerPath = attrs.d.slice(0, attrs.d.length / 2), outerPath = attrs.d.slice(attrs.d.length / 2, attrs.d.length);\n                        outerPath = [...outerPath].reverse();\n                        const radialAxis = chart.hoverPane.axis;\n                        innerPath = trimPath(innerPath, pathStart, pathEnd, radialAxis);\n                        outerPath = trimPath(outerPath, pathStart, pathEnd, radialAxis);\n                        if (outerPath) {\n                            (outerPath[0][0]) = 'L';\n                        }\n                        outerPath = [...outerPath].reverse();\n                        attrs.d = innerPath.concat(outerPath);\n                        shapeType = 'path';\n                    }\n                }\n                event.attrs = attrs;\n                event.shapeType = shapeType;\n            }\n        }\n        /**\n         * @private\n         */\n        function onSeriesAfterInit() {\n            const chart = this.chart;\n            if (chart.polar) {\n                this.polar = new PolarAdditions(this);\n                // Add flags that identifies radial inverted series\n                if (chart.inverted) {\n                    this.isRadialSeries = true;\n                    if (this.is('column')) {\n                        this.isRadialBar = true;\n                    }\n                }\n            }\n        }\n        /**\n         * Extend translate. The plotX and plotY values are computed as if the polar\n         * chart were a cartesian plane, where plotX denotes the angle in radians\n         * and (yAxis.len - plotY) is the pixel distance from center.\n         * @private\n         */\n        function onSeriesAfterTranslate() {\n            if (this.chart.polar && this.xAxis) {\n                const series = this, { xAxis, yAxis } = series, chart = series.chart;\n                // Prepare k-d-tree handling. It searches by angle (clientX) in\n                // case of shared tooltip, and by two dimensional distance in case\n                // of non-shared.\n                series.kdByAngle = chart.tooltip && chart.tooltip.shared;\n                if (series.kdByAngle || chart.inverted) {\n                    series.searchPoint = searchPointByAngleOrInverted;\n                }\n                else {\n                    series.options.findNearestPointBy = 'xy';\n                }\n                const points = series.points;\n                let i = points.length;\n                while (i--) {\n                    // Translate plotX, plotY from angle and radius to true plot\n                    // coordinates\n                    if (!series.is('column') && !series.is('columnrange')) {\n                        series.polar.toXY(points[i]);\n                    }\n                    // Treat points below Y axis min as null (#10082)\n                    if (!chart.hasParallelCoordinates &&\n                        !series.yAxis.reversed) {\n                        if (pick(points[i].y, Number.MIN_VALUE) < yAxis.min ||\n                            points[i].x < xAxis.min ||\n                            points[i].x > xAxis.max) {\n                            // Destroy markers\n                            points[i].isNull = true;\n                            // Destroy column's graphic\n                            points[i].plotY = NaN;\n                        }\n                        else {\n                            // Restore isNull flag\n                            points[i].isNull =\n                                points[i].isValid && !points[i].isValid();\n                        }\n                    }\n                }\n                // Perform clip after render\n                if (!this.hasClipCircleSetter) {\n                    this.hasClipCircleSetter = !!series.eventsToUnbind.push(addEvent(series, 'afterRender', function () {\n                        let circ;\n                        if (chart.polar && this.options.clip !== false) {\n                            // For clipping purposes there is a need for\n                            // coordinates from the absolute center\n                            circ = this.yAxis.pane.center;\n                            if (!this.clipCircle) {\n                                this.clipCircle = clipCircle(chart.renderer, circ[0], circ[1], circ[2] / 2, circ[3] / 2);\n                            }\n                            else {\n                                this.clipCircle.animate({\n                                    x: circ[0],\n                                    y: circ[1],\n                                    r: circ[2] / 2,\n                                    innerR: circ[3] / 2\n                                });\n                            }\n                            this.group.clip(this.clipCircle);\n                            this.setClip = H.noop;\n                        }\n                    }));\n                }\n            }\n        }\n        /**\n         * Search a k-d tree by the point angle (used for shared tooltips in polar) or\n         * the inverted point.\n         * charts\n         * @private\n         */\n        function searchPointByAngleOrInverted(e) {\n            const series = this, chart = series.chart, xAxis = series.xAxis, yAxis = series.yAxis, center = xAxis.pane && xAxis.pane.center, plotX = e.chartX - (center && center[0] || 0) - chart.plotLeft, plotY = e.chartY - (center && center[1] || 0) - chart.plotTop;\n            const searchKDTreePoint = chart.inverted ? {\n                clientX: e.chartX - yAxis.pos,\n                plotY: e.chartY - xAxis.pos\n            } : {\n                clientX: 180 + (Math.atan2(plotX, plotY) * (-180 / Math.PI))\n            };\n            return series.searchKDTree(searchKDTreePoint);\n        }\n        /**\n         * Trim polygonal path\n         * @private\n         */\n        function trimPath(path, start, end, radialAxis) {\n            const tickInterval = radialAxis.tickInterval, ticks = radialAxis.tickPositions;\n            let lastTick = find(ticks, (tick) => tick >= end), firstTick = find([...ticks].reverse(), (tick) => tick <= start);\n            if (!defined(lastTick)) {\n                lastTick = ticks[ticks.length - 1];\n            }\n            if (!defined(firstTick)) {\n                firstTick = ticks[0];\n                lastTick += tickInterval;\n                path[0][0] = 'L';\n                // To do: figure out why -3 or -2\n                path.unshift(path[path.length - 3]);\n            }\n            path = path.slice(ticks.indexOf(firstTick), ticks.indexOf(lastTick) + 1);\n            path[0][0] = 'M';\n            return path;\n        }\n        /**\n         * Extend chart.get to also search in panes. Used internally in\n         * responsiveness and chart.update.\n         * @private\n         */\n        function wrapChartGet(proceed, id) {\n            return find(this.pane || [], (pane) => (\n            // @todo remove id or define id type:\n            pane.options.id === id)) || proceed.call(this, id);\n        }\n        /**\n         * Align column data labels outside the columns. #1199.\n         * @private\n         */\n        function wrapColumnSeriesAlignDataLabel(proceed, point, dataLabel, options, alignTo, isNew) {\n            const chart = this.chart, inside = pick(options.inside, !!this.options.stacking);\n            let angle, shapeArgs, labelPos;\n            if (chart.polar) {\n                angle = point.rectPlotX / Math.PI * 180;\n                if (!chart.inverted) {\n                    // Align nicely outside the perimeter of the columns\n                    options = findAlignments(angle, options);\n                }\n                else { // Required corrections for data labels of inverted bars\n                    // The plotX and plotY are correctly set therefore they\n                    // don't need to be swapped (inverted argument is false)\n                    this.forceDL = chart.isInsidePlot(point.plotX, point.plotY);\n                    // Checks if labels should be positioned inside\n                    if (inside && point.shapeArgs) {\n                        shapeArgs = point.shapeArgs;\n                        // Calculates pixel positions for a data label to be\n                        // inside\n                        labelPos =\n                            this.yAxis.postTranslate(\n                            // angle\n                            ((shapeArgs.start || 0) + (shapeArgs.end || 0)) / 2 -\n                                this\n                                    .xAxis.startAngleRad, \n                            // radius\n                            point.barX +\n                                point.pointWidth / 2);\n                        alignTo = merge(alignTo, {\n                            x: labelPos.x - chart.plotLeft,\n                            y: labelPos.y - chart.plotTop\n                        });\n                    }\n                    else if (point.tooltipPos) {\n                        alignTo = merge(alignTo, {\n                            x: point.tooltipPos[0],\n                            y: point.tooltipPos[1]\n                        });\n                    }\n                    options.align = pick(options.align, 'center');\n                    options.verticalAlign =\n                        pick(options.verticalAlign, 'middle');\n                }\n                Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);\n                // Hide label of a point (only inverted) that is outside the\n                // visible y range\n                if (this.isRadialBar && point.shapeArgs &&\n                    point.shapeArgs.start === point.shapeArgs.end) {\n                    dataLabel.hide();\n                }\n                else {\n                    dataLabel.show();\n                }\n            }\n            else {\n                proceed.call(this, point, dataLabel, options, alignTo, isNew);\n            }\n        }\n        /**\n         * Extend the column prototype's translate method\n         * @private\n         */\n        function onAfterColumnTranslate() {\n            const series = this, options = series.options, stacking = options.stacking, chart = series.chart, xAxis = series.xAxis, yAxis = series.yAxis, reversed = yAxis.reversed, center = yAxis.center, startAngleRad = xAxis.startAngleRad, endAngleRad = xAxis.endAngleRad, visibleRange = endAngleRad - startAngleRad;\n            let threshold = options.threshold, thresholdAngleRad = 0, points, point, i, yMin, yMax, start = 0, end = 0, tooltipPos, pointX, pointY, stackValues, stack, barX, innerR, r;\n            // Postprocess plot coordinates\n            if (xAxis.isRadial) {\n                points = series.points;\n                i = points.length;\n                yMin = yAxis.translate(yAxis.min);\n                yMax = yAxis.translate(yAxis.max);\n                threshold = options.threshold || 0;\n                if (chart.inverted) {\n                    // Finding a correct threshold\n                    if (isNumber(threshold)) {\n                        thresholdAngleRad = yAxis.translate(threshold);\n                        // Checks if threshold is outside the visible range\n                        if (defined(thresholdAngleRad)) {\n                            if (thresholdAngleRad < 0) {\n                                thresholdAngleRad = 0;\n                            }\n                            else if (thresholdAngleRad > visibleRange) {\n                                thresholdAngleRad = visibleRange;\n                            }\n                            // Adding start angle offset\n                            series.translatedThreshold =\n                                thresholdAngleRad + startAngleRad;\n                        }\n                    }\n                }\n                while (i--) {\n                    point = points[i];\n                    barX = point.barX;\n                    pointX = point.x;\n                    pointY = point.y;\n                    point.shapeType = 'arc';\n                    if (chart.inverted) {\n                        point.plotY = yAxis.translate(pointY);\n                        if (stacking && yAxis.stacking) {\n                            stack = yAxis.stacking.stacks[(pointY < 0 ? '-' : '') +\n                                series.stackKey];\n                            if (series.visible && stack && stack[pointX]) {\n                                if (!point.isNull) {\n                                    stackValues = stack[pointX].points[series.getStackIndicator(void 0, pointX, series.index).key];\n                                    // Translating to radial values\n                                    start = yAxis.translate(stackValues[0]);\n                                    end = yAxis.translate(stackValues[1]);\n                                    // If starting point is beyond the\n                                    // range, set it to 0\n                                    if (defined(start)) {\n                                        start = U.clamp(start, 0, visibleRange);\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            // Initial start and end angles for radial bar\n                            start = thresholdAngleRad;\n                            end = point.plotY;\n                        }\n                        if (start > end) {\n                            // Swapping start and end\n                            end = [start, start = end][0];\n                        }\n                        // Prevent from rendering point outside the\n                        // acceptable circular range\n                        if (!reversed) {\n                            if (start < yMin) {\n                                start = yMin;\n                            }\n                            else if (end > yMax) {\n                                end = yMax;\n                            }\n                            else if (end < yMin || start > yMax) {\n                                start = end = 0;\n                            }\n                        }\n                        else {\n                            if (end > yMin) {\n                                end = yMin;\n                            }\n                            else if (start < yMax) {\n                                start = yMax;\n                            }\n                            else if (start > yMin || end < yMax) {\n                                start = end = visibleRange;\n                            }\n                        }\n                        if (yAxis.min > yAxis.max) {\n                            start = end = reversed ? visibleRange : 0;\n                        }\n                        start += startAngleRad;\n                        end += startAngleRad;\n                        if (center) {\n                            point.barX = barX += center[3] / 2;\n                        }\n                        // In case when radius, inner radius or both are negative, a\n                        // point is rendered but partially or as a center point\n                        innerR = Math.max(barX, 0);\n                        r = Math.max(barX + point.pointWidth, 0);\n                        // Handle border radius\n                        const brOption = options.borderRadius, brValue = typeof brOption === 'object' ?\n                            brOption.radius : brOption, borderRadius = relativeLength(brValue || 0, r - innerR);\n                        point.shapeArgs = {\n                            x: center[0],\n                            y: center[1],\n                            r,\n                            innerR,\n                            start,\n                            end,\n                            borderRadius\n                        };\n                        // Fade out the points if not inside the polar \"plot area\"\n                        point.opacity = start === end ? 0 : void 0;\n                        // A correct value for stacked or not fully visible\n                        // point\n                        point.plotY = (defined(series.translatedThreshold) &&\n                            (start < series.translatedThreshold ? start : end)) -\n                            startAngleRad;\n                        // Non-inverted polar columns\n                    }\n                    else {\n                        start = barX + startAngleRad;\n                        point.shapeArgs = series.polar.arc(point.yBottom, point.plotY, start, start + point.pointWidth);\n                        // Disallow border radius on polar columns for now. It would\n                        // take some refactoring to work with the `scope` and the\n                        // `where` options. Those options would require that only\n                        // individual corners be rounded, in practice individual calls\n                        // to applyBorderRadius from the extended `arc` function. That\n                        // would be a viable solution, though it would not be perfect\n                        // until we implemented rounding that included the lower points\n                        // in the stack, like we have for cartesian column.\n                        point.shapeArgs.borderRadius = 0;\n                    }\n                    // Provided a correct coordinates for the tooltip\n                    series.polar.toXY(point);\n                    if (chart.inverted) {\n                        tooltipPos = yAxis.postTranslate(point.rectPlotY, barX + point.pointWidth / 2);\n                        point.tooltipPos = [\n                            tooltipPos.x - chart.plotLeft,\n                            tooltipPos.y - chart.plotTop\n                        ];\n                    }\n                    else {\n                        point.tooltipPos = [point.plotX, point.plotY];\n                    }\n                    if (center) {\n                        point.ttBelow = point.plotY > center[1];\n                    }\n                }\n            }\n        }\n        /**\n         * Extend getSegmentPath to allow connecting ends across 0 to provide a\n         * closed circle in line-like series.\n         * @private\n         */\n        function wrapLineSeriesGetGraphPath(proceed, points) {\n            const series = this;\n            let firstValid, popLastPoint;\n            // Connect the path\n            if (this.chart.polar) {\n                points = points || this.points;\n                // Append first valid point in order to connect the ends\n                for (let i = 0; i < points.length; i++) {\n                    if (!points[i].isNull) {\n                        firstValid = i;\n                        break;\n                    }\n                }\n                /**\n                 * Polar charts only. Whether to connect the ends of a line series\n                 * plot across the extremes.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/line-connectends-false/\n                 *         Do not connect\n                 *\n                 * @type      {boolean}\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.series.connectEnds\n                 */\n                if (this.options.connectEnds !== false &&\n                    typeof firstValid !== 'undefined') {\n                    this.connectEnds = true; // re-used in splines\n                    points.splice(points.length, 0, points[firstValid]);\n                    popLastPoint = true;\n                }\n                // For area charts, pseudo points are added to the graph, now we\n                // need to translate these\n                points.forEach((point) => {\n                    if (typeof point.polarPlotY === 'undefined') {\n                        series.polar.toXY(point);\n                    }\n                });\n            }\n            // Run uber method\n            const ret = proceed.apply(this, [].slice.call(arguments, 1));\n            // #6212 points.splice method is adding points to an array. In case of\n            // areaspline getGraphPath method is used two times and in both times\n            // points are added to an array. That is why points.pop is used, to get\n            // unmodified points.\n            if (popLastPoint) {\n                points.pop();\n            }\n            return ret;\n        }\n        /**\n         * Extend getCoordinates to prepare for polar axis values\n         * @private\n         */\n        function wrapPointerGetCoordinates(proceed, e) {\n            const chart = this.chart;\n            let ret = {\n                xAxis: [],\n                yAxis: []\n            };\n            if (chart.polar) {\n                chart.axes.forEach((axis) => {\n                    // Skip colorAxis\n                    if (axis.coll === 'colorAxis') {\n                        return;\n                    }\n                    const isXAxis = axis.isXAxis, center = axis.center, x = e.chartX - center[0] - chart.plotLeft, y = e.chartY - center[1] - chart.plotTop;\n                    ret[isXAxis ? 'xAxis' : 'yAxis'].push({\n                        axis: axis,\n                        value: axis.translate(isXAxis ?\n                            Math.PI - Math.atan2(x, y) : // angle\n                            // distance from center\n                            Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), true)\n                    });\n                });\n            }\n            else {\n                ret = proceed.call(this, e);\n            }\n            return ret;\n        }\n        /**\n         * Prevent zooming on mobile devices\n         * @private\n         */\n        function wrapPointerPinch(proceed, e) {\n            if (this.chart.polar) {\n                return;\n            }\n            proceed.call(this, e);\n        }\n        /**\n         * Define the animate method for regular series\n         * @private\n         */\n        function wrapSeriesAnimate(proceed, init) {\n            const series = this, chart = this.chart, group = this.group, markerGroup = this.markerGroup, center = this.xAxis && this.xAxis.center, plotLeft = chart.plotLeft, plotTop = chart.plotTop;\n            let animation = this.options.animation, attribs, paneInnerR, graphic, shapeArgs, r, innerR;\n            // Specific animation for polar charts\n            if (chart.polar) {\n                if (series.isRadialBar) {\n                    if (!init) {\n                        // Run the pie animation for radial bars\n                        series.startAngleRad = pick(series.translatedThreshold, series.xAxis.startAngleRad);\n                        H.seriesTypes.pie.prototype.animate.call(series, init);\n                    }\n                }\n                else {\n                    animation = animObject(animation);\n                    // A different animation needed for column like series\n                    if (series.is('column')) {\n                        if (!init) {\n                            paneInnerR = center[3] / 2;\n                            series.points.forEach((point) => {\n                                graphic = point.graphic;\n                                shapeArgs = point.shapeArgs;\n                                r = shapeArgs && shapeArgs.r;\n                                innerR = shapeArgs && shapeArgs.innerR;\n                                if (graphic && shapeArgs) {\n                                    // start values\n                                    graphic.attr({\n                                        r: paneInnerR,\n                                        innerR: paneInnerR\n                                    });\n                                    // animate\n                                    graphic.animate({\n                                        r: r,\n                                        innerR: innerR\n                                    }, series.options.animation);\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        // Initialize the animation\n                        if (init) {\n                            // Scale down the group and place it in the center\n                            attribs = {\n                                translateX: center[0] + plotLeft,\n                                translateY: center[1] + plotTop,\n                                scaleX: 0.001,\n                                scaleY: 0.001\n                            };\n                            group.attr(attribs);\n                            if (markerGroup) {\n                                markerGroup.attr(attribs);\n                            }\n                            // Run the animation\n                        }\n                        else {\n                            attribs = {\n                                translateX: plotLeft,\n                                translateY: plotTop,\n                                scaleX: 1,\n                                scaleY: 1\n                            };\n                            group.animate(attribs, animation);\n                            if (markerGroup) {\n                                markerGroup.animate(attribs, animation);\n                            }\n                        }\n                    }\n                }\n                // For non-polar charts, revert to the basic animation\n            }\n            else {\n                proceed.call(this, init);\n            }\n        }\n        /**\n         * Overridden method for calculating a spline from one point to the next\n         * @private\n         */\n        function wrapSplineSeriesGetPointSpline(proceed, segment, point, i) {\n            let ret, connectors;\n            if (this.chart.polar) {\n                // moveTo or lineTo\n                if (!i) {\n                    ret = ['M', point.plotX, point.plotY];\n                }\n                else { // curve from last point to this\n                    connectors = getConnectors(segment, i, true, this.connectEnds);\n                    const rightContX = connectors.prevPointCont &&\n                        connectors.prevPointCont.rightContX;\n                    const rightContY = connectors.prevPointCont &&\n                        connectors.prevPointCont.rightContY;\n                    ret = [\n                        'C',\n                        isNumber(rightContX) ? rightContX : connectors.plotX,\n                        isNumber(rightContY) ? rightContY : connectors.plotY,\n                        isNumber(connectors.leftContX) ?\n                            connectors.leftContX :\n                            connectors.plotX,\n                        isNumber(connectors.leftContY) ?\n                            connectors.leftContY :\n                            connectors.plotY,\n                        connectors.plotX,\n                        connectors.plotY\n                    ];\n                }\n            }\n            else {\n                ret = proceed.call(this, segment, point, i);\n            }\n            return ret;\n        }\n        /**\n         * Extend the point pos method to calculate point positions for the polar chart.\n         * @private\n         */\n        function wrapPointPos(proceed, chartCoordinates, plotY = this.plotY) {\n            if (!this.destroyed) {\n                const { plotX, series } = this, { chart } = series;\n                if (chart.polar &&\n                    isNumber(plotX) &&\n                    isNumber(plotY)) {\n                    return [\n                        plotX + (chartCoordinates ? chart.plotLeft : 0),\n                        plotY + (chartCoordinates ? chart.plotTop : 0)\n                    ];\n                }\n                return proceed.call(this, chartCoordinates, plotY);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Extensions for polar charts. Additionally, much of the geometry required\n         * for polar charts is gathered in RadialAxes.js.\n         * @private\n         */\n        class PolarAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, PointerClass, SeriesClass, TickClass, PointClass, AreaSplineRangeSeriesClass, ColumnSeriesClass, LineSeriesClass, SplineSeriesClass) {\n                Pane.compose(ChartClass, PointerClass);\n                RadialAxis.compose(AxisClass, TickClass);\n                if (pushUnique(composed, 'Polar')) {\n                    const chartProto = ChartClass.prototype, pointProto = PointClass.prototype, pointerProto = PointerClass.prototype, seriesProto = SeriesClass.prototype;\n                    addEvent(ChartClass, 'afterDrawChartBox', onChartAfterDrawChartBox);\n                    addEvent(ChartClass, 'getAxes', onChartGetAxes);\n                    addEvent(ChartClass, 'init', onChartAfterInit);\n                    wrap(chartProto, 'get', wrapChartGet);\n                    wrap(pointerProto, 'getCoordinates', wrapPointerGetCoordinates);\n                    wrap(pointerProto, 'pinch', wrapPointerPinch);\n                    addEvent(PointerClass, 'getSelectionMarkerAttrs', onPointerGetSelectionMarkerAttrs);\n                    addEvent(PointerClass, 'getSelectionBox', onPointerGetSelectionBox);\n                    addEvent(SeriesClass, 'afterInit', onSeriesAfterInit);\n                    addEvent(SeriesClass, 'afterTranslate', onSeriesAfterTranslate, { order: 2 } // Run after translation of ||-coords\n                    );\n                    addEvent(SeriesClass, 'afterColumnTranslate', onAfterColumnTranslate, { order: 4 });\n                    wrap(seriesProto, 'animate', wrapSeriesAnimate);\n                    wrap(pointProto, 'pos', wrapPointPos);\n                    if (ColumnSeriesClass) {\n                        const columnProto = ColumnSeriesClass.prototype;\n                        wrap(columnProto, 'alignDataLabel', wrapColumnSeriesAlignDataLabel);\n                        wrap(columnProto, 'animate', wrapSeriesAnimate);\n                    }\n                    if (LineSeriesClass) {\n                        const lineProto = LineSeriesClass.prototype;\n                        wrap(lineProto, 'getGraphPath', wrapLineSeriesGetGraphPath);\n                    }\n                    if (SplineSeriesClass) {\n                        const splineProto = SplineSeriesClass.prototype;\n                        wrap(splineProto, 'getPointSpline', wrapSplineSeriesGetPointSpline);\n                        if (AreaSplineRangeSeriesClass) {\n                            const areaSplineRangeProto = AreaSplineRangeSeriesClass.prototype;\n                            // #6430 Areasplinerange series use unwrapped getPointSpline\n                            // method, so we need to set this method again.\n                            areaSplineRangeProto.getPointSpline =\n                                splineProto.getPointSpline;\n                        }\n                    }\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(series) {\n                this.series = series;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            arc(low, high, start, end) {\n                const series = this.series, center = series.xAxis.center, len = series.yAxis.len, paneInnerR = center[3] / 2;\n                let r = len - high + paneInnerR, innerR = len - pick(low, len) + paneInnerR;\n                // Prevent columns from shooting through the pane's center\n                if (series.yAxis.reversed) {\n                    if (r < 0) {\n                        r = paneInnerR;\n                    }\n                    if (innerR < 0) {\n                        innerR = paneInnerR;\n                    }\n                }\n                // Return a new shapeArgs\n                return {\n                    x: center[0],\n                    y: center[1],\n                    r: r,\n                    innerR: innerR,\n                    start: start,\n                    end: end\n                };\n            }\n            /**\n             * Translate a point's plotX and plotY from the internal angle and radius\n             * measures to true plotX, plotY coordinates\n             * @private\n             */\n            toXY(point) {\n                const series = this.series, chart = series.chart, xAxis = series.xAxis, yAxis = series.yAxis, plotX = point.plotX, inverted = chart.inverted, pointY = point.y;\n                let plotY = point.plotY, radius = inverted ? plotX : yAxis.len - plotY, clientX;\n                // Corrected y position of inverted series other than column\n                if (inverted && series && !series.isRadialBar) {\n                    point.plotY = plotY =\n                        isNumber(pointY) ? yAxis.translate(pointY) : 0;\n                }\n                // Save rectangular plotX, plotY for later computation\n                point.rectPlotX = plotX;\n                point.rectPlotY = plotY;\n                if (yAxis.center) {\n                    radius += yAxis.center[3] / 2;\n                }\n                // Find the polar plotX and plotY. Avoid setting plotX and plotY to NaN\n                // when plotY is undefined (#15438)\n                if (isNumber(plotY)) {\n                    const xy = inverted ? yAxis.postTranslate(plotY, radius) :\n                        xAxis.postTranslate(plotX, radius);\n                    point.plotX = point.polarPlotX = xy.x - chart.plotLeft;\n                    point.plotY = point.polarPlotY = xy.y - chart.plotTop;\n                }\n                // If shared tooltip, record the angle in degrees in order to align X\n                // points. Otherwise, use a standard k-d tree to get the nearest point\n                // in two dimensions.\n                if (series.kdByAngle) {\n                    clientX = ((plotX / Math.PI * 180) + xAxis.pane.options.startAngle) % 360;\n                    if (clientX < 0) { // #2665\n                        clientX += 360;\n                    }\n                    point.clientX = clientX;\n                }\n                else {\n                    point.clientX = point.plotX;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PolarAdditions;\n    });\n    _registerModule(_modules, 'Core/Axis/WaterfallAxis.js', [_modules['Core/Globals.js'], _modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (H, StackItem, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, objectEach, pushUnique } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var WaterfallAxis;\n        (function (WaterfallAxis) {\n            /* *\n             *\n             *  Interfaces\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(AxisClass, ChartClass) {\n                if (pushUnique(composed, 'Axis.Waterfall')) {\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterBuildStacks', onAxisAfterBuildStacks);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                    addEvent(ChartClass, 'beforeRedraw', onChartBeforeRedraw);\n                }\n            }\n            WaterfallAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterBuildStacks() {\n                const axis = this, stacks = axis.waterfall.stacks;\n                if (stacks) {\n                    stacks.changed = false;\n                    delete stacks.alreadyChanged;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, stackLabelOptions = axis.options.stackLabels;\n                if (stackLabelOptions && stackLabelOptions.enabled &&\n                    axis.waterfall.stacks) {\n                    axis.waterfall.renderStackTotals();\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.waterfall) {\n                    axis.waterfall = new Composition(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onChartBeforeRedraw() {\n                const axes = this.axes, series = this.series;\n                for (const serie of series) {\n                    if (serie.options.stacking) {\n                        for (const axis of axes) {\n                            if (!axis.isXAxis) {\n                                axis.waterfall.stacks.changed = true;\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            class Composition {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.axis = axis;\n                    this.stacks = {\n                        changed: false\n                    };\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Calls StackItem.prototype.render function that creates and renders\n                 * stack total label for each waterfall stack item.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#renderWaterfallStackTotals\n                 */\n                renderStackTotals() {\n                    const yAxis = this.axis, waterfallStacks = yAxis.waterfall.stacks, stackTotalGroup = (yAxis.stacking && yAxis.stacking.stackTotalGroup), dummyStackItem = new StackItem(yAxis, yAxis.options.stackLabels || {}, false, 0, void 0);\n                    this.dummyStackItem = dummyStackItem;\n                    // Render each waterfall stack total\n                    if (stackTotalGroup) {\n                        objectEach(waterfallStacks, (type) => {\n                            objectEach(type, (stackItem, key) => {\n                                dummyStackItem.total = stackItem.stackTotal;\n                                dummyStackItem.x = +key;\n                                if (stackItem.label) {\n                                    dummyStackItem.label = stackItem.label;\n                                }\n                                StackItem.prototype.render.call(dummyStackItem, stackTotalGroup);\n                                stackItem.label = dummyStackItem.label;\n                                delete dummyStackItem.label;\n                            });\n                        });\n                    }\n                    dummyStackItem.total = null;\n                }\n            }\n            WaterfallAxis.Composition = Composition;\n        })(WaterfallAxis || (WaterfallAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return WaterfallAxis;\n    });\n    _registerModule(_modules, 'Series/Waterfall/WaterfallPoint.js', [_modules['Series/Column/ColumnSeries.js'], _modules['Core/Series/Point.js'], _modules['Core/Utilities.js']], function (ColumnSeries, Point, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class WaterfallPoint extends ColumnSeries.prototype.pointClass {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getClassName() {\n                let className = Point.prototype.getClassName.call(this);\n                if (this.isSum) {\n                    className += ' highcharts-sum';\n                }\n                else if (this.isIntermediateSum) {\n                    className += ' highcharts-intermediate-sum';\n                }\n                return className;\n            }\n            // Pass the null test in ColumnSeries.translate.\n            isValid() {\n                return (isNumber(this.y) ||\n                    this.isSum ||\n                    Boolean(this.isIntermediateSum));\n            }\n        }\n        /* *\n         *\n         *  Export\n         *\n         * */\n\n        return WaterfallPoint;\n    });\n    _registerModule(_modules, 'Series/Waterfall/WaterfallSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A waterfall chart displays sequentially introduced positive or negative\n         * values in cumulative columns.\n         *\n         * @sample highcharts/demo/waterfall/\n         *         Waterfall chart\n         * @sample highcharts/plotoptions/waterfall-inverted/\n         *         Horizontal (inverted) waterfall\n         * @sample highcharts/plotoptions/waterfall-stacked/\n         *         Stacked waterfall chart\n         *\n         * @extends      plotOptions.column\n         * @excluding    boostThreshold, boostBlending\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.waterfall\n         */\n        const WaterfallSeriesDefaults = {\n            /**\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption plotOptions.waterfall.color\n             */\n            /**\n             * The color used specifically for positive point columns. When not\n             * specified, the general series color is used.\n             *\n             * In styled mode, the waterfall colors can be set with the\n             * `.highcharts-point-negative`, `.highcharts-sum` and\n             * `.highcharts-intermediate-sum` classes.\n             *\n             * @sample {highcharts} highcharts/demo/waterfall/\n             *         Waterfall\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts\n             * @apioption plotOptions.waterfall.upColor\n             */\n            dataLabels: {\n                inside: true\n            },\n            /**\n             * The width of the line connecting waterfall columns.\n             *\n             * @product highcharts\n             */\n            lineWidth: 1,\n            /**\n             * The color of the line that connects columns in a waterfall series.\n             *\n             * In styled mode, the stroke can be set with the `.highcharts-graph`\n             * class.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since   3.0\n             * @product highcharts\n             */\n            lineColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * A name for the dash style to use for the line connecting the columns\n             * of the waterfall series. Possible values: Dash, DashDot, Dot,\n             * LongDash, LongDashDot, LongDashDotDot, ShortDash, ShortDashDot,\n             * ShortDashDotDot, ShortDot, Solid\n             *\n             * In styled mode, the stroke dash-array can be set with the\n             * `.highcharts-graph` class.\n             *\n             * @type    {Highcharts.DashStyleValue}\n             * @since   3.0\n             * @product highcharts\n             */\n            dashStyle: 'Dot',\n            /**\n             * The color of the border of each waterfall column.\n             *\n             * In styled mode, the border stroke can be set with the\n             * `.highcharts-point` class.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since   3.0\n             * @product highcharts\n             */\n            borderColor: \"#333333\" /* Palette.neutralColor80 */,\n            states: {\n                hover: {\n                    lineWidthPlus: 0 // #3126\n                }\n            }\n        };\n        /**\n         * A `waterfall` series. If the [type](#series.waterfall.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.waterfall\n         * @excluding dataParser, dataURL, boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.waterfall\n         */\n        /**\n         * An array of data points for the series. For the `waterfall` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. The `x` values will be automatically\n         *    calculated, either starting at 0 and incremented by 1, or from\n         *    `pointStart` and `pointInterval` given in the series options. If the axis\n         *    has categories, these will be used. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of arrays with 2 values. In this case, the values correspond to\n         *    `x,y`. If the first value is a string, it is applied as the name of the\n         *    point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 7],\n         *        [1, 8],\n         *        [2, 3]\n         *    ]\n         *    ```\n         *\n         * 3. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.waterfall.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 8,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 8,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n         * @extends   series.line.data\n         * @excluding marker\n         * @product   highcharts\n         * @apioption series.waterfall.data\n         */\n        /**\n         * When this property is true, the points acts as a summary column for\n         * the values added or subtracted since the last intermediate sum,\n         * or since the start of the series. The `y` value is ignored.\n         *\n         * @sample {highcharts} highcharts/demo/waterfall/\n         *         Waterfall\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   highcharts\n         * @apioption series.waterfall.data.isIntermediateSum\n         */\n        /**\n         * When this property is true, the point display the total sum across\n         * the entire series. The `y` value is ignored.\n         *\n         * @sample {highcharts} highcharts/demo/waterfall/\n         *         Waterfall\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   highcharts\n         * @apioption series.waterfall.data.isSum\n         */\n        ''; // adds doclets above to transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return WaterfallSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Waterfall/WaterfallSeries.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Core/Axis/WaterfallAxis.js'], _modules['Series/Waterfall/WaterfallPoint.js'], _modules['Series/Waterfall/WaterfallSeriesDefaults.js']], function (SeriesRegistry, U, WaterfallAxis, WaterfallPoint, WaterfallSeriesDefaults) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries, line: LineSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, arrayMax, arrayMin, correctFloat, extend, isNumber, merge, objectEach, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Returns true if the key is a direct property of the object.\n         * @private\n         * @param {*} obj\n         * Object with property to test\n         * @param {string} key\n         * Property key to test\n         * @return {boolean}\n         * Whether it is a direct property\n         */\n        function ownProp(obj, key) {\n            return Object.hasOwnProperty.call(obj, key);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Waterfall series type.\n         *\n         * @private\n         */\n        class WaterfallSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            // After generating points, set y-values for all sums.\n            generatePoints() {\n                // Parent call:\n                ColumnSeries.prototype.generatePoints.apply(this);\n                for (let i = 0, len = this.points.length; i < len; i++) {\n                    const point = this.points[i], y = this.processedYData[i];\n                    // Override point value for sums. #3710 Update point does not\n                    // propagate to sum\n                    if (isNumber(y) && (point.isIntermediateSum || point.isSum)) {\n                        point.y = correctFloat(y);\n                    }\n                }\n            }\n            // Call default processData then override yData to reflect waterfall's\n            // extremes on yAxis\n            processData(force) {\n                const series = this, options = series.options, yData = series.yData, \n                // #3710 Update point does not propagate to sum\n                points = options.data, dataLength = yData.length, threshold = options.threshold || 0;\n                let point, subSum, sum, dataMin, dataMax, y;\n                sum = subSum = dataMin = dataMax = 0;\n                for (let i = 0; i < dataLength; i++) {\n                    y = yData[i];\n                    point = points && points[i] ? points[i] : {};\n                    if (y === 'sum' || point.isSum) {\n                        yData[i] = correctFloat(sum);\n                    }\n                    else if (y === 'intermediateSum' ||\n                        point.isIntermediateSum) {\n                        yData[i] = correctFloat(subSum);\n                        subSum = 0;\n                    }\n                    else {\n                        sum += y;\n                        subSum += y;\n                    }\n                    dataMin = Math.min(sum, dataMin);\n                    dataMax = Math.max(sum, dataMax);\n                }\n                super.processData.call(this, force);\n                // Record extremes only if stacking was not set:\n                if (!options.stacking) {\n                    series.dataMin = dataMin + threshold;\n                    series.dataMax = dataMax;\n                }\n                return;\n            }\n            // Return y value or string if point is sum\n            toYData(pt) {\n                if (pt.isSum) {\n                    return 'sum';\n                }\n                if (pt.isIntermediateSum) {\n                    return 'intermediateSum';\n                }\n                return pt.y;\n            }\n            updateParallelArrays(point, i) {\n                super.updateParallelArrays.call(this, point, i);\n                // Prevent initial sums from triggering an error (#3245, #7559)\n                if (this.yData[0] === 'sum' || this.yData[0] === 'intermediateSum') {\n                    this.yData[0] = null;\n                }\n            }\n            // Postprocess mapping between options and SVG attributes\n            pointAttribs(point, state) {\n                const upColor = this.options.upColor;\n                // Set or reset up color (#3710, update to negative)\n                if (upColor && !point.options.color && isNumber(point.y)) {\n                    point.color = point.y > 0 ? upColor : void 0;\n                }\n                const attr = ColumnSeries.prototype.pointAttribs.call(this, point, state);\n                // The dashStyle option in waterfall applies to the graph, not\n                // the points\n                delete attr.dashstyle;\n                return attr;\n            }\n            // Return an empty path initially, because we need to know the stroke-width\n            // in order to set the final path.\n            getGraphPath() {\n                return [['M', 0, 0]];\n            }\n            // Draw columns' connector lines\n            getCrispPath() {\n                const // Skip points where Y is not a number (#18636)\n                data = this.data.filter((d) => isNumber(d.y)), yAxis = this.yAxis, length = data.length, graphNormalizer = Math.round(this.graph.strokeWidth()) % 2 / 2, borderNormalizer = Math.round(this.borderWidth) % 2 / 2, reversedXAxis = this.xAxis.reversed, reversedYAxis = this.yAxis.reversed, stacking = this.options.stacking, path = [];\n                for (let i = 1; i < length; i++) {\n                    if (!( // Skip lines that would pass over the null point (#18636)\n                    this.options.connectNulls ||\n                        isNumber(this.data[data[i].index - 1].y))) {\n                        continue;\n                    }\n                    const box = data[i].box, prevPoint = data[i - 1], prevY = prevPoint.y || 0, prevBox = data[i - 1].box;\n                    if (!box || !prevBox) {\n                        continue;\n                    }\n                    const prevStack = yAxis.waterfall.stacks[this.stackKey], isPos = prevY > 0 ? -prevBox.height : 0;\n                    if (prevStack && prevBox && box) {\n                        const prevStackX = prevStack[i - 1];\n                        // y position of the connector is different when series are\n                        // stacked, yAxis is reversed and it also depends on point's\n                        // value\n                        let yPos;\n                        if (stacking) {\n                            const connectorThreshold = prevStackX.connectorThreshold;\n                            yPos = Math.round((yAxis.translate(connectorThreshold, false, true, false, true) +\n                                (reversedYAxis ? isPos : 0))) - graphNormalizer;\n                        }\n                        else {\n                            yPos =\n                                prevBox.y + prevPoint.minPointLengthOffset +\n                                    borderNormalizer - graphNormalizer;\n                        }\n                        path.push([\n                            'M',\n                            (prevBox.x || 0) + (reversedXAxis ?\n                                0 :\n                                (prevBox.width || 0)),\n                            yPos\n                        ], [\n                            'L',\n                            (box.x || 0) + (reversedXAxis ?\n                                (box.width || 0) :\n                                0),\n                            yPos\n                        ]);\n                    }\n                    if (prevBox &&\n                        path.length &&\n                        ((!stacking && prevY < 0 && !reversedYAxis) ||\n                            (prevY > 0 && reversedYAxis))) {\n                        const nextLast = path[path.length - 2];\n                        if (nextLast && typeof nextLast[2] === 'number') {\n                            nextLast[2] += prevBox.height || 0;\n                        }\n                        const last = path[path.length - 1];\n                        if (last && typeof last[2] === 'number') {\n                            last[2] += prevBox.height || 0;\n                        }\n                    }\n                }\n                return path;\n            }\n            // The graph is initially drawn with an empty definition, then updated with\n            // crisp rendering.\n            drawGraph() {\n                LineSeries.prototype.drawGraph.call(this);\n                if (this.graph) {\n                    this.graph.attr({\n                        d: this.getCrispPath()\n                    });\n                }\n            }\n            // Waterfall has stacking along the x-values too.\n            setStackedPoints(axis) {\n                const series = this, options = series.options, waterfallStacks = axis.waterfall?.stacks, seriesThreshold = options.threshold || 0, stackKey = series.stackKey, xData = series.xData, xLength = xData.length;\n                let stackThreshold = seriesThreshold, interSum = stackThreshold, actualStackX, totalYVal = 0, actualSum = 0, prevSum = 0, statesLen, posTotal, negTotal, xPoint, yVal, x, alreadyChanged, changed;\n                // Function responsible for calculating correct values for stackState\n                // array of each stack item. The arguments are: firstS - the value for\n                // the first state, nextS - the difference between the previous and the\n                // newest state, sInx - counter used in the for that updates each state\n                // when necessary, sOff - offset that must be added to each state when\n                // they need to be updated (if point isn't a total sum)\n                // eslint-disable-next-line require-jsdoc\n                const calculateStackState = (firstS, nextS, sInx, sOff) => {\n                    if (actualStackX) {\n                        if (!statesLen) {\n                            actualStackX.stackState[0] = firstS;\n                            statesLen = actualStackX.stackState.length;\n                        }\n                        else {\n                            for (sInx; sInx < statesLen; sInx++) {\n                                actualStackX.stackState[sInx] += sOff;\n                            }\n                        }\n                        actualStackX.stackState.push(actualStackX.stackState[statesLen - 1] + nextS);\n                    }\n                };\n                if (axis.stacking && waterfallStacks) {\n                    // Code responsible for creating stacks for waterfall series\n                    if (series.reserveSpace()) {\n                        changed = waterfallStacks.changed;\n                        alreadyChanged = waterfallStacks.alreadyChanged;\n                        // In case of a redraw, stack for each x value must be emptied\n                        // (only for the first series in a specific stack) and\n                        // recalculated once more\n                        if (alreadyChanged &&\n                            alreadyChanged.indexOf(stackKey) < 0) {\n                            changed = true;\n                        }\n                        if (!waterfallStacks[stackKey]) {\n                            waterfallStacks[stackKey] = {};\n                        }\n                        const actualStack = waterfallStacks[stackKey];\n                        if (actualStack) {\n                            for (let i = 0; i < xLength; i++) {\n                                x = xData[i];\n                                if (!actualStack[x] || changed) {\n                                    actualStack[x] = {\n                                        negTotal: 0,\n                                        posTotal: 0,\n                                        stackTotal: 0,\n                                        threshold: 0,\n                                        stateIndex: 0,\n                                        stackState: [],\n                                        label: ((changed &&\n                                            actualStack[x]) ?\n                                            actualStack[x].label :\n                                            void 0)\n                                    };\n                                }\n                                actualStackX = actualStack[x];\n                                yVal = series.yData[i];\n                                if (yVal >= 0) {\n                                    actualStackX.posTotal += yVal;\n                                }\n                                else {\n                                    actualStackX.negTotal += yVal;\n                                }\n                                // Points do not exist yet, so raw data is used\n                                xPoint = options.data[i];\n                                posTotal = actualStackX.absolutePos =\n                                    actualStackX.posTotal;\n                                negTotal = actualStackX.absoluteNeg =\n                                    actualStackX.negTotal;\n                                actualStackX.stackTotal = posTotal + negTotal;\n                                statesLen = actualStackX.stackState.length;\n                                if (xPoint && xPoint.isIntermediateSum) {\n                                    calculateStackState(prevSum, actualSum, 0, prevSum);\n                                    prevSum = actualSum;\n                                    actualSum = seriesThreshold;\n                                    // Swapping values\n                                    stackThreshold ^= interSum;\n                                    interSum ^= stackThreshold;\n                                    stackThreshold ^= interSum;\n                                }\n                                else if (xPoint && xPoint.isSum) {\n                                    calculateStackState(seriesThreshold, totalYVal, statesLen, 0);\n                                    stackThreshold = seriesThreshold;\n                                }\n                                else {\n                                    calculateStackState(stackThreshold, yVal, 0, totalYVal);\n                                    if (xPoint) {\n                                        totalYVal += yVal;\n                                        actualSum += yVal;\n                                    }\n                                }\n                                actualStackX.stateIndex++;\n                                actualStackX.threshold = stackThreshold;\n                                stackThreshold += actualStackX.stackTotal;\n                            }\n                        }\n                        waterfallStacks.changed = false;\n                        if (!waterfallStacks.alreadyChanged) {\n                            waterfallStacks.alreadyChanged = [];\n                        }\n                        waterfallStacks.alreadyChanged.push(stackKey);\n                    }\n                }\n            }\n            // Extremes for a non-stacked series are recorded in processData.\n            // In case of stacking, use Series.stackedYData to calculate extremes.\n            getExtremes() {\n                const stacking = this.options.stacking;\n                let yAxis, waterfallStacks, stackedYNeg, stackedYPos;\n                if (stacking) {\n                    yAxis = this.yAxis;\n                    waterfallStacks = yAxis.waterfall.stacks;\n                    stackedYNeg = this.stackedYNeg = [];\n                    stackedYPos = this.stackedYPos = [];\n                    // the visible y range can be different when stacking is set to\n                    // overlap and different when it's set to normal\n                    if (stacking === 'overlap') {\n                        objectEach(waterfallStacks[this.stackKey], function (stackX) {\n                            stackedYNeg.push(arrayMin(stackX.stackState));\n                            stackedYPos.push(arrayMax(stackX.stackState));\n                        });\n                    }\n                    else {\n                        objectEach(waterfallStacks[this.stackKey], function (stackX) {\n                            stackedYNeg.push(stackX.negTotal + stackX.threshold);\n                            stackedYPos.push(stackX.posTotal + stackX.threshold);\n                        });\n                    }\n                    return {\n                        dataMin: arrayMin(stackedYNeg),\n                        dataMax: arrayMax(stackedYPos)\n                    };\n                }\n                // When not stacking, data extremes have already been computed in the\n                // processData function.\n                return {\n                    dataMin: this.dataMin,\n                    dataMax: this.dataMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        WaterfallSeries.defaultOptions = merge(ColumnSeries.defaultOptions, WaterfallSeriesDefaults);\n        WaterfallSeries.compose = WaterfallAxis.compose;\n        extend(WaterfallSeries.prototype, {\n            pointValKey: 'y',\n            // Property needed to prevent lines between the columns from disappearing\n            // when negativeColor is used.\n            showLine: true,\n            pointClass: WaterfallPoint\n        });\n        // Translate data points from raw values\n        addEvent(WaterfallSeries, 'afterColumnTranslate', function () {\n            const series = this, { options, points, yAxis } = series, minPointLength = pick(options.minPointLength, 5), halfMinPointLength = minPointLength / 2, threshold = options.threshold || 0, stacking = options.stacking, actualStack = yAxis.waterfall.stacks[series.stackKey];\n            let previousIntermediate = threshold, previousY = threshold, y, total, yPos, hPos;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i], yValue = series.processedYData[i], shapeArgs = point.shapeArgs, box = extend({\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                }, shapeArgs || {});\n                point.box = box;\n                const range = [0, yValue], pointY = point.y || 0;\n                // code responsible for correct positions of stacked points\n                // starts here\n                if (stacking) {\n                    if (actualStack) {\n                        const actualStackX = actualStack[i];\n                        if (stacking === 'overlap') {\n                            total =\n                                actualStackX.stackState[actualStackX.stateIndex--];\n                            y = pointY >= 0 ? total : total - pointY;\n                            if (ownProp(actualStackX, 'absolutePos')) {\n                                delete actualStackX.absolutePos;\n                            }\n                            if (ownProp(actualStackX, 'absoluteNeg')) {\n                                delete actualStackX.absoluteNeg;\n                            }\n                        }\n                        else {\n                            if (pointY >= 0) {\n                                total = actualStackX.threshold +\n                                    actualStackX.posTotal;\n                                actualStackX.posTotal -= pointY;\n                                y = total;\n                            }\n                            else {\n                                total = actualStackX.threshold +\n                                    actualStackX.negTotal;\n                                actualStackX.negTotal -= pointY;\n                                y = total - pointY;\n                            }\n                            if (!actualStackX.posTotal) {\n                                if (isNumber(actualStackX.absolutePos) &&\n                                    ownProp(actualStackX, 'absolutePos')) {\n                                    actualStackX.posTotal =\n                                        actualStackX.absolutePos;\n                                    delete actualStackX.absolutePos;\n                                }\n                            }\n                            if (!actualStackX.negTotal) {\n                                if (isNumber(actualStackX.absoluteNeg) &&\n                                    ownProp(actualStackX, 'absoluteNeg')) {\n                                    actualStackX.negTotal =\n                                        actualStackX.absoluteNeg;\n                                    delete actualStackX.absoluteNeg;\n                                }\n                            }\n                        }\n                        if (!point.isSum) {\n                            // the connectorThreshold property is later used in\n                            // getCrispPath function to draw a connector line in a\n                            // correct place\n                            actualStackX.connectorThreshold =\n                                actualStackX.threshold + actualStackX.stackTotal;\n                        }\n                        if (yAxis.reversed) {\n                            yPos = (pointY >= 0) ? (y - pointY) : (y + pointY);\n                            hPos = y;\n                        }\n                        else {\n                            yPos = y;\n                            hPos = y - pointY;\n                        }\n                        point.below = yPos <= threshold;\n                        box.y = yAxis.translate(yPos, false, true, false, true);\n                        box.height = Math.abs(box.y -\n                            yAxis.translate(hPos, false, true, false, true));\n                        const dummyStackItem = yAxis.waterfall.dummyStackItem;\n                        if (dummyStackItem) {\n                            dummyStackItem.x = i;\n                            dummyStackItem.label = actualStack[i].label;\n                            dummyStackItem.setOffset(series.pointXOffset || 0, series.barW || 0, series.stackedYNeg[i], series.stackedYPos[i], void 0, this.xAxis);\n                        }\n                    }\n                }\n                else {\n                    // up points\n                    y = Math.max(previousY, previousY + pointY) + range[0];\n                    box.y = yAxis.translate(y, false, true, false, true);\n                    // sum points\n                    if (point.isSum) {\n                        box.y = yAxis.translate(range[1], false, true, false, true);\n                        box.height = Math.min(yAxis.translate(range[0], false, true, false, true), yAxis.len) - box.y; // #4256\n                        point.below = range[1] <= threshold;\n                    }\n                    else if (point.isIntermediateSum) {\n                        if (pointY >= 0) {\n                            yPos = range[1] + previousIntermediate;\n                            hPos = previousIntermediate;\n                        }\n                        else {\n                            yPos = previousIntermediate;\n                            hPos = range[1] + previousIntermediate;\n                        }\n                        if (yAxis.reversed) {\n                            // swapping values\n                            yPos ^= hPos;\n                            hPos ^= yPos;\n                            yPos ^= hPos;\n                        }\n                        box.y = yAxis.translate(yPos, false, true, false, true);\n                        box.height = Math.abs(box.y -\n                            Math.min(yAxis.translate(hPos, false, true, false, true), yAxis.len));\n                        previousIntermediate += range[1];\n                        point.below = yPos <= threshold;\n                        // If it's not the sum point, update previous stack end position\n                        // and get shape height (#3886)\n                    }\n                    else {\n                        box.height = yValue > 0 ?\n                            yAxis.translate(previousY, false, true, false, true) - box.y :\n                            yAxis.translate(previousY, false, true, false, true) - yAxis.translate(previousY - yValue, false, true, false, true);\n                        previousY += yValue;\n                        point.below = previousY < threshold;\n                    }\n                    // #3952 Negative sum or intermediate sum not rendered correctly\n                    if (box.height < 0) {\n                        box.y += box.height;\n                        box.height *= -1;\n                    }\n                }\n                point.plotY = box.y =\n                    Math.round(box.y || 0) - (series.borderWidth % 2) / 2;\n                // #3151\n                box.height =\n                    Math.max(Math.round(box.height || 0), 0.001);\n                point.yBottom = box.y + box.height;\n                if (box.height <= minPointLength && !point.isNull) {\n                    box.height = minPointLength;\n                    box.y -= halfMinPointLength;\n                    point.plotY = box.y;\n                    if (pointY < 0) {\n                        point.minPointLengthOffset = -halfMinPointLength;\n                    }\n                    else {\n                        point.minPointLengthOffset = halfMinPointLength;\n                    }\n                }\n                else {\n                    // #8024, empty gaps in the line for null data\n                    if (point.isNull) {\n                        box.width = 0;\n                    }\n                    point.minPointLengthOffset = 0;\n                }\n                // Correct tooltip placement (#3014)\n                const tooltipY = point.plotY + (point.negative ? box.height : 0);\n                if (point.below) { // #15334\n                    point.plotY += box.height;\n                }\n                if (point.tooltipPos) {\n                    if (series.chart.inverted) {\n                        point.tooltipPos[0] = yAxis.len - tooltipY;\n                    }\n                    else {\n                        point.tooltipPos[1] = tooltipY;\n                    }\n                }\n                // Check point position after recalculation (#16788)\n                point.isInside = this.isPointInside(point);\n                merge(true, point.shapeArgs, box);\n            }\n        }, { order: 2 });\n        SeriesRegistry.registerSeriesType('waterfall', WaterfallSeries);\n        /* *\n         *\n         * Export\n         *\n         * */\n\n        return WaterfallSeries;\n    });\n    _registerModule(_modules, 'masters/highcharts-more.src.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Extensions/Pane/Pane.js'], _modules['Series/Bubble/BubbleSeries.js'], _modules['Series/PackedBubble/PackedBubbleSeries.js'], _modules['Series/PolarComposition.js'], _modules['Series/Waterfall/WaterfallSeries.js']], function (Highcharts, SeriesRegistry, Pane, BubbleSeries, PackedBubbleSeries, PolarAdditions, WaterfallSeries) {\n\n        const G = Highcharts;\n        BubbleSeries.compose(G.Axis, G.Chart, G.Legend, G.Series);\n        PackedBubbleSeries.compose(G.Axis, G.Chart, G.Legend, G.Series);\n        Pane.compose(G.Chart, G.Pointer);\n        PolarAdditions.compose(G.Axis, G.Chart, G.Pointer, G.Series, G.Tick, G.Point, SeriesRegistry.seriesTypes.areasplinerange, SeriesRegistry.seriesTypes.column, SeriesRegistry.seriesTypes.line, SeriesRegistry.seriesTypes.spline);\n        WaterfallSeries.compose(G.Axis, G.Chart);\n\n        return G;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","U","addEvent","correctFloat","defined","pick","chartGetHoverPane","eventArgs","hoverPane","chart","pane","forEach","isInsidePane","chartX","plotLeft","chartY","plotTop","center","x","y","startAngle","endAngle","insideSlice","cx","cy","angle","Math","atan2","PI","distance","sqrt","pow","ceil","onChartAfterIsInsiderPlot","e","polar","options","inverted","isInsidePlot","some","axis","normalizedStartAngleRad","normalizedEndAngleRad","onPointerAfterGetHoverData","hoverPoint","plotX","plotY","onPointerBeforeGetHoverData","getHoverPane","filter","s","visible","shared","directTouch","enableMouseTracking","xAxis","compose","ChartClass","PointerClass","chartProto","prototype","collectionsWithUpdate","push","size","innerSize","background","shape","borderWidth","borderColor","backgroundColor","linearGradient","x1","y1","x2","y2","stops","from","Number","MAX_VALUE","innerRadius","to","outerRadius","CU","PaneComposition","PaneDefaults","extend","merge","splat","Pane","constructor","coll","init","setOptions","angular","render","renderer","group","g","attr","zIndex","add","updateCenter","backgroundOption","len","max","length","i","renderBackground","destroy","splice","backgroundOptions","attribs","className","method","styledMode","getPlotBandPath","getCenter","call","update","redraw","axes","SeriesRegistry","area","pointClass","AreaPoint","areaProto","seriesTypes","isNumber","setState","prevState","state","series","isPolar","plotHigh","yAxis","toPixels","high","plotLow","low","lowerStateMarkerGraphic","stateMarkerGraphic","upperStateMarkerGraphic","graphic","graphics","plotHighX","arguments","plotLowX","originalSettings","modifyMarkerSettings","restoreMarkerSettings","haloPath","isInside","isTopInside","concat","isValid","AreaRangePoint","H","noop","AreaSeries","column","columnProto","isArray","AreaRangeSeries","toYData","point","highToXY","xy","postTranslate","rectPlotX","getGraphPath","points","highPoints","highAreaPoints","connectEnds","connectNulls","pointShim","step","highAreaPoint","yBottom","doCurve","isNull","polarPlotY","lowerPath","left","right","higherPath","higherAreaPath","linePath","graphPath","areaPath","isArea","xMap","drawDataLabels","up","upperDataLabelOptions","lowerDataLabelOptions","data","originalDataLabels","dataLabelOptions","dataLabels","enabled","xHigh","yHigh","xLow","yLow","hasDataLabels","inside","_plotY","dataLabel","dataLabelUpper","below","align","verticalAlign","label","alignDataLabel","originalMarkerSettings","marker","symbol","lowMarker","drawPoints","pointLength","origProps","negative","zone","threshold","zones","getZone","hasMarkerChanged","oldOptions","oldMarker","height","width","defaultOptions","lineWidth","tooltip","pointFormat","trackByArea","pointArrayMap","join","translate","dataModify","modifyValue","order","tooltipPos","pos","posHigh","deferTranslatePolar","pointValKey","setStackedPoints","registerSeriesType","spline","splineProto","AreaSplineRangeSeries","getPointSpline","whiskerLength","fillColor","medianWidth","whiskerWidth","BoxPlotSeriesDefaults","ColumnSeries","BoxPlotSeries","pointAttribs","key","highPlot","doQuartiles","q1Plot","q3Plot","lowPlot","medianPlot","medianPath","crispCorr","crispX","boxPath","halfWidth","pointWiskerLength","verb","shapeArgs","boxAttr","stemAttr","whiskersAttr","medianAttr","color","d","round","floor","stem","addClass","whiskers","box","medianShape","stroke","stemColor","stemWidth","dashstyle","stemDashStyle","dashStyle","whiskerColor","whiskerDashStyle","fill","lineColor","boxDashStyle","medianColor","medianDashStyle","strokeWidth","test","parseFloat","q1","median","q3","connectorClassName","connectorColor","connectorDistance","connectorWidth","labels","allowOverlap","format","formatter","style","fontSize","maxSize","minSize","legendIndex","ranges","value","sizeBy","sizeByAbsoluteValue","zThreshold","Color","F","parse","arrayMax","arrayMin","stableSort","legend","addToLegend","items","drawLegendSymbol","connectorSpace","itemDistance","legendItem","bubbleLegend","autoRanges","a","b","maxLabel","getMaxLabelSize","radius","movementX","labelWidth","labelHeight","seriesIndex","baseline","bubbleAttribs","connectorAttribs","labelAttribs","rtl","fillOpacity","range","setOpacity","get","getRangeRadius","bubbleSeries","zMax","zMin","getRadius","symbols","connectors","bubbleItems","css","itemStyle","translateX","translateY","renderRange","hideOverlappingLabels","mainRange","labelsOptions","elementCenter","absoluteRadius","abs","labelsAlign","posX","posY","crispMovement","connectorLength","circle","colorIndex","crispLine","text","formatLabel","position","getBBox","placed","alignAttr","labelSize","numberFormatter","index","newOpacity","oldOpacity","show","hide","getRanges","rangesOptions","zData","minZ","maxZ","isBubble","ignoreSeries","min","displayNegative","reverse","predictBubbleSizes","legendOptions","floating","horizontal","layout","lastLineHeight","plotSizeX","plotSizeY","pxSizes","getPxExtremes","minPxSize","maxPxSize","calculatedSize","plotSize","updateRanges","bubbleLegendOptions","correctSizes","BubbleLegendDefaults","BubbleLegendItem","D","composed","objectEach","pushUnique","wrap","chartDrawChartBox","proceed","callback","bubbleSizes","getVisibleBubbleSeriesIndex","allItems","item","getMargins","setScale","updateNames","ticks","tick","isNew","isNewLabel","retranslateItems","getLinesHeights","lines","lastLine","legendItem2","j","itemHeight","onLegendAfterGetAllItems","bubbleSeriesIndex","destroyItem","onSeriesLegendItemClick","status","defaultPrevented","orgTranslateX","orgTranslateY","actualLine","LegendClass","SeriesClass","Point","scatter","ScatterPoint","BubblePoint","ttBelow","BubbleLegendComposition","Series","ScatterSeries","clamp","onAxisFoundExtremes","axisLength","isXAxis","dataKey","pxMin","pxMax","transA","hasActiveSeries","bubblePadding","reserveSpace","allowZoomOutside","onPoint","getRadii","radii","dataMin","logarithmic","keys","BubbleSeries","AxisClass","animate","animationLimit","hasRendered","markerAttribs","animation","yData","zExtremes","bubbleZExtremes","valid","otherSeries","getZExtremes","yValue","sizeByArea","zRange","hasData","processedXData","markerOptions","translateBubble","zoneAxis","z","dlBox","smallestSize","plotWidth","plotHeight","getPxSize","isPercent","parseInt","states","hover","radiusPlus","softThreshold","halo","turboThreshold","applyZones","parallelArrays","trackerGroups","specialGroup","target","arearange","ColumnRangePoint","ColumnRangeSeries","stacking","translate3dPoints","translate3dShapes","afterColumnTranslate","heightDifference","start","startAngleRad","isRadial","safeDistance","chartWidth","chartHeight","minPointLength","rectPlotY","barX","shapeType","arc","pointWidth","crispCol","borderRadius","where","pointRange","legendSymbol","adjustForMissingColumns","drawGraph","getSymbol","drawTracker","getColumnMetrics","ColumnPyramidSeriesDefaults","ColumnPyramidSeries","dense","closestPointRange","metrics","pointXOffset","offset","translatedThreshold","getThreshold","seriesBarW","barW","pointPadding","barY","barH","stackTotal","stackHeight","topPointY","topXwidth","bottomXwidth","invBarPos","x3","x4","centerInCategory","total","grouping","linkedTo","ErrorBarSeriesDefaults","ErrorBarSeries","linkedParent","columnMetrics","valKey","GaugePoint","pInt","GaugeSeries","generatePoints","dialOptions","dial","baseLength","rearLength","baseWidth","topWidth","overshoot","rotation","endAngleRad","percentage","pivot","pivotOptions","plotGroup","seriesGroup","clip","clipRect","setData","processData","crop","defer","headerFormat","showInLegend","fixedBox","forceDL","noSharedTooltip","onChartLoad","mousedownUnbinder","mousemoveUnbinder","mouseupUnbinder","container","event","hasDraggableNodes","draggable","onMouseDown","onMouseMove","ownerDocument","onMouseUp","normalizedEvent","pointer","normalize","fixedPosition","inDragMode","newPlotX","newPlotY","diffX","diffY","graphLayoutsLookup","hasDragged","redrawHalo","restartSimulation","enableSimulation","fixedDraggable","A","setAnimation","onChartAfterPrint","updateSimulation","onChartBeforePrint","onChartPredraw","stop","onChartRender","systemsStable","afterRender","layoutStep","maxIterations","isFinite","temperature","isStable","beforeStep","integrations","layouts","Chart","bubble","removeElementFromCollection","nodes","firePointEvent","seriesOptions","isParentNode","parentNode","temp","allowPointSelect","select","getSelectedPoints","getSelectedParentNodes","crisp","useSimulation","parentNodeFormatter","name","parentNodeTextPath","padding","transition","layoutAlgorithm","initialPositions","initialPositionRadius","parentNodeLimit","seriesInteraction","dragBetweenSeries","parentNodeOptions","gravitationalConstant","maxSpeed","type","integration","splitSeries","friction","attractive","link","force","distanceXY","massFactor","getMass","translatedX","diffTemperature","translatedY","fromNode","degree","toNode","attractiveForceFunction","k","barycenter","xFactor","yFactor","top","node","mass","getK","integrate","prevX","prevY","dispX","dispY","signX","signY","vectorLength","repulsive","factor","repulsiveForceFunction","VerletIntegration","centerX","centerY","repNode","distanceR","getDegree","phi","QuadTreeNode","body","isEmpty","isInternal","boxSize","divideBox","halfHeight","getBoxPosition","insert","depth","newQuadTreeNode","NaN","updateMassAndCenter","pointMass","maxDepth","root","isRoot","calculateMassAndCenter","visitNodeRecursive","insertNodes","beforeCallback","afterCallback","goFurther","qtNode","EulerIntegration","GraphLayout","QuadTree","win","isFunction","fireEvent","ReingoldFruchtermanLayout","currentStep","initialRendering","links","simulation","euler","verlet","setInitialRendering","attractiveForce","repulsiveForce","approximation","enable","forces","initPositions","finishedAnimating","setK","resetSimulation","allSeries","forceName","createQuadTree","quadTree","anyLayout","applyLimits","coolDown","startTemperature","prevSystemTemperature","systemTemperature","getSystemTemperature","cancelAnimationFrame","requestAnimationFrame","setArea","w","h","linkLength","addElementsToCollection","elements","collection","element","indexOf","clear","forcedStop","setMaxIterations","setTemperature","setDiffTemperature","setCircularPositions","setRandomPositions","rootNodes","linksTo","visitedNodes","addToNodes","linksFrom","id","sortedNodes","rootNode","iEnd","cos","sin","nodesLength","unrandom","n","rand","barycenterForces","getBarycenter","systemMass","barnesHutApproximation","quadNode","goDeeper","getDistXY","theta","repulsiveForces","attractiveForces","applyLimitBox","temperatureStep","vector","getDistR","nodeA","nodeB","xDist","yDist","absX","absY","PackedBubbleIntegration","chartGetSelectedParentNodes","selectedParentsNodes","selected","onChartBeforeRedraw","allDataPoints","PackedBubbleLayout","packedbubble","calculateParentRadius","tempDiff","neighbours","parentNodeRadius","syncTimeout","animObject","initDataLabels","dlOptions","dataLabelsGroup","initDataLabelsGroup","opacity","getPlotBox","initDataLabelsDefer","deferDataLabels","DragNodesComposition","PackedBubblePoint","PackedBubbleSeriesDefaults","seriesProto","PackedBubbleSeries","parentNodeMass","accumulateAllPoints","is","addLayout","layoutOptions","layoutType","chartOptions","graphLayoutsStorage","forExport","collisionNmb","addSeriesLayout","seriesLayout","parentNodeLayout","createParentNodes","bBox","seriesBox","calculateZExtremes","valMin","Infinity","valMax","checkOverlap","bubble1","bubble2","nodeAdded","parentMarkerOptions","brighten","p","normal","dataLabelOnNull","deferLayout","formatPrefix","nodeMarker","parentOptions","parentAttribs","parentNodesGroup","graph","div","getPointRadius","extremes","allDataPointsLength","prop","minRadius","maxRadius","eventsToUnbind","isDirty","dnPoint","removed","addPoint","remove","placeBubbles","positionBubble","bubblePos","stage","calculatedBubble","arr","sortedArr","sort","stages","rawPositions","resizeRadius","hasParentMarker","lastBubble","newOrigin","nextBubble","alfa","acos","beta","asin","finalAngle","gamma","minX","maxX","minY","maxY","positions","POSITIVE_INFINITY","NEGATIVE_INFINITY","spaceRatio","smallerDimension","setVisible","xData","axisTypes","invertible","isCartesian","requireSorting","indexateNodes","searchPoint","stickyTracking","followPointer","PolygonSeriesDefaults","line","LineSeries","PolygonSeries","RadialAxis","isObject","relativeLength","defaultCircularOptions","gridLineWidth","textOverflow","maxPadding","minPadding","showLastLabel","tickLength","defaultRadialGaugeOptions","endOnTick","minorGridLineWidth","minorTickInterval","minorTickLength","minorTickPosition","minorTickWidth","startOnTick","tickPixelInterval","tickPosition","tickWidth","title","defaultRadialOptions","gridLineInterpolation","beforeSetTickPositions","autoConnect","isCircular","userMax","categories","createLabelCollector","tickPositions","map","Boolean","createLabelCollectorHidden","getCrosshairPosition","end","getPosition","getLinePath","_lineWidth","r","horiz","open","innerR","xBounds","yBounds","angleRad","getOffset","axisProto","axisOffset","side","radiusToPixels","percentRegex","fullRadius","xOnPerimeter","thickness","getPlotLinePath","transFrom","transTo","isCrosshair","paneInnerR","innerRatio","otherAxis","crossPos","slice","translatedVal","getTitlePosition","titleOptions","middle","modify","setAxisSize","setAxisTranslation","onAxisAfterInit","isHidden","paneOptions","fullCircle","normalizedStart","normalizedEnd","onAxisAutoLabelAlign","preventDefault","onAxisDestroy","labelCollectors","labelCollector","onAxisInit","isX","paneIndex","userOptions","radialAxis","renderHidden","setCategories","setTitle","onAxisInitialAxisTranslation","onTickAfterGetLabelPosition","labelBBox","labelOptions","correctAngle","labelYPosCorrection","optionsY","ret","centerSlot","labelDir","reducedAngle1","reducedAngle2","fontMetrics","tickInterval","onTickAfterGetPosition","sector","minPixelPadding","minPointOffset","defaultPolarOptions","stackLabels","reversedStacks","plotBands","wrapTickGetMarkPath","endPoint","TickClass","find","uniqueKey","onChartAfterDrawChartBox","onChartAfterInit","onChartGetAxes","onPointerGetSelectionBox","linearAxis","result","onPointerGetSelectionMarkerAttrs","mouseDownX","mouseDownY","attrs","zoomHor","paneRadRange","pathStart","toValue","pathEnd","getExtremes","trimPath","zoomVert","Array","innerPath","outerPath","onSeriesAfterInit","PolarAdditions","isRadialSeries","isRadialBar","onSeriesAfterTranslate","kdByAngle","searchPointByAngleOrInverted","findNearestPointBy","toXY","hasParallelCoordinates","reversed","MIN_VALUE","hasClipCircleSetter","circ","clipCircle","clipPath","createElement","defs","wrapper","setClip","searchKDTreePoint","clientX","searchKDTree","lastTick","firstTick","unshift","wrapChartGet","wrapColumnSeriesAlignDataLabel","alignTo","labelPos","onAfterColumnTranslate","visibleRange","thresholdAngleRad","yMin","yMax","pointX","pointY","stackValues","stack","stacks","stackKey","getStackIndicator","brOption","brValue","wrapLineSeriesGetGraphPath","firstValid","popLastPoint","pop","wrapPointerGetCoordinates","wrapPointerPinch","wrapSeriesAnimate","markerGroup","pie","scaleX","scaleY","wrapSplineSeriesGetPointSpline","segment","rightContX","getConnectors","calculateNeighbours","leftContX","leftContY","rightContY","jointAngle","addedNumber","prevPointInd","nextPointInd","previousPoint","nextPoint","previousX","previousY","nextX","nextY","smoothing","dLControlPoint","dRControlPoint","leftContAngle","prevPointCont","wrapPointPos","chartCoordinates","destroyed","PointClass","AreaSplineRangeSeriesClass","ColumnSeriesClass","LineSeriesClass","SplineSeriesClass","pointProto","pointerProto","areaSplineRangeProto","polarPlotX","StackItem","WaterfallAxis","onAxisAfterBuildStacks","waterfall","changed","alreadyChanged","onAxisAfterRender","stackLabelOptions","renderStackTotals","Composition","serie","waterfallStacks","stackTotalGroup","dummyStackItem","stackItem","WaterfallPoint","getClassName","isSum","isIntermediateSum","lineWidthPlus","WaterfallSeriesDefaults","ownProp","Object","WaterfallSeries","processedYData","subSum","sum","dataMax","dataLength","pt","updateParallelArrays","upColor","getCrispPath","graphNormalizer","borderNormalizer","reversedXAxis","reversedYAxis","prevPoint","prevBox","prevStack","isPos","yPos","prevStackX","connectorThreshold","minPointLengthOffset","nextLast","last","seriesThreshold","xLength","stackThreshold","interSum","actualStackX","totalYVal","actualSum","prevSum","statesLen","posTotal","negTotal","xPoint","yVal","calculateStackState","firstS","nextS","sInx","sOff","stackState","actualStack","stateIndex","absolutePos","absoluteNeg","stackedYNeg","stackedYPos","stackX","showLine","halfMinPointLength","previousIntermediate","hPos","setOffset","tooltipY","isPointInside","G","Axis","Legend","Pointer","Tick","areasplinerange"],"mappings":"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"}