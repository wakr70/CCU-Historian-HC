{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * (c) 2009-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/highcharts-more', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Pane.js', [_modules['Core/Chart/Chart.js'], _modules['Series/CenteredUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Pointer.js'], _modules['Core/Utilities.js']], function (Chart, CU, H, Pointer, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, correctFloat, defined, extend, merge, pick, splat } = U;\n        /**\n         * @typedef {\"arc\"|\"circle\"|\"solid\"} Highcharts.PaneBackgroundShapeValue\n         */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        Chart.prototype.collectionsWithUpdate.push('pane');\n        /**\n         * The Pane object allows options that are common to a set of X and Y axes.\n         *\n         * In the future, this can be extended to basic Highcharts and Highcharts Stock.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Pane\n         * @param {Highcharts.PaneOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Pane {\n            constructor(options, chart) {\n                this.background = void 0;\n                this.center = void 0;\n                this.chart = void 0;\n                this.options = void 0;\n                this.coll = 'pane'; // Member of chart.pane\n                /**\n                 * The pane serves as a container for axes and backgrounds for circular\n                 * gauges and polar charts.\n                 *\n                 * @since        2.3.0\n                 * @product      highcharts\n                 * @requires     highcharts-more\n                 * @optionparent pane\n                 */\n                this.defaultOptions = {\n                    /**\n                     * The end angle of the polar X axis or gauge value axis, given in\n                     * degrees where 0 is north. Defaults to [startAngle](#pane.startAngle)\n                     * + 360.\n                     *\n                     * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n                     *         VU-meter with custom start and end angle\n                     *\n                     * @type      {number}\n                     * @since     2.3.0\n                     * @product   highcharts\n                     * @apioption pane.endAngle\n                     */\n                    /**\n                     * The center of a polar chart or angular gauge, given as an array\n                     * of [x, y] positions. Positions can be given as integers that\n                     * transform to pixels, or as percentages of the plot area size.\n                     *\n                     * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n                     *         Two gauges with different center\n                     *\n                     * @type    {Array<string|number>}\n                     * @default [\"50%\", \"50%\"]\n                     * @since   2.3.0\n                     * @product highcharts\n                     */\n                    center: ['50%', '50%'],\n                    /**\n                     * The size of the pane, either as a number defining pixels, or a\n                     * percentage defining a percentage of the available plot area (the\n                     * smallest of the plot height or plot width).\n                     *\n                     * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n                     *         Smaller size\n                     *\n                     * @type    {number|string}\n                     * @product highcharts\n                     */\n                    size: '85%',\n                    /**\n                     * The inner size of the pane, either as a number defining pixels, or a\n                     * percentage defining a percentage of the pane's size.\n                     *\n                     * @sample {highcharts} highcharts/series-polar/column-inverted-inner\n                     *         The inner size set to 20%\n                     *\n                     * @type    {number|string}\n                     * @product highcharts\n                     */\n                    innerSize: '0%',\n                    /**\n                     * The start angle of the polar X axis or gauge axis, given in degrees\n                     * where 0 is north. Defaults to 0.\n                     *\n                     * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n                     *         VU-meter with custom start and end angle\n                     *\n                     * @since   2.3.0\n                     * @product highcharts\n                     */\n                    startAngle: 0\n                };\n                /**\n                 * An array of background items for the pane.\n                 *\n                 * @sample {highcharts} highcharts/demo/gauge-speedometer/\n                 *         Speedometer gauge with multiple backgrounds\n                 *\n                 * @type         {Array<*>}\n                 * @optionparent pane.background\n                 */\n                this.defaultBackgroundOptions = {\n                    /**\n                     * The class name for this background.\n                     *\n                     * @sample {highcharts} highcharts/css/pane/\n                     *         Panes styled by CSS\n                     * @sample {highstock} highcharts/css/pane/\n                     *         Panes styled by CSS\n                     * @sample {highmaps} highcharts/css/pane/\n                     *         Panes styled by CSS\n                     *\n                     * @type      {string}\n                     * @default   highcharts-pane\n                     * @since     5.0.0\n                     * @apioption pane.background.className\n                     */\n                    /**\n                     * The shape of the pane background. When `solid`, the background\n                     * is circular. When `arc`, the background extends only from the min\n                     * to the max of the value axis.\n                     *\n                     * @type    {Highcharts.PaneBackgroundShapeValue}\n                     * @since   2.3.0\n                     * @product highcharts\n                     */\n                    shape: 'circle',\n                    /**\n                     * The pixel border width of the pane background.\n                     *\n                     * @since 2.3.0\n                     * @product highcharts\n                     */\n                    borderWidth: 1,\n                    /**\n                     * The pane background border color.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since   2.3.0\n                     * @product highcharts\n                     */\n                    borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                    /**\n                     * The background color or gradient for the pane.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @default { linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [[0, #ffffff], [1, #e6e6e6]] }\n                     * @since   2.3.0\n                     * @product highcharts\n                     */\n                    backgroundColor: {\n                        /** @ignore-option */\n                        linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },\n                        /** @ignore-option */\n                        stops: [\n                            [0, \"#ffffff\" /* Palette.backgroundColor */],\n                            [1, \"#e6e6e6\" /* Palette.neutralColor10 */]\n                        ]\n                    },\n                    /** @ignore-option */\n                    from: -Number.MAX_VALUE,\n                    /**\n                     * The inner radius of the pane background. Can be either numeric\n                     * (pixels) or a percentage string.\n                     *\n                     * @type    {number|string}\n                     * @since   2.3.0\n                     * @product highcharts\n                     */\n                    innerRadius: 0,\n                    /** @ignore-option */\n                    to: Number.MAX_VALUE,\n                    /**\n                     * The outer radius of the circular pane background. Can be either\n                     * numeric (pixels) or a percentage string.\n                     *\n                     * @type     {number|string}\n                     * @since    2.3.0\n                     * @product  highcharts\n                     */\n                    outerRadius: '105%'\n                };\n                this.init(options, chart);\n            }\n            /**\n             * Initialize the Pane object\n             *\n             * @private\n             * @function Highcharts.Pane#init\n             *\n             * @param {Highcharts.PaneOptions} options\n             *\n             * @param {Highcharts.Chart} chart\n             */\n            init(options, chart) {\n                this.chart = chart;\n                this.background = [];\n                chart.pane.push(this);\n                this.setOptions(options);\n            }\n            /**\n             * @private\n             * @function Highcharts.Pane#setOptions\n             *\n             * @param {Highcharts.PaneOptions} options\n             */\n            setOptions(options) {\n                // Set options. Angular charts have a default background (#3318)\n                this.options = options = merge(this.defaultOptions, this.chart.angular ? { background: {} } : void 0, options);\n            }\n            /**\n             * Render the pane with its backgrounds.\n             *\n             * @private\n             * @function Highcharts.Pane#render\n             */\n            render() {\n                let options = this.options, backgroundOption = this.options.background, renderer = this.chart.renderer, len, i;\n                if (!this.group) {\n                    this.group = renderer.g('pane-group')\n                        .attr({ zIndex: options.zIndex || 0 })\n                        .add();\n                }\n                this.updateCenter();\n                // Render the backgrounds\n                if (backgroundOption) {\n                    backgroundOption = splat(backgroundOption);\n                    len = Math.max(backgroundOption.length, this.background.length || 0);\n                    for (i = 0; i < len; i++) {\n                        // #6641 - if axis exists, chart is circular and apply\n                        // background\n                        if (backgroundOption[i] && this.axis) {\n                            this.renderBackground(merge(this.defaultBackgroundOptions, backgroundOption[i]), i);\n                        }\n                        else if (this.background[i]) {\n                            this.background[i] = this.background[i].destroy();\n                            this.background.splice(i, 1);\n                        }\n                    }\n                }\n            }\n            /**\n             * Render an individual pane background.\n             *\n             * @private\n             * @function Highcharts.Pane#renderBackground\n             *\n             * @param {Highcharts.PaneBackgroundOptions} backgroundOptions\n             *        Background options\n             *\n             * @param {number} i\n             *        The index of the background in this.backgrounds\n             */\n            renderBackground(backgroundOptions, i) {\n                let method = 'animate', attribs = {\n                    'class': 'highcharts-pane ' + (backgroundOptions.className || '')\n                };\n                if (!this.chart.styledMode) {\n                    extend(attribs, {\n                        'fill': backgroundOptions.backgroundColor,\n                        'stroke': backgroundOptions.borderColor,\n                        'stroke-width': backgroundOptions.borderWidth\n                    });\n                }\n                if (!this.background[i]) {\n                    this.background[i] = this.chart.renderer\n                        .path()\n                        .add(this.group);\n                    method = 'attr';\n                }\n                this.background[i][method]({\n                    'd': this.axis.getPlotBandPath(backgroundOptions.from, backgroundOptions.to, backgroundOptions)\n                }).attr(attribs);\n            }\n            /**\n             * Gets the center for the pane and its axis.\n             *\n             * @private\n             * @function Highcharts.Pane#updateCenter\n             * @param {Highcharts.Axis} [axis]\n             */\n            updateCenter(axis) {\n                this.center = (axis ||\n                    this.axis ||\n                    {}).center = CU.getCenter.call(this);\n            }\n            /**\n             * Destroy the pane item\n             *\n             * @ignore\n             * @private\n             * @function Highcharts.Pane#destroy\n             * /\n            destroy: function () {\n                erase(this.chart.pane, this);\n                this.background.forEach(function (background) {\n                    background.destroy();\n                });\n                this.background.length = 0;\n                this.group = this.group.destroy();\n            },\n            */\n            /**\n             * Update the pane item with new options\n             *\n             * @private\n             * @function Highcharts.Pane#update\n             * @param {Highcharts.PaneOptions} options\n             *        New pane options\n             * @param {boolean} [redraw]\n             */\n            update(options, redraw) {\n                merge(true, this.options, options);\n                this.setOptions(this.options);\n                this.render();\n                this.chart.axes.forEach(function (axis) {\n                    if (axis.pane === this) {\n                        axis.pane = null;\n                        axis.update({}, redraw);\n                    }\n                }, this);\n            }\n        }\n        /**\n         * Check whether element is inside or outside pane.\n         * @private\n         * @param  {number} x\n         * Element's x coordinate\n         * @param  {number} y\n         * Element's y coordinate\n         * @param  {Array<number>} inverted\n         * `Chart.inverted` param\n         * @param  {Array<number>} center\n         * Pane's center (x, y) and diameter\n         * @param  {number} startAngle\n         * Pane's normalized start angle in radians (<-PI, PI>)\n         * @param  {number} endAngle\n         * Pane's normalized end angle in radians (<-PI, PI>)\n         */\n        function isInsidePane(x, y, center, startAngle, endAngle) {\n            let insideSlice = true;\n            const cx = center[0], cy = center[1];\n            const distance = Math.sqrt(Math.pow(x - cx, 2) + Math.pow(y - cy, 2));\n            if (defined(startAngle) && defined(endAngle)) {\n                // Round angle to N-decimals to avoid numeric errors\n                const angle = Math.atan2(correctFloat(y - cy, 8), correctFloat(x - cx, 8));\n                // Ignore full circle panes:\n                if (endAngle !== startAngle) {\n                    // If normalized start angle is bigger than normalized end,\n                    // it means angles have different signs. In such situation we\n                    // check the <-PI, startAngle> and <endAngle, PI> ranges.\n                    if (startAngle > endAngle) {\n                        insideSlice = (angle >= startAngle &&\n                            angle <= Math.PI) || (angle <= endAngle &&\n                            angle >= -Math.PI);\n                    }\n                    else {\n                        // In this case, we simple check if angle is within the\n                        // <startAngle, endAngle> range\n                        insideSlice = angle >= startAngle &&\n                            angle <= correctFloat(endAngle, 8);\n                    }\n                }\n            }\n            // Round up radius because x and y values are rounded\n            return distance <= Math.ceil(center[2] / 2) && insideSlice;\n        }\n        Chart.prototype.getHoverPane = function (eventArgs) {\n            const chart = this;\n            let hoverPane;\n            if (eventArgs) {\n                chart.pane.forEach((pane) => {\n                    const x = eventArgs.chartX - chart.plotLeft, y = eventArgs.chartY - chart.plotTop;\n                    if (isInsidePane(x, y, pane.center)) {\n                        hoverPane = pane;\n                    }\n                });\n            }\n            return hoverPane;\n        };\n        // Check if (x, y) position is within pane for polar\n        addEvent(Chart, 'afterIsInsidePlot', function (e) {\n            const chart = this;\n            if (chart.polar) {\n                if (e.options.inverted) {\n                    [e.x, e.y] = [e.y, e.x];\n                }\n                e.isInsidePlot = chart.pane.some((pane) => isInsidePane(e.x, e.y, pane.center, pane.axis && pane.axis.normalizedStartAngleRad, pane.axis && pane.axis.normalizedEndAngleRad));\n            }\n        });\n        addEvent(Pointer, 'beforeGetHoverData', function (eventArgs) {\n            const chart = this.chart;\n            if (chart.polar) {\n                // Find pane we are currently hovering over.\n                chart.hoverPane = chart.getHoverPane(eventArgs);\n                // Edit filter method to handle polar\n                eventArgs.filter = function (s) {\n                    return (s.visible &&\n                        !(!eventArgs.shared && s.directTouch) && // #3821\n                        pick(s.options.enableMouseTracking, true) &&\n                        (!chart.hoverPane || s.xAxis.pane === chart.hoverPane));\n                };\n            }\n            else {\n                chart.hoverPane = void 0;\n            }\n        });\n        addEvent(Pointer, 'afterGetHoverData', function (eventArgs) {\n            const chart = this.chart;\n            if (eventArgs.hoverPoint &&\n                eventArgs.hoverPoint.plotX &&\n                eventArgs.hoverPoint.plotY &&\n                chart.hoverPane &&\n                !isInsidePane(eventArgs.hoverPoint.plotX, eventArgs.hoverPoint.plotY, chart.hoverPane.center)) {\n                eventArgs.hoverPoint = void 0;\n            }\n        });\n        H.Pane = Pane;\n\n        return Pane;\n    });\n    _registerModule(_modules, 'Series/AreaRange/AreaRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { area: { prototype: { pointClass: AreaPoint, pointClass: { prototype: areaProto } } } } = SeriesRegistry.seriesTypes;\n        const { defined, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class AreaRangePoint extends AreaPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                /**\n                 * Range series only. The high or maximum value for each data point.\n                 * @name Highcharts.Point#high\n                 * @type {number|undefined}\n                 */\n                this.high = void 0;\n                /**\n                 * Range series only. The low or minimum value for each data point.\n                 * @name Highcharts.Point#low\n                 * @type {number|undefined}\n                 */\n                this.low = void 0;\n                this.options = void 0;\n                this.plotX = void 0;\n                this.series = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            setState() {\n                const prevState = this.state, series = this.series, isPolar = series.chart.polar, seriesOptionsMarker = series.options.marker, seriesDefaultSymbol = series.symbol;\n                if (!defined(this.plotHigh)) {\n                    // Boost doesn't calculate plotHigh\n                    this.plotHigh = series.yAxis.toPixels(this.high, true);\n                }\n                if (!defined(this.plotLow)) {\n                    // Boost doesn't calculate plotLow\n                    this.plotLow = this.plotY = series.yAxis.toPixels(this.low, true);\n                }\n                series.lowerStateMarkerGraphic = series.stateMarkerGraphic;\n                series.stateMarkerGraphic = series.upperStateMarkerGraphic;\n                // Change state also for the top marker\n                this.graphic = this.graphics && this.graphics[1];\n                this.plotY = this.plotHigh;\n                if (isPolar && isNumber(this.plotHighX)) {\n                    this.plotX = this.plotHighX;\n                }\n                // Top state:\n                areaProto.setState.apply(this, arguments);\n                this.state = prevState;\n                // Now restore defaults\n                this.plotY = this.plotLow;\n                this.graphic = this.graphics && this.graphics[0];\n                if (isPolar && isNumber(this.plotLowX)) {\n                    this.plotX = this.plotLowX;\n                }\n                series.upperStateMarkerGraphic = series.stateMarkerGraphic;\n                series.stateMarkerGraphic = series.lowerStateMarkerGraphic;\n                // Lower marker is stored at stateMarkerGraphic\n                // to avoid reference duplication (#7021)\n                series.lowerStateMarkerGraphic = void 0;\n                const originalSettings = series.modifyMarkerSettings();\n                // Bottom state\n                areaProto.setState.apply(this, arguments);\n                // Restore previous state\n                series.restoreMarkerSettings(originalSettings);\n            }\n            haloPath() {\n                const isPolar = this.series.chart.polar;\n                let path = [];\n                // Bottom halo\n                this.plotY = this.plotLow;\n                if (isPolar && isNumber(this.plotLowX)) {\n                    this.plotX = this.plotLowX;\n                }\n                if (this.isInside) {\n                    path = areaProto.haloPath.apply(this, arguments);\n                }\n                // Top halo\n                this.plotY = this.plotHigh;\n                if (isPolar && isNumber(this.plotHighX)) {\n                    this.plotX = this.plotHighX;\n                }\n                if (this.isTopInside) {\n                    path = path.concat(areaProto.haloPath.apply(this, arguments));\n                }\n                return path;\n            }\n            isValid() {\n                return isNumber(this.low) && isNumber(this.high);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AreaRangePoint;\n    });\n    _registerModule(_modules, 'Series/AreaRange/AreaRangeSeries.js', [_modules['Series/AreaRange/AreaRangePoint.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AreaRangePoint, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { area: AreaSeries, area: { prototype: areaProto }, column: { prototype: columnProto } } = SeriesRegistry.seriesTypes;\n        const { addEvent, defined, extend, isArray, isNumber, pick, merge } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The area range series is a carteseian series with higher and lower values for\n         * each point along an X axis, where the area between the values is shaded.\n         *\n         * @sample {highcharts} highcharts/demo/arearange/\n         *         Area range chart\n         * @sample {highstock} stock/demo/arearange/\n         *         Area range chart\n         *\n         * @extends      plotOptions.area\n         * @product      highcharts highstock\n         * @excluding    stack, stacking\n         * @requires     highcharts-more\n         * @optionparent plotOptions.arearange\n         *\n         * @private\n         */\n        const areaRangeSeriesOptions = {\n            /**\n             * @see [fillColor](#plotOptions.arearange.fillColor)\n             * @see [fillOpacity](#plotOptions.arearange.fillOpacity)\n             *\n             * @apioption plotOptions.arearange.color\n             */\n            /**\n             * @default   low\n             * @apioption plotOptions.arearange.colorKey\n             */\n            /**\n             * @see [color](#plotOptions.arearange.color)\n             * @see [fillOpacity](#plotOptions.arearange.fillOpacity)\n             *\n             * @apioption plotOptions.arearange.fillColor\n             */\n            /**\n             * @see [color](#plotOptions.arearange.color)\n             * @see [fillColor](#plotOptions.arearange.fillColor)\n             *\n             * @default   {highcharts} 0.75\n             * @default   {highstock} 0.75\n             * @apioption plotOptions.arearange.fillOpacity\n             */\n            /**\n             * Whether to apply a drop shadow to the graph line. Since 2.3 the\n             * shadow can be an object configuration containing `color`, `offsetX`,\n             * `offsetY`, `opacity` and `width`.\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @product   highcharts\n             * @apioption plotOptions.arearange.shadow\n             */\n            /**\n             * Pixel width of the arearange graph line.\n             *\n             * @since 2.3.0\n             *\n             * @private\n             */\n            lineWidth: 1,\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            tooltip: {\n                pointFormat: '<span style=\"color:{series.color}\">\\u25CF</span> ' +\n                    '{series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'\n            },\n            /**\n             * Whether the whole area or just the line should respond to mouseover\n             * tooltips and other mouse or touch events.\n             *\n             * @since 2.3.0\n             *\n             * @private\n             */\n            trackByArea: true,\n            /**\n             * Extended data labels for range series types. Range series data\n             * labels use no `x` and `y` options. Instead, they have `xLow`,\n             * `xHigh`, `yLow` and `yHigh` options to allow the higher and lower\n             * data label sets individually.\n             *\n             * @declare Highcharts.SeriesAreaRangeDataLabelsOptionsObject\n             * @exclude x, y\n             * @since   2.3.0\n             * @product highcharts highstock\n             *\n             * @private\n             */\n            dataLabels: {\n                align: void 0,\n                verticalAlign: void 0,\n                /**\n                 * X offset of the lower data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                xLow: 0,\n                /**\n                 * X offset of the higher data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                xHigh: 0,\n                /**\n                 * Y offset of the lower data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                yLow: 0,\n                /**\n                 * Y offset of the higher data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                yHigh: 0\n            }\n        };\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AreaRange series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.arearange\n         *\n         * @augments Highcharts.Series\n         */\n        class AreaRangeSeries extends AreaSeries {\n            constructor() {\n                /**\n                 *\n                 *  Static Properties\n                 *\n                 */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n                this.lowerStateMarkerGraphic = void 0;\n                this.xAxis = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            toYData(point) {\n                return [point.low, point.high];\n            }\n            /**\n             * Translate a point's plotHigh from the internal angle and radius measures\n             * to true plotHigh coordinates. This is an addition of the toXY method\n             * found in Polar.js, because it runs too early for arearanges to be\n             * considered (#3419).\n             * @private\n             */\n            highToXY(point) {\n                // Find the polar plotX and plotY\n                const chart = this.chart, xy = this.xAxis.postTranslate(point.rectPlotX || 0, this.yAxis.len - (point.plotHigh || 0));\n                point.plotHighX = xy.x - chart.plotLeft;\n                point.plotHigh = xy.y - chart.plotTop;\n                point.plotLowX = point.plotX;\n            }\n            /**\n             * Extend the line series' getSegmentPath method by applying the segment\n             * path to both lower and higher values of the range.\n             * @private\n             */\n            getGraphPath(points) {\n                const highPoints = [], highAreaPoints = [], getGraphPath = areaProto.getGraphPath, options = this.options, polar = this.chart.polar, connectEnds = polar && options.connectEnds !== false, connectNulls = options.connectNulls;\n                let i, point, pointShim, step = options.step;\n                points = points || this.points;\n                // Create the top line and the top part of the area fill. The area fill\n                // compensates for null points by drawing down to the lower graph,\n                // moving across the null gap and starting again at the lower graph.\n                i = points.length;\n                while (i--) {\n                    point = points[i];\n                    // Support for polar\n                    const highAreaPoint = polar ? {\n                        plotX: point.rectPlotX,\n                        plotY: point.yBottom,\n                        doCurve: false // #5186, gaps in areasplinerange fill\n                    } : {\n                        plotX: point.plotX,\n                        plotY: point.plotY,\n                        doCurve: false // #5186, gaps in areasplinerange fill\n                    };\n                    if (!point.isNull &&\n                        !connectEnds &&\n                        !connectNulls &&\n                        (!points[i + 1] || points[i + 1].isNull)) {\n                        highAreaPoints.push(highAreaPoint);\n                    }\n                    pointShim = {\n                        polarPlotY: point.polarPlotY,\n                        rectPlotX: point.rectPlotX,\n                        yBottom: point.yBottom,\n                        // plotHighX is for polar charts\n                        plotX: pick(point.plotHighX, point.plotX),\n                        plotY: point.plotHigh,\n                        isNull: point.isNull\n                    };\n                    highAreaPoints.push(pointShim);\n                    highPoints.push(pointShim);\n                    if (!point.isNull &&\n                        !connectEnds &&\n                        !connectNulls &&\n                        (!points[i - 1] || points[i - 1].isNull)) {\n                        highAreaPoints.push(highAreaPoint);\n                    }\n                }\n                // Get the paths\n                const lowerPath = getGraphPath.call(this, points);\n                if (step) {\n                    if (step === true) {\n                        step = 'left';\n                    }\n                    options.step = {\n                        left: 'right',\n                        center: 'center',\n                        right: 'left'\n                    }[step]; // swap for reading in getGraphPath\n                }\n                const higherPath = getGraphPath.call(this, highPoints);\n                const higherAreaPath = getGraphPath.call(this, highAreaPoints);\n                options.step = step;\n                // Create a line on both top and bottom of the range\n                const linePath = [].concat(lowerPath, higherPath);\n                // For the area path, we need to change the 'move' statement into\n                // 'lineTo'\n                if (!this.chart.polar &&\n                    higherAreaPath[0] &&\n                    higherAreaPath[0][0] === 'M') {\n                    // This probably doesn't work for spline\n                    higherAreaPath[0] = [\n                        'L',\n                        higherAreaPath[0][1],\n                        higherAreaPath[0][2]\n                    ];\n                }\n                this.graphPath = linePath;\n                this.areaPath = lowerPath.concat(higherAreaPath);\n                // Prepare for sideways animation\n                linePath.isArea = true;\n                linePath.xMap = lowerPath.xMap;\n                this.areaPath.xMap = lowerPath.xMap;\n                return linePath;\n            }\n            /**\n             * Extend the basic drawDataLabels method by running it for both lower and\n             * higher values.\n             * @private\n             */\n            drawDataLabels() {\n                const data = this.points, length = data.length, originalDataLabels = [], dataLabelOptions = this.options.dataLabels, inverted = this.chart.inverted;\n                let i, point, up, upperDataLabelOptions, lowerDataLabelOptions;\n                if (dataLabelOptions) {\n                    // Split into upper and lower options. If data labels is an array,\n                    // the first element is the upper label, the second is the lower.\n                    //\n                    // TODO: We want to change this and allow multiple labels for both\n                    // upper and lower values in the future - introducing some options\n                    // for which point value to use as Y for the dataLabel, so that this\n                    // could be handled in Series.drawDataLabels. This would also\n                    // improve performance since we now have to loop over all the points\n                    // multiple times to work around the data label logic.\n                    if (isArray(dataLabelOptions)) {\n                        upperDataLabelOptions = dataLabelOptions[0] || {\n                            enabled: false\n                        };\n                        lowerDataLabelOptions = dataLabelOptions[1] || {\n                            enabled: false\n                        };\n                    }\n                    else {\n                        // Make copies\n                        upperDataLabelOptions = extend({}, dataLabelOptions);\n                        upperDataLabelOptions.x = dataLabelOptions.xHigh;\n                        upperDataLabelOptions.y = dataLabelOptions.yHigh;\n                        lowerDataLabelOptions = extend({}, dataLabelOptions);\n                        lowerDataLabelOptions.x = dataLabelOptions.xLow;\n                        lowerDataLabelOptions.y = dataLabelOptions.yLow;\n                    }\n                    // Draw upper labels\n                    if (upperDataLabelOptions.enabled || this.hasDataLabels?.()) {\n                        // Set preliminary values for plotY and dataLabel\n                        // and draw the upper labels\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                const { plotHigh = 0, plotLow = 0 } = point;\n                                up = upperDataLabelOptions.inside ?\n                                    plotHigh < plotLow :\n                                    plotHigh > plotLow;\n                                point.y = point.high;\n                                point._plotY = point.plotY;\n                                point.plotY = plotHigh;\n                                // Store original data labels and set preliminary label\n                                // objects to be picked up in the uber method\n                                originalDataLabels[i] = point.dataLabel;\n                                point.dataLabel = point.dataLabelUpper;\n                                // Set the default offset\n                                point.below = up;\n                                if (inverted) {\n                                    if (!upperDataLabelOptions.align) {\n                                        upperDataLabelOptions.align = up ?\n                                            'right' : 'left';\n                                    }\n                                }\n                                else {\n                                    if (!upperDataLabelOptions.verticalAlign) {\n                                        upperDataLabelOptions.verticalAlign = up ?\n                                            'top' :\n                                            'bottom';\n                                    }\n                                }\n                            }\n                        }\n                        this.options.dataLabels = upperDataLabelOptions;\n                        if (areaProto.drawDataLabels) {\n                            // #1209:\n                            areaProto.drawDataLabels.apply(this, arguments);\n                        }\n                        // Reset state after the upper labels were created. Move\n                        // it to point.dataLabelUpper and reassign the originals.\n                        // We do this here to support not drawing a lower label.\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                point.dataLabelUpper = point.dataLabel;\n                                point.dataLabel = originalDataLabels[i];\n                                delete point.dataLabels;\n                                point.y = point.low;\n                                point.plotY = point._plotY;\n                            }\n                        }\n                    }\n                    // Draw lower labels\n                    if (lowerDataLabelOptions.enabled || this.hasDataLabels?.()) {\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                const { plotHigh = 0, plotLow = 0 } = point;\n                                up = lowerDataLabelOptions.inside ?\n                                    plotHigh < plotLow :\n                                    plotHigh > plotLow;\n                                // Set the default offset\n                                point.below = !up;\n                                if (inverted) {\n                                    if (!lowerDataLabelOptions.align) {\n                                        lowerDataLabelOptions.align = up ?\n                                            'left' : 'right';\n                                    }\n                                }\n                                else {\n                                    if (!lowerDataLabelOptions.verticalAlign) {\n                                        lowerDataLabelOptions.verticalAlign = up ?\n                                            'bottom' :\n                                            'top';\n                                    }\n                                }\n                            }\n                        }\n                        this.options.dataLabels = lowerDataLabelOptions;\n                        if (areaProto.drawDataLabels) {\n                            areaProto.drawDataLabels.apply(this, arguments);\n                        }\n                    }\n                    // Merge upper and lower into point.dataLabels for later destroying\n                    if (upperDataLabelOptions.enabled) {\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                point.dataLabels = [\n                                    point.dataLabelUpper,\n                                    point.dataLabel\n                                ].filter(function (label) {\n                                    return !!label;\n                                });\n                            }\n                        }\n                    }\n                    // Reset options\n                    this.options.dataLabels = dataLabelOptions;\n                }\n            }\n            alignDataLabel() {\n                columnProto.alignDataLabel.apply(this, arguments);\n            }\n            modifyMarkerSettings() {\n                const series = this, originalMarkerSettings = {\n                    marker: series.options.marker,\n                    symbol: series.symbol\n                };\n                if (series.options.lowMarker) {\n                    const { options: { marker, lowMarker } } = series;\n                    series.options.marker = merge(marker, lowMarker);\n                    if (lowMarker.symbol) {\n                        series.symbol = lowMarker.symbol;\n                    }\n                }\n                return originalMarkerSettings;\n            }\n            restoreMarkerSettings(originalSettings) {\n                const series = this;\n                series.options.marker = originalSettings.marker;\n                series.symbol = originalSettings.symbol;\n            }\n            drawPoints() {\n                const series = this, pointLength = series.points.length;\n                let i, point;\n                const originalSettings = series.modifyMarkerSettings();\n                // Draw bottom points\n                areaProto.drawPoints.apply(series, arguments);\n                // Restore previous state\n                series.restoreMarkerSettings(originalSettings);\n                // Prepare drawing top points\n                i = 0;\n                while (i < pointLength) {\n                    point = series.points[i];\n                    /**\n                     * Array for multiple SVG graphics representing the point in the\n                     * chart. Only used in cases where the point can not be represented\n                     * by a single graphic.\n                     *\n                     * @see Highcharts.Point#graphic\n                     *\n                     * @name Highcharts.Point#graphics\n                     * @type {Array<Highcharts.SVGElement>|undefined}\n                     */\n                    point.graphics = point.graphics || [];\n                    // Save original props to be overridden by temporary props for top\n                    // points\n                    point.origProps = {\n                        plotY: point.plotY,\n                        plotX: point.plotX,\n                        isInside: point.isInside,\n                        negative: point.negative,\n                        zone: point.zone,\n                        y: point.y\n                    };\n                    if (point.graphic || point.graphics[0]) {\n                        point.graphics[0] = point.graphic;\n                    }\n                    point.graphic = point.graphics[1];\n                    point.plotY = point.plotHigh;\n                    if (defined(point.plotHighX)) {\n                        point.plotX = point.plotHighX;\n                    }\n                    point.y = pick(point.high, point.origProps.y); // #15523\n                    point.negative = point.y < (series.options.threshold || 0);\n                    if (series.zones.length) {\n                        point.zone = point.getZone();\n                    }\n                    if (!series.chart.polar) {\n                        point.isInside = point.isTopInside = (typeof point.plotY !== 'undefined' &&\n                            point.plotY >= 0 &&\n                            point.plotY <= series.yAxis.len && // #3519\n                            point.plotX >= 0 &&\n                            point.plotX <= series.xAxis.len);\n                    }\n                    i++;\n                }\n                // Draw top points\n                areaProto.drawPoints.apply(series, arguments);\n                // Reset top points preliminary modifications\n                i = 0;\n                while (i < pointLength) {\n                    point = series.points[i];\n                    point.graphics = point.graphics || [];\n                    if (point.graphic || point.graphics[1]) {\n                        point.graphics[1] = point.graphic;\n                    }\n                    point.graphic = point.graphics[0];\n                    if (point.origProps) {\n                        extend(point, point.origProps);\n                        delete point.origProps;\n                    }\n                    i++;\n                }\n            }\n            hasMarkerChanged(options, oldOptions) {\n                const series = this, lowMarker = options.lowMarker, oldMarker = oldOptions.lowMarker || {};\n                return (lowMarker && (lowMarker.enabled === false ||\n                    oldMarker.symbol !== lowMarker.symbol || // #10870, #15946\n                    oldMarker.height !== lowMarker.height || // #16274\n                    oldMarker.width !== lowMarker.width // #16274\n                )) || super.hasMarkerChanged(options, oldOptions);\n            }\n        }\n        AreaRangeSeries.defaultOptions = merge(AreaSeries.defaultOptions, areaRangeSeriesOptions);\n        addEvent(AreaRangeSeries, 'afterTranslate', function () {\n            // Set plotLow and plotHigh\n            // Rules out lollipop, but lollipop should not inherit range series in the\n            // first place\n            if (this.pointArrayMap.join(',') === 'low,high') {\n                this.points.forEach((point) => {\n                    const high = point.high, plotY = point.plotY;\n                    if (point.isNull) {\n                        point.plotY = void 0;\n                    }\n                    else {\n                        point.plotLow = plotY;\n                        // Calculate plotHigh value based on each yAxis scale (#15752)\n                        point.plotHigh = isNumber(high) ? this.yAxis.translate(this.dataModify ?\n                            this.dataModify.modifyValue(high) : high, false, true, void 0, true) : void 0;\n                        if (this.dataModify) {\n                            point.yBottom = point.plotHigh;\n                        }\n                    }\n                });\n            }\n        }, { order: 0 });\n        addEvent(AreaRangeSeries, 'afterTranslate', function () {\n            const inverted = this.chart.inverted;\n            this.points.forEach((point) => {\n                // Postprocessing after the PolarComposition's afterTranslate\n                if (this.chart.polar) {\n                    this.highToXY(point);\n                    point.plotLow = point.plotY;\n                    point.tooltipPos = [\n                        ((point.plotHighX || 0) + (point.plotLowX || 0)) / 2,\n                        ((point.plotHigh || 0) + (point.plotLow || 0)) / 2\n                    ];\n                    // Put the tooltip in the middle of the range\n                }\n                else {\n                    const tooltipPos = point.pos(false, point.plotLow), posHigh = point.pos(false, point.plotHigh);\n                    if (tooltipPos && posHigh) {\n                        tooltipPos[0] = (tooltipPos[0] + posHigh[0]) / 2;\n                        tooltipPos[1] = (tooltipPos[1] + posHigh[1]) / 2;\n                    }\n                    point.tooltipPos = tooltipPos;\n                }\n            });\n        }, { order: 3 });\n        extend(AreaRangeSeries.prototype, {\n            deferTranslatePolar: true,\n            pointArrayMap: ['low', 'high'],\n            pointClass: AreaRangePoint,\n            pointValKey: 'low',\n            setStackedPoints: noop\n        });\n        SeriesRegistry.registerSeriesType('arearange', AreaRangeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `arearange` series. If the [type](#series.arearange.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         *\n         * @extends   series,plotOptions.arearange\n         * @excluding dataParser, dataURL, stack, stacking\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.arearange\n         */\n        /**\n         * @see [fillColor](#series.arearange.fillColor)\n         * @see [fillOpacity](#series.arearange.fillOpacity)\n         *\n         * @apioption series.arearange.color\n         */\n        /**\n         * An array of data points for the series. For the `arearange` series type,\n         * points can be given in the following ways:\n         *\n         * 1.  An array of arrays with 3 or 2 values. In this case, the values\n         *     correspond to `x,low,high`. If the first value is a string, it is\n         *     applied as the name of the point, and the `x` value is inferred.\n         *     The `x` value can also be omitted, in which case the inner arrays\n         *     should be of length 2\\. Then the `x` value is automatically calculated,\n         *     either starting at 0 and incremented by 1, or from `pointStart`\n         *     and `pointInterval` given in the series options.\n         *     ```js\n         *     data: [\n         *         [0, 8, 3],\n         *         [1, 1, 1],\n         *         [2, 6, 8]\n         *     ]\n         *     ```\n         *\n         * 2.  An array of objects with named values. The following snippet shows only a\n         *     few settings, see the complete options set below. If the total number of\n         *     data points exceeds the series'\n         *     [turboThreshold](#series.arearange.turboThreshold),\n         *     this option is not available.\n         *     ```js\n         *     data: [{\n         *         x: 1,\n         *         low: 9,\n         *         high: 0,\n         *         name: \"Point2\",\n         *         color: \"#00FF00\"\n         *     }, {\n         *         x: 1,\n         *         low: 3,\n         *         high: 4,\n         *         name: \"Point1\",\n         *         color: \"#FF00FF\"\n         *     }]\n         *     ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.line.data\n         * @excluding marker, y\n         * @product   highcharts highstock\n         * @apioption series.arearange.data\n         */\n        /**\n         * @extends   series.arearange.dataLabels\n         * @product   highcharts highstock\n         * @apioption series.arearange.data.dataLabels\n         */\n        /**\n         * @see [color](#series.arearange.color)\n         * @see [fillOpacity](#series.arearange.fillOpacity)\n         *\n         * @apioption series.arearange.fillColor\n         */\n        /**\n         * @see [color](#series.arearange.color)\n         * @see [fillColor](#series.arearange.fillColor)\n         *\n         * @default   {highcharts} 0.75\n         * @default   {highstock} 0.75\n         * @apioption series.arearange.fillOpacity\n         */\n        /**\n         * Options for the lower markers of the arearange-like series. When `lowMarker`\n         * is not defined, options inherit form the marker.\n         *\n         * @see [marker](#series.arearange.marker)\n         *\n         * @declare   Highcharts.PointMarkerOptionsObject\n         * @extends   plotOptions.series.marker\n         * @default   undefined\n         * @product   highcharts highstock\n         * @apioption plotOptions.arearange.lowMarker\n         */\n        /**\n         *\n         * @sample {highcharts} highcharts/series-arearange/lowmarker/\n         *         Area range chart with `lowMarker` option\n         *\n         * @declare   Highcharts.PointMarkerOptionsObject\n         * @extends   plotOptions.series.marker.symbol\n         * @product   highcharts highstock\n         * @apioption plotOptions.arearange.lowMarker.symbol\n         */\n        /**\n         * The high or maximum value for each data point.\n         *\n         * @type      {number}\n         * @product   highcharts highstock\n         * @apioption series.arearange.data.high\n         */\n        /**\n         * The low or minimum value for each data point.\n         *\n         * @type      {number}\n         * @product   highcharts highstock\n         * @apioption series.arearange.data.low\n         */\n        ''; // adds doclets above to tranpiled file\n\n        return AreaRangeSeries;\n    });\n    _registerModule(_modules, 'Series/AreaSplineRange/AreaSplineRangeSeries.js', [_modules['Series/AreaRange/AreaRangeSeries.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AreaRangeSeries, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { spline: { prototype: splineProto } } = SeriesRegistry.seriesTypes;\n        const { merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The areasplinerange series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.areasplinerange\n         *\n         * @augments Highcharts.Series\n         */\n        class AreaSplineRangeSeries extends AreaRangeSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = void 0;\n                this.data = void 0;\n                this.points = void 0;\n            }\n        }\n        AreaSplineRangeSeries.defaultOptions = merge(AreaRangeSeries.defaultOptions);\n        extend(AreaSplineRangeSeries.prototype, {\n            getPointSpline: splineProto.getPointSpline\n        });\n        SeriesRegistry.registerSeriesType('areasplinerange', AreaSplineRangeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The area spline range is a cartesian series type with higher and\n         * lower Y values along an X axis. The area inside the range is colored, and\n         * the graph outlining the area is a smoothed spline.\n         *\n         * @sample {highstock|highstock} stock/demo/areasplinerange/\n         *         Area spline range\n         *\n         * @extends   plotOptions.arearange\n         * @since     2.3.0\n         * @excluding step, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption plotOptions.areasplinerange\n         */\n        /**\n         * @see [fillColor](#plotOptions.areasplinerange.fillColor)\n         * @see [fillOpacity](#plotOptions.areasplinerange.fillOpacity)\n         *\n         * @apioption plotOptions.areasplinerange.color\n         */\n        /**\n         * @see [color](#plotOptions.areasplinerange.color)\n         * @see [fillOpacity](#plotOptions.areasplinerange.fillOpacity)\n         *\n         * @apioption plotOptions.areasplinerange.fillColor\n         */\n        /**\n         * @see [color](#plotOptions.areasplinerange.color)\n         * @see [fillColor](#plotOptions.areasplinerange.fillColor)\n         *\n         * @default   0.75\n         * @apioption plotOptions.areasplinerange.fillOpacity\n         */\n        /**\n         * A `areasplinerange` series. If the [type](#series.areasplinerange.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.areasplinerange\n         * @excluding dataParser, dataURL, stack, step, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.areasplinerange\n         */\n        /**\n         * @see [fillColor](#series.areasplinerange.fillColor)\n         * @see [fillOpacity](#series.areasplinerange.fillOpacity)\n         *\n         * @apioption series.areasplinerange.color\n         */\n        /**\n         * An array of data points for the series. For the `areasplinerange`\n         * series type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,low,high`. If the first value is a string, it is applied as the name\n         *    of the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 0, 5],\n         *        [1, 9, 1],\n         *        [2, 5, 2]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.areasplinerange.turboThreshold), this option is\n         *    not available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 5,\n         *        high: 0,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 4,\n         *        high: 1,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.arearange.data\n         * @product   highcharts highstock\n         * @apioption series.areasplinerange.data\n         */\n        /**\n         * @see [color](#series.areasplinerange.color)\n         * @see [fillOpacity](#series.areasplinerange.fillOpacity)\n         *\n         * @apioption series.areasplinerange.fillColor\n         */\n        /**\n         * @see [color](#series.areasplinerange.color)\n         * @see [fillColor](#series.areasplinerange.fillColor)\n         *\n         * @default   0.75\n         * @apioption series.areasplinerange.fillOpacity\n         */\n        ''; // adds doclets above to transpiled file\n\n        return AreaSplineRangeSeries;\n    });\n    _registerModule(_modules, 'Series/BoxPlot/BoxPlotSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A box plot is a convenient way of depicting groups of data through their\n         * five-number summaries: the smallest observation (sample minimum), lower\n         * quartile (Q1), median (Q2), upper quartile (Q3), and largest observation\n         * (sample maximum).\n         *\n         * @sample highcharts/demo/box-plot/\n         *         Box plot\n         *\n         * @extends      plotOptions.column\n         * @excluding    borderColor, borderRadius, borderWidth, groupZPadding,\n         *               states, boostThreshold, boostBlending\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.boxplot\n         */\n        const BoxPlotSeriesDefaults = {\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b>' +\n                    '{series.name}</b><br/>' +\n                    'Maximum: {point.high}<br/>' +\n                    'Upper quartile: {point.q3}<br/>' +\n                    'Median: {point.median}<br/>' +\n                    'Lower quartile: {point.q1}<br/>' +\n                    'Minimum: {point.low}<br/>'\n            },\n            /**\n             * The length of the whiskers, the horizontal lines marking low and\n             * high values. It can be a numerical pixel value, or a percentage\n             * value of the box width. Set `0` to disable whiskers.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         True by default\n             *\n             * @type    {number|string}\n             * @since   3.0\n             * @product highcharts\n             */\n            whiskerLength: '50%',\n            /**\n             * The fill color of the box.\n             *\n             * In styled mode, the fill color can be set with the\n             * `.highcharts-boxplot-box` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #ffffff\n             * @since   3.0\n             * @product highcharts\n             */\n            fillColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The width of the line surrounding the box. If any of\n             * [stemWidth](#plotOptions.boxplot.stemWidth),\n             * [medianWidth](#plotOptions.boxplot.medianWidth)\n             * or [whiskerWidth](#plotOptions.boxplot.whiskerWidth) are `null`,\n             * the lineWidth also applies to these lines.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            lineWidth: 1,\n            /**\n             * The color of the median line. If `undefined`, the general series\n             * color applies.\n             *\n             * In styled mode, the median stroke width can be set with the\n             * `.highcharts-boxplot-median` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.medianColor\n             */\n            /**\n             * The pixel width of the median line. If `null`, the\n             * [lineWidth](#plotOptions.boxplot.lineWidth) is used.\n             *\n             * In styled mode, the median stroke width can be set with the\n             * `.highcharts-boxplot-median` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type    {number|null}\n             * @since   3.0\n             * @product highcharts\n             */\n            medianWidth: 2,\n            /*\n            // States are not working and are removed from docs.\n            // Refer to: #2340\n            states: {\n                hover: {\n                    brightness: -0.3\n                }\n            },\n            */\n            /**\n             * The color of the stem, the vertical line extending from the box to\n             * the whiskers. If `undefined`, the series color is used.\n             *\n             * In styled mode, the stem stroke can be set with the\n             * `.highcharts-boxplot-stem` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.stemColor\n             */\n            /**\n             * The dash style of the box.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since 8.1.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.boxDashStyle\n             */\n            /**\n             * The dash style of the median.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since 8.1.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.medianDashStyle\n             */\n            /**\n             * The dash style of the stem, the vertical line extending from the\n             * box to the whiskers.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.stemDashStyle\n             */\n            /**\n             * The dash style of the whiskers.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since 8.1.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.whiskerDashStyle\n             */\n            /**\n             * The width of the stem, the vertical line extending from the box to\n             * the whiskers. If `undefined`, the width is inherited from the\n             * [lineWidth](#plotOptions.boxplot.lineWidth) option.\n             *\n             * In styled mode, the stem stroke width can be set with the\n             * `.highcharts-boxplot-stem` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {number}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.stemWidth\n             */\n            /**\n             * @default   high\n             * @apioption plotOptions.boxplot.colorKey\n             */\n            /**\n             * The color of the whiskers, the horizontal lines marking low and high\n             * values. When `undefined`, the general series color is used.\n             *\n             * In styled mode, the whisker stroke can be set with the\n             * `.highcharts-boxplot-whisker` class .\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.whiskerColor\n             */\n            /**\n             * The line width of the whiskers, the horizontal lines marking low and\n             * high values. When `undefined`, the general\n             * [lineWidth](#plotOptions.boxplot.lineWidth) applies.\n             *\n             * In styled mode, the whisker stroke width can be set with the\n             * `.highcharts-boxplot-whisker` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            whiskerWidth: 2\n        };\n        /**\n         * A `boxplot` series. If the [type](#series.boxplot.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.boxplot\n         * @excluding dataParser, dataURL, marker, stack, stacking, states,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.boxplot\n         */\n        /**\n         * An array of data points for the series. For the `boxplot` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 6 or 5 values. In this case, the values correspond\n         *    to `x,low,q1,median,q3,high`. If the first value is a string, it is\n         *    applied as the name of the point, and the `x` value is inferred. The `x`\n         *    value can also be omitted, in which case the inner arrays should be of\n         *    length 5. Then the `x` value is automatically calculated, either starting\n         *    at 0 and incremented by 1, or from `pointStart` and `pointInterval` given\n         *    in the series options.\n         *    ```js\n         *    data: [\n         *        [0, 3, 0, 10, 3, 5],\n         *        [1, 7, 8, 7, 2, 9],\n         *        [2, 6, 9, 5, 1, 3]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.boxplot.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 4,\n         *        q1: 9,\n         *        median: 9,\n         *        q3: 1,\n         *        high: 10,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 5,\n         *        q1: 7,\n         *        median: 3,\n         *        q3: 6,\n         *        high: 2,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number,number,number,number>|Array<(number|string),number,number,number,number,number>|*>}\n         * @extends   series.line.data\n         * @excluding marker\n         * @product   highcharts\n         * @apioption series.boxplot.data\n         */\n        /**\n         * The `high` value for each data point, signifying the highest value\n         * in the sample set. The top whisker is drawn here.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.high\n         */\n        /**\n         * The `low` value for each data point, signifying the lowest value\n         * in the sample set. The bottom whisker is drawn here.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.low\n         */\n        /**\n         * The median for each data point. This is drawn as a line through the\n         * middle area of the box.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.median\n         */\n        /**\n         * The lower quartile for each data point. This is the bottom of the\n         * box.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.q1\n         */\n        /**\n         * The higher quartile for each data point. This is the top of the box.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.q3\n         */\n        /**\n         * The dash style of the box.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.boxDashStyle\n         */\n        /**\n         * The dash style of the median.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.medianDashStyle\n         */\n        /**\n         * The dash style of the stem.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.stemDashStyle\n         */\n        /**\n         * The dash style of the whiskers.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.whiskerDashStyle\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BoxPlotSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/BoxPlot/BoxPlotSeries.js', [_modules['Series/BoxPlot/BoxPlotSeriesDefaults.js'], _modules['Series/Column/ColumnSeries.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BoxPlotSeriesDefaults, ColumnSeries, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { extend, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The boxplot series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes#boxplot\n         *\n         * @augments Highcharts.Series\n         */\n        class BoxPlotSeries extends ColumnSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            // Get presentational attributes\n            pointAttribs() {\n                // No attributes should be set on point.graphic which is the group\n                return {};\n            }\n            // Translate data points from raw values x and y to plotX and plotY\n            translate() {\n                const series = this, yAxis = series.yAxis, pointArrayMap = series.pointArrayMap;\n                super.translate.apply(series);\n                // do the translation on each point dimension\n                series.points.forEach(function (point) {\n                    pointArrayMap.forEach(function (key) {\n                        if (point[key] !== null) {\n                            point[key + 'Plot'] = yAxis.translate(point[key], 0, 1, 0, 1);\n                        }\n                    });\n                    point.plotHigh = point.highPlot; // For data label validation\n                });\n            }\n            /**\n             * Draw the data points\n             * @private\n             */\n            drawPoints() {\n                const series = this, points = series.points, options = series.options, chart = series.chart, renderer = chart.renderer, \n                // error bar inherits this series type but doesn't do quartiles\n                doQuartiles = series.doQuartiles !== false, whiskerLength = series.options.whiskerLength;\n                let q1Plot, q3Plot, highPlot, lowPlot, medianPlot, medianPath, crispCorr, crispX = 0, boxPath, graphic, width, left, right, halfWidth, pointWiskerLength;\n                for (const point of points) {\n                    graphic = point.graphic;\n                    const verb = graphic ? 'animate' : 'attr', shapeArgs = point.shapeArgs, boxAttr = {}, stemAttr = {}, whiskersAttr = {}, medianAttr = {}, color = point.color || series.color;\n                    if (typeof point.plotY !== 'undefined') {\n                        // crisp vector coordinates\n                        width = Math.round(shapeArgs.width);\n                        left = Math.floor(shapeArgs.x);\n                        right = left + width;\n                        halfWidth = Math.round(width / 2);\n                        q1Plot = Math.floor(doQuartiles ? point.q1Plot : point.lowPlot);\n                        q3Plot = Math.floor(doQuartiles ? point.q3Plot : point.lowPlot);\n                        highPlot = Math.floor(point.highPlot);\n                        lowPlot = Math.floor(point.lowPlot);\n                        if (!graphic) {\n                            point.graphic = graphic = renderer.g('point')\n                                .add(series.group);\n                            point.stem = renderer.path()\n                                .addClass('highcharts-boxplot-stem')\n                                .add(graphic);\n                            if (whiskerLength) {\n                                point.whiskers = renderer.path()\n                                    .addClass('highcharts-boxplot-whisker')\n                                    .add(graphic);\n                            }\n                            if (doQuartiles) {\n                                point.box = renderer.path(boxPath)\n                                    .addClass('highcharts-boxplot-box')\n                                    .add(graphic);\n                            }\n                            point.medianShape = renderer.path(medianPath)\n                                .addClass('highcharts-boxplot-median')\n                                .add(graphic);\n                        }\n                        if (!chart.styledMode) {\n                            // Stem attributes\n                            stemAttr.stroke =\n                                point.stemColor || options.stemColor || color;\n                            stemAttr['stroke-width'] = pick(point.stemWidth, options.stemWidth, options.lineWidth);\n                            stemAttr.dashstyle = (point.stemDashStyle ||\n                                options.stemDashStyle ||\n                                options.dashStyle);\n                            point.stem.attr(stemAttr);\n                            // Whiskers attributes\n                            if (whiskerLength) {\n                                whiskersAttr.stroke = (point.whiskerColor ||\n                                    options.whiskerColor ||\n                                    color);\n                                whiskersAttr['stroke-width'] = pick(point.whiskerWidth, options.whiskerWidth, options.lineWidth);\n                                whiskersAttr.dashstyle = (point.whiskerDashStyle ||\n                                    options.whiskerDashStyle ||\n                                    options.dashStyle);\n                                point.whiskers.attr(whiskersAttr);\n                            }\n                            if (doQuartiles) {\n                                boxAttr.fill = (point.fillColor ||\n                                    options.fillColor ||\n                                    color);\n                                boxAttr.stroke = options.lineColor || color;\n                                boxAttr['stroke-width'] = options.lineWidth || 0;\n                                boxAttr.dashstyle = (point.boxDashStyle ||\n                                    options.boxDashStyle ||\n                                    options.dashStyle);\n                                point.box.attr(boxAttr);\n                            }\n                            // Median attributes\n                            medianAttr.stroke = (point.medianColor ||\n                                options.medianColor ||\n                                color);\n                            medianAttr['stroke-width'] = pick(point.medianWidth, options.medianWidth, options.lineWidth);\n                            medianAttr.dashstyle = (point.medianDashStyle ||\n                                options.medianDashStyle ||\n                                options.dashStyle);\n                            point.medianShape.attr(medianAttr);\n                        }\n                        let d;\n                        // The stem\n                        crispCorr = (point.stem.strokeWidth() % 2) / 2;\n                        crispX = left + halfWidth + crispCorr;\n                        d = [\n                            // stem up\n                            ['M', crispX, q3Plot],\n                            ['L', crispX, highPlot],\n                            // stem down\n                            ['M', crispX, q1Plot],\n                            ['L', crispX, lowPlot]\n                        ];\n                        point.stem[verb]({ d });\n                        // The box\n                        if (doQuartiles) {\n                            crispCorr = (point.box.strokeWidth() % 2) / 2;\n                            q1Plot = Math.floor(q1Plot) + crispCorr;\n                            q3Plot = Math.floor(q3Plot) + crispCorr;\n                            left += crispCorr;\n                            right += crispCorr;\n                            d = [\n                                ['M', left, q3Plot],\n                                ['L', left, q1Plot],\n                                ['L', right, q1Plot],\n                                ['L', right, q3Plot],\n                                ['L', left, q3Plot],\n                                ['Z']\n                            ];\n                            point.box[verb]({ d });\n                        }\n                        // The whiskers\n                        if (whiskerLength) {\n                            crispCorr = (point.whiskers.strokeWidth() % 2) / 2;\n                            highPlot = highPlot + crispCorr;\n                            lowPlot = lowPlot + crispCorr;\n                            pointWiskerLength = (/%$/).test(whiskerLength) ?\n                                halfWidth * parseFloat(whiskerLength) / 100 :\n                                whiskerLength / 2;\n                            d = [\n                                // High whisker\n                                ['M', crispX - pointWiskerLength, highPlot],\n                                ['L', crispX + pointWiskerLength, highPlot],\n                                // Low whisker\n                                ['M', crispX - pointWiskerLength, lowPlot],\n                                ['L', crispX + pointWiskerLength, lowPlot]\n                            ];\n                            point.whiskers[verb]({ d });\n                        }\n                        // The median\n                        medianPlot = Math.round(point.medianPlot);\n                        crispCorr = (point.medianShape.strokeWidth() % 2) / 2;\n                        medianPlot = medianPlot + crispCorr;\n                        d = [\n                            ['M', left, medianPlot],\n                            ['L', right, medianPlot]\n                        ];\n                        point.medianShape[verb]({ d });\n                    }\n                }\n            }\n            // return a plain array for speedy calculation\n            toYData(point) {\n                return [point.low, point.q1, point.median, point.q3, point.high];\n            }\n        }\n        BoxPlotSeries.defaultOptions = merge(ColumnSeries.defaultOptions, BoxPlotSeriesDefaults);\n        extend(BoxPlotSeries.prototype, {\n            // array point configs are mapped to this\n            pointArrayMap: ['low', 'q1', 'median', 'q3', 'high'],\n            // defines the top of the tracker\n            pointValKey: 'high',\n            // Disable data labels for box plot\n            drawDataLabels: noop,\n            setStackedPoints: noop // #3890\n        });\n        SeriesRegistry.registerSeriesType('boxplot', BoxPlotSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BoxPlotSeries;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleLegendDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Highsoft AS\n         *\n         *  Author: Paweł Potaczek\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The bubble legend is an additional element in legend which\n         * presents the scale of the bubble series. Individual bubble ranges\n         * can be defined by user or calculated from series. In the case of\n         * automatically calculated ranges, a 1px margin of error is\n         * permitted.\n         *\n         * @since        7.0.0\n         * @product      highcharts highstock highmaps\n         * @requires     highcharts-more\n         * @optionparent legend.bubbleLegend\n         */\n        const BubbleLegendDefaults = {\n            /**\n             * The color of the ranges borders, can be also defined for an\n             * individual range.\n             *\n             * @sample highcharts/bubble-legend/similartoseries/\n             *         Similar look to the bubble series\n             * @sample highcharts/bubble-legend/bordercolor/\n             *         Individual bubble border color\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: void 0,\n            /**\n             * The width of the ranges borders in pixels, can be also\n             * defined for an individual range.\n             */\n            borderWidth: 2,\n            /**\n             * An additional class name to apply to the bubble legend'\n             * circle graphical elements. This option does not replace\n             * default class names of the graphical element.\n             *\n             * @sample {highcharts} highcharts/css/bubble-legend/\n             *         Styling by CSS\n             *\n             * @type {string}\n             */\n            className: void 0,\n            /**\n             * The main color of the bubble legend. Applies to ranges, if\n             * individual color is not defined.\n             *\n             * @sample highcharts/bubble-legend/similartoseries/\n             *         Similar look to the bubble series\n             * @sample highcharts/bubble-legend/color/\n             *         Individual bubble color\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            color: void 0,\n            /**\n             * An additional class name to apply to the bubble legend's\n             * connector graphical elements. This option does not replace\n             * default class names of the graphical element.\n             *\n             * @sample {highcharts} highcharts/css/bubble-legend/\n             *         Styling by CSS\n             *\n             * @type {string}\n             */\n            connectorClassName: void 0,\n            /**\n             * The color of the connector, can be also defined\n             * for an individual range.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            connectorColor: void 0,\n            /**\n             * The length of the connectors in pixels. If labels are\n             * centered, the distance is reduced to 0.\n             *\n             * @sample highcharts/bubble-legend/connectorandlabels/\n             *         Increased connector length\n             */\n            connectorDistance: 60,\n            /**\n             * The width of the connectors in pixels.\n             *\n             * @sample highcharts/bubble-legend/connectorandlabels/\n             *         Increased connector width\n             */\n            connectorWidth: 1,\n            /**\n             * Enable or disable the bubble legend.\n             */\n            enabled: false,\n            /**\n             * Options for the bubble legend labels.\n             */\n            labels: {\n                /**\n                 * An additional class name to apply to the bubble legend\n                 * label graphical elements. This option does not replace\n                 * default class names of the graphical element.\n                 *\n                 * @sample {highcharts} highcharts/css/bubble-legend/\n                 *         Styling by CSS\n                 *\n                 * @type {string}\n                 */\n                className: void 0,\n                /**\n                 * Whether to allow data labels to overlap.\n                 */\n                allowOverlap: false,\n                /**\n                 * A format string for the bubble legend labels. Available\n                 * variables are the same as for `formatter`.\n                 *\n                 * @sample highcharts/bubble-legend/format/\n                 *         Add a unit\n                 *\n                 * @type {string}\n                 */\n                format: '',\n                /**\n                 * Available `this` properties are:\n                 *\n                 * - `this.value`: The bubble value.\n                 *\n                 * - `this.radius`: The radius of the bubble range.\n                 *\n                 * - `this.center`: The center y position of the range.\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Highcharts.BubbleLegendFormatterContextObject>}\n                 */\n                formatter: void 0,\n                /**\n                 * The alignment of the labels compared to the bubble\n                 * legend. Can be one of `left`, `center` or `right`.\n                 *\n                 * @sample highcharts/bubble-legend/connectorandlabels/\n                 *         Labels on left\n                 *\n                 * @type {Highcharts.AlignValue}\n                 */\n                align: 'right',\n                /**\n                 * CSS styles for the labels.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @ignore-option */\n                    fontSize: '0.9em',\n                    /** @ignore-option */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * The x position offset of the label relative to the\n                 * connector.\n                 */\n                x: 0,\n                /**\n                 * The y position offset of the label relative to the\n                 * connector.\n                 */\n                y: 0\n            },\n            /**\n             * Miximum bubble legend range size. If values for ranges are\n             * not specified, the `minSize` and the `maxSize` are calculated\n             * from bubble series.\n             */\n            maxSize: 60,\n            /**\n             * Minimum bubble legend range size. If values for ranges are\n             * not specified, the `minSize` and the `maxSize` are calculated\n             * from bubble series.\n             */\n            minSize: 10,\n            /**\n             * The position of the bubble legend in the legend.\n             * @sample highcharts/bubble-legend/connectorandlabels/\n             *         Bubble legend as last item in legend\n             */\n            legendIndex: 0,\n            /**\n             * Options for specific range. One range consists of bubble,\n             * label and connector.\n             *\n             * @sample highcharts/bubble-legend/ranges/\n             *         Manually defined ranges\n             * @sample highcharts/bubble-legend/autoranges/\n             *         Auto calculated ranges\n             *\n             * @type {Array<*>}\n             */\n            ranges: {\n                /**\n                 * Range size value, similar to bubble Z data.\n                 * @type {number}\n                 */\n                value: void 0,\n                /**\n                 * The color of the border for individual range.\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: void 0,\n                /**\n                 * The color of the bubble for individual range.\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                color: void 0,\n                /**\n                 * The color of the connector for individual range.\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                connectorColor: void 0\n            },\n            /**\n             * Whether the bubble legend range value should be represented\n             * by the area or the width of the bubble. The default, area,\n             * corresponds best to the human perception of the size of each\n             * bubble.\n             *\n             * @sample highcharts/bubble-legend/ranges/\n             *         Size by width\n             *\n             * @type {Highcharts.BubbleSizeByValue}\n             */\n            sizeBy: 'area',\n            /**\n             * When this is true, the absolute value of z determines the\n             * size of the bubble. This means that with the default\n             * zThreshold of 0, a bubble of value -1 will have the same size\n             * as a bubble of value 1, while a bubble of value 0 will have a\n             * smaller size according to minSize.\n             */\n            sizeByAbsoluteValue: false,\n            /**\n             * Define the visual z index of the bubble legend.\n             */\n            zIndex: 1,\n            /**\n             * Ranges with with lower value than zThreshold, are skipped.\n             */\n            zThreshold: 0\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BubbleLegendDefaults;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleLegendItem.js', [_modules['Core/Color/Color.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Color, F, H, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Highsoft AS\n         *\n         *  Author: Paweł Potaczek\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { noop } = H;\n        const { arrayMax, arrayMin, isNumber, merge, pick, stableSort } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * BubbleLegend class.\n         *\n         * @private\n         * @class\n         * @name Highcharts.BubbleLegend\n         * @param {Highcharts.LegendBubbleLegendOptions} options\n         * Options of BubbleLegendItem.\n         *\n         * @param {Highcharts.Legend} legend\n         * Legend of item.\n         */\n        class BubbleLegendItem {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options, legend) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.chart = void 0;\n                this.legend = void 0;\n                this.maxLabel = void 0;\n                this.movementX = void 0;\n                this.ranges = void 0;\n                this.selected = void 0;\n                this.visible = void 0;\n                this.symbols = void 0;\n                this.options = void 0;\n                this.setState = noop;\n                this.init(options, legend);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create basic bubbleLegend properties similar to item in legend.\n             * @private\n             */\n            init(options, legend) {\n                this.options = options;\n                this.visible = true;\n                this.chart = legend.chart;\n                this.legend = legend;\n            }\n            /**\n             * Depending on the position option, add bubbleLegend to legend items.\n             *\n             * @private\n             *\n             * @param {Array<(Highcharts.Point|Highcharts.Series)>} items\n             *        All legend items\n             */\n            addToLegend(items) {\n                // Insert bubbleLegend into legend items\n                items.splice(this.options.legendIndex, 0, this);\n            }\n            /**\n             * Calculate ranges, sizes and call the next steps of bubbleLegend\n             * creation.\n             *\n             * @private\n             *\n             * @param {Highcharts.Legend} legend\n             *        Legend instance\n             */\n            drawLegendSymbol(legend) {\n                const chart = this.chart, itemDistance = pick(legend.options.itemDistance, 20), legendItem = this.legendItem || {}, options = this.options, ranges = options.ranges, connectorDistance = options.connectorDistance;\n                let connectorSpace;\n                // Do not create bubbleLegend now if ranges or ranges valeus are not\n                // specified or if are empty array.\n                if (!ranges || !ranges.length || !isNumber(ranges[0].value)) {\n                    legend.options.bubbleLegend.autoRanges = true;\n                    return;\n                }\n                // Sort ranges to right render order\n                stableSort(ranges, function (a, b) {\n                    return b.value - a.value;\n                });\n                this.ranges = ranges;\n                this.setOptions();\n                this.render();\n                // Get max label size\n                const maxLabel = this.getMaxLabelSize(), radius = this.ranges[0].radius, size = radius * 2;\n                // Space for connectors and labels.\n                connectorSpace =\n                    connectorDistance - radius + maxLabel.width;\n                connectorSpace = connectorSpace > 0 ? connectorSpace : 0;\n                this.maxLabel = maxLabel;\n                this.movementX = options.labels.align === 'left' ?\n                    connectorSpace : 0;\n                legendItem.labelWidth = size + connectorSpace + itemDistance;\n                legendItem.labelHeight = size + maxLabel.height / 2;\n            }\n            /**\n             * Set style options for each bubbleLegend range.\n             * @private\n             */\n            setOptions() {\n                const ranges = this.ranges, options = this.options, series = this.chart.series[options.seriesIndex], baseline = this.legend.baseline, bubbleAttribs = {\n                    zIndex: options.zIndex,\n                    'stroke-width': options.borderWidth\n                }, connectorAttribs = {\n                    zIndex: options.zIndex,\n                    'stroke-width': options.connectorWidth\n                }, labelAttribs = {\n                    align: (this.legend.options.rtl ||\n                        options.labels.align === 'left') ? 'right' : 'left',\n                    zIndex: options.zIndex\n                }, fillOpacity = series.options.marker.fillOpacity, styledMode = this.chart.styledMode;\n                // Allow to parts of styles be used individually for range\n                ranges.forEach(function (range, i) {\n                    if (!styledMode) {\n                        bubbleAttribs.stroke = pick(range.borderColor, options.borderColor, series.color);\n                        bubbleAttribs.fill = pick(range.color, options.color, fillOpacity !== 1 ?\n                            color(series.color).setOpacity(fillOpacity)\n                                .get('rgba') :\n                            series.color);\n                        connectorAttribs.stroke = pick(range.connectorColor, options.connectorColor, series.color);\n                    }\n                    // Set options needed for rendering each range\n                    ranges[i].radius = this.getRangeRadius(range.value);\n                    ranges[i] = merge(ranges[i], {\n                        center: (ranges[0].radius - ranges[i].radius +\n                            baseline)\n                    });\n                    if (!styledMode) {\n                        merge(true, ranges[i], {\n                            bubbleAttribs: merge(bubbleAttribs),\n                            connectorAttribs: merge(connectorAttribs),\n                            labelAttribs: labelAttribs\n                        });\n                    }\n                }, this);\n            }\n            /**\n             * Calculate radius for each bubble range,\n             * used code from BubbleSeries.js 'getRadius' method.\n             *\n             * @private\n             *\n             * @param {number} value\n             *        Range value\n             *\n             * @return {number|null}\n             *         Radius for one range\n             */\n            getRangeRadius(value) {\n                const options = this.options, seriesIndex = this.options.seriesIndex, bubbleSeries = this.chart.series[seriesIndex], zMax = options.ranges[0].value, zMin = options.ranges[options.ranges.length - 1].value, minSize = options.minSize, maxSize = options.maxSize;\n                return bubbleSeries.getRadius.call(this, zMin, zMax, minSize, maxSize, value);\n            }\n            /**\n             * Render the legendItem group.\n             * @private\n             */\n            render() {\n                const legendItem = this.legendItem || {}, renderer = this.chart.renderer, zThreshold = this.options.zThreshold;\n                if (!this.symbols) {\n                    this.symbols = {\n                        connectors: [],\n                        bubbleItems: [],\n                        labels: []\n                    };\n                }\n                // Nesting SVG groups to enable handleOverflow\n                legendItem.symbol = renderer.g('bubble-legend');\n                legendItem.label = renderer.g('bubble-legend-item')\n                    .css(this.legend.itemStyle || {});\n                // To enable default 'hideOverlappingLabels' method\n                legendItem.symbol.translateX = 0;\n                legendItem.symbol.translateY = 0;\n                // To use handleOverflow method\n                legendItem.symbol.add(legendItem.label);\n                legendItem.label.add(legendItem.group);\n                for (const range of this.ranges) {\n                    if (range.value >= zThreshold) {\n                        this.renderRange(range);\n                    }\n                }\n                this.hideOverlappingLabels();\n            }\n            /**\n             * Render one range, consisting of bubble symbol, connector and label.\n             *\n             * @private\n             *\n             * @param {Highcharts.LegendBubbleLegendRangesOptions} range\n             *        Range options\n             */\n            renderRange(range) {\n                const mainRange = this.ranges[0], legend = this.legend, options = this.options, labelsOptions = options.labels, chart = this.chart, bubbleSeries = chart.series[options.seriesIndex], renderer = chart.renderer, symbols = this.symbols, labels = symbols.labels, elementCenter = range.center, absoluteRadius = Math.abs(range.radius), connectorDistance = options.connectorDistance || 0, labelsAlign = labelsOptions.align, rtl = legend.options.rtl, borderWidth = options.borderWidth, connectorWidth = options.connectorWidth, posX = mainRange.radius || 0, posY = elementCenter - absoluteRadius -\n                    borderWidth / 2 + connectorWidth / 2, crispMovement = (posY % 1 ? 1 : 0.5) -\n                    (connectorWidth % 2 ? 0 : 0.5), styledMode = renderer.styledMode;\n                let connectorLength = rtl || labelsAlign === 'left' ?\n                    -connectorDistance : connectorDistance;\n                // Set options for centered labels\n                if (labelsAlign === 'center') {\n                    connectorLength = 0; // do not use connector\n                    options.connectorDistance = 0;\n                    range.labelAttribs.align = 'center';\n                }\n                // Render bubble symbol\n                symbols.bubbleItems.push(renderer\n                    .circle(posX, elementCenter + crispMovement, absoluteRadius)\n                    .attr(styledMode ? {} : range.bubbleAttribs)\n                    .addClass((styledMode ?\n                    'highcharts-color-' +\n                        bubbleSeries.colorIndex + ' ' :\n                    '') +\n                    'highcharts-bubble-legend-symbol ' +\n                    (options.className || '')).add(this.legendItem.symbol));\n                // Render connector\n                symbols.connectors.push(renderer\n                    .path(renderer.crispLine([\n                    ['M', posX, posY],\n                    ['L', posX + connectorLength, posY]\n                ], options.connectorWidth))\n                    .attr((styledMode ? {} : range.connectorAttribs))\n                    .addClass((styledMode ?\n                    'highcharts-color-' +\n                        this.options.seriesIndex + ' ' : '') +\n                    'highcharts-bubble-legend-connectors ' +\n                    (options.connectorClassName || '')).add(this.legendItem.symbol));\n                // Render label\n                const label = renderer\n                    .text(this.formatLabel(range))\n                    .attr((styledMode ? {} : range.labelAttribs))\n                    .css(styledMode ? {} : labelsOptions.style)\n                    .addClass('highcharts-bubble-legend-labels ' +\n                    (options.labels.className || '')).add(this.legendItem.symbol);\n                // Now that the label is added we can read the bounding box and\n                // vertically align\n                const position = {\n                    x: posX + connectorLength + options.labels.x,\n                    y: posY + options.labels.y + label.getBBox().height * 0.4\n                };\n                label.attr(position);\n                labels.push(label);\n                // To enable default 'hideOverlappingLabels' method\n                label.placed = true;\n                label.alignAttr = position;\n            }\n            /**\n             * Get the label which takes up the most space.\n             * @private\n             */\n            getMaxLabelSize() {\n                const labels = this.symbols.labels;\n                let maxLabel, labelSize;\n                labels.forEach(function (label) {\n                    labelSize = label.getBBox(true);\n                    if (maxLabel) {\n                        maxLabel = labelSize.width > maxLabel.width ?\n                            labelSize : maxLabel;\n                    }\n                    else {\n                        maxLabel = labelSize;\n                    }\n                });\n                return maxLabel || {};\n            }\n            /**\n             * Get formatted label for range.\n             *\n             * @private\n             *\n             * @param {Highcharts.LegendBubbleLegendRangesOptions} range\n             *        Range options\n             *\n             * @return {string}\n             *         Range label text\n             */\n            formatLabel(range) {\n                const options = this.options, formatter = options.labels.formatter, format = options.labels.format;\n                const { numberFormatter } = this.chart;\n                return format ? F.format(format, range) :\n                    formatter ? formatter.call(range) :\n                        numberFormatter(range.value, 1);\n            }\n            /**\n             * By using default chart 'hideOverlappingLabels' method, hide or show\n             * labels and connectors.\n             * @private\n             */\n            hideOverlappingLabels() {\n                const chart = this.chart, allowOverlap = this.options.labels.allowOverlap, symbols = this.symbols;\n                if (!allowOverlap && symbols) {\n                    chart.hideOverlappingLabels(symbols.labels);\n                    // Hide or show connectors\n                    symbols.labels.forEach(function (label, index) {\n                        if (!label.newOpacity) {\n                            symbols.connectors[index].hide();\n                        }\n                        else if (label.newOpacity !== label.oldOpacity) {\n                            symbols.connectors[index].show();\n                        }\n                    });\n                }\n            }\n            /**\n             * Calculate ranges from created series.\n             *\n             * @private\n             *\n             * @return {Array<Highcharts.LegendBubbleLegendRangesOptions>}\n             *         Array of range objects\n             */\n            getRanges() {\n                const bubbleLegend = this.legend.bubbleLegend, series = bubbleLegend.chart.series, rangesOptions = bubbleLegend.options.ranges;\n                let ranges, zData, minZ = Number.MAX_VALUE, maxZ = -Number.MAX_VALUE;\n                series.forEach(function (s) {\n                    // Find the min and max Z, like in bubble series\n                    if (s.isBubble && !s.ignoreSeries) {\n                        zData = s.zData.filter(isNumber);\n                        if (zData.length) {\n                            minZ = pick(s.options.zMin, Math.min(minZ, Math.max(arrayMin(zData), s.options.displayNegative === false ?\n                                s.options.zThreshold :\n                                -Number.MAX_VALUE)));\n                            maxZ = pick(s.options.zMax, Math.max(maxZ, arrayMax(zData)));\n                        }\n                    }\n                });\n                // Set values for ranges\n                if (minZ === maxZ) {\n                    // Only one range if min and max values are the same.\n                    ranges = [{ value: maxZ }];\n                }\n                else {\n                    ranges = [\n                        { value: minZ },\n                        { value: (minZ + maxZ) / 2 },\n                        { value: maxZ, autoRanges: true }\n                    ];\n                }\n                // Prevent reverse order of ranges after redraw\n                if (rangesOptions.length && rangesOptions[0].radius) {\n                    ranges.reverse();\n                }\n                // Merge ranges values with user options\n                ranges.forEach(function (range, i) {\n                    if (rangesOptions && rangesOptions[i]) {\n                        ranges[i] = merge(rangesOptions[i], range);\n                    }\n                });\n                return ranges;\n            }\n            /**\n             * Calculate bubble legend sizes from rendered series.\n             *\n             * @private\n             *\n             * @return {Array<number,number>}\n             *         Calculated min and max bubble sizes\n             */\n            predictBubbleSizes() {\n                const chart = this.chart, legendOptions = chart.legend.options, floating = legendOptions.floating, horizontal = legendOptions.layout === 'horizontal', lastLineHeight = horizontal ? chart.legend.lastLineHeight : 0, plotSizeX = chart.plotSizeX, plotSizeY = chart.plotSizeY, bubbleSeries = chart.series[this.options.seriesIndex], pxSizes = bubbleSeries.getPxExtremes(), minSize = Math.ceil(pxSizes.minPxSize), maxPxSize = Math.ceil(pxSizes.maxPxSize), plotSize = Math.min(plotSizeY, plotSizeX);\n                let calculatedSize, maxSize = bubbleSeries.options.maxSize;\n                // Calculate prediceted max size of bubble\n                if (floating || !(/%$/.test(maxSize))) {\n                    calculatedSize = maxPxSize;\n                }\n                else {\n                    maxSize = parseFloat(maxSize);\n                    calculatedSize = ((plotSize + lastLineHeight) * maxSize / 100) /\n                        (maxSize / 100 + 1);\n                    // Get maxPxSize from bubble series if calculated bubble legend\n                    // size will not affect to bubbles series.\n                    if ((horizontal && plotSizeY - calculatedSize >=\n                        plotSizeX) || (!horizontal && plotSizeX -\n                        calculatedSize >= plotSizeY)) {\n                        calculatedSize = maxPxSize;\n                    }\n                }\n                return [minSize, Math.ceil(calculatedSize)];\n            }\n            /**\n             * Correct ranges with calculated sizes.\n             * @private\n             */\n            updateRanges(min, max) {\n                const bubbleLegendOptions = this.legend.options.bubbleLegend;\n                bubbleLegendOptions.minSize = min;\n                bubbleLegendOptions.maxSize = max;\n                bubbleLegendOptions.ranges = this.getRanges();\n            }\n            /**\n             * Because of the possibility of creating another legend line, predicted\n             * bubble legend sizes may differ by a few pixels, so it is necessary to\n             * correct them.\n             * @private\n             */\n            correctSizes() {\n                const legend = this.legend, chart = this.chart, bubbleSeries = chart.series[this.options.seriesIndex], pxSizes = bubbleSeries.getPxExtremes(), bubbleSeriesSize = pxSizes.maxPxSize, bubbleLegendSize = this.options.maxSize;\n                if (Math.abs(Math.ceil(bubbleSeriesSize) - bubbleLegendSize) >\n                    1) {\n                    this.updateRanges(this.options.minSize, pxSizes.maxPxSize);\n                    legend.render();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @interface Highcharts.BubbleLegendFormatterContextObject\n         */ /**\n        * The center y position of the range.\n        * @name Highcharts.BubbleLegendFormatterContextObject#center\n        * @type {number}\n        */ /**\n        * The radius of the bubble range.\n        * @name Highcharts.BubbleLegendFormatterContextObject#radius\n        * @type {number}\n        */ /**\n        * The bubble value.\n        * @name Highcharts.BubbleLegendFormatterContextObject#value\n        * @type {number}\n        */\n        ''; // detach doclets above\n\n        return BubbleLegendItem;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleLegendComposition.js', [_modules['Series/Bubble/BubbleLegendDefaults.js'], _modules['Series/Bubble/BubbleLegendItem.js'], _modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (BubbleLegendDefaults, BubbleLegendItem, D, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Highsoft AS\n         *\n         *  Author: Paweł Potaczek\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { addEvent, objectEach, wrap } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * If ranges are not specified, determine ranges from rendered bubble series\n         * and render legend again.\n         */\n        function chartDrawChartBox(proceed, options, callback) {\n            const chart = this, legend = chart.legend, bubbleSeries = getVisibleBubbleSeriesIndex(chart) >= 0;\n            let bubbleLegendOptions, bubbleSizes, legendItem;\n            if (legend && legend.options.enabled && legend.bubbleLegend &&\n                legend.options.bubbleLegend.autoRanges && bubbleSeries) {\n                bubbleLegendOptions = legend.bubbleLegend.options;\n                bubbleSizes = legend.bubbleLegend.predictBubbleSizes();\n                legend.bubbleLegend.updateRanges(bubbleSizes[0], bubbleSizes[1]);\n                // Disable animation on init\n                if (!bubbleLegendOptions.placed) {\n                    legend.group.placed = false;\n                    legend.allItems.forEach((item) => {\n                        legendItem = item.legendItem || {};\n                        if (legendItem.group) {\n                            legendItem.group.translateY = void 0;\n                        }\n                    });\n                }\n                // Create legend with bubbleLegend\n                legend.render();\n                chart.getMargins();\n                chart.axes.forEach(function (axis) {\n                    if (axis.visible) { // #11448\n                        axis.render();\n                    }\n                    if (!bubbleLegendOptions.placed) {\n                        axis.setScale();\n                        axis.updateNames();\n                        // Disable axis animation on init\n                        objectEach(axis.ticks, function (tick) {\n                            tick.isNew = true;\n                            tick.isNewLabel = true;\n                        });\n                    }\n                });\n                bubbleLegendOptions.placed = true;\n                // After recalculate axes, calculate margins again.\n                chart.getMargins();\n                // Call default 'drawChartBox' method.\n                proceed.call(chart, options, callback);\n                // Check bubble legend sizes and correct them if necessary.\n                legend.bubbleLegend.correctSizes();\n                // Correct items positions with different dimensions in legend.\n                retranslateItems(legend, getLinesHeights(legend));\n            }\n            else {\n                proceed.call(chart, options, callback);\n                // Allow color change on static bubble legend after click on legend\n                if (legend && legend.options.enabled && legend.bubbleLegend) {\n                    legend.render();\n                    retranslateItems(legend, getLinesHeights(legend));\n                }\n            }\n        }\n        /**\n         * Compose classes for use with Bubble series.\n         * @private\n         *\n         * @param {Highcharts.Chart} ChartClass\n         * Core chart class to use with Bubble series.\n         *\n         * @param {Highcharts.Legend} LegendClass\n         * Core legend class to use with Bubble series.\n         *\n         * @param {Highcharts.Series} SeriesClass\n         * Core series class to use with Bubble series.\n         */\n        function compose(ChartClass, LegendClass, SeriesClass) {\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                setOptions({\n                    // Set default bubble legend options\n                    legend: {\n                        bubbleLegend: BubbleLegendDefaults\n                    }\n                });\n                wrap(ChartClass.prototype, 'drawChartBox', chartDrawChartBox);\n            }\n            if (U.pushUnique(composedMembers, LegendClass)) {\n                addEvent(LegendClass, 'afterGetAllItems', onLegendAfterGetAllItems);\n            }\n            if (U.pushUnique(composedMembers, SeriesClass)) {\n                addEvent(SeriesClass, 'legendItemClick', onSeriesLegendItemClick);\n            }\n        }\n        /**\n         * Check if there is at least one visible bubble series.\n         *\n         * @private\n         * @function getVisibleBubbleSeriesIndex\n         * @param {Highcharts.Chart} chart\n         * Chart to check.\n         * @return {number}\n         * First visible bubble series index\n         */\n        function getVisibleBubbleSeriesIndex(chart) {\n            const series = chart.series;\n            let i = 0;\n            while (i < series.length) {\n                if (series[i] &&\n                    series[i].isBubble &&\n                    series[i].visible &&\n                    series[i].zData.length) {\n                    return i;\n                }\n                i++;\n            }\n            return -1;\n        }\n        /**\n         * Calculate height for each row in legend.\n         *\n         * @private\n         * @function getLinesHeights\n         *\n         * @param {Highcharts.Legend} legend\n         * Legend to calculate from.\n         *\n         * @return {Array<Highcharts.Dictionary<number>>}\n         * Informations about line height and items amount\n         */\n        function getLinesHeights(legend) {\n            const items = legend.allItems, lines = [], length = items.length;\n            let lastLine, legendItem, legendItem2, i = 0, j = 0;\n            for (i = 0; i < length; i++) {\n                legendItem = items[i].legendItem || {};\n                legendItem2 = (items[i + 1] || {}).legendItem || {};\n                if (legendItem.labelHeight) {\n                    // for bubbleLegend\n                    items[i].itemHeight = legendItem.labelHeight;\n                }\n                if ( // Line break\n                items[i] === items[length - 1] ||\n                    legendItem.y !== legendItem2.y) {\n                    lines.push({ height: 0 });\n                    lastLine = lines[lines.length - 1];\n                    // Find the highest item in line\n                    for (j; j <= i; j++) {\n                        if (items[j].itemHeight > lastLine.height) {\n                            lastLine.height = items[j].itemHeight;\n                        }\n                    }\n                    lastLine.step = i;\n                }\n            }\n            return lines;\n        }\n        /**\n         * Start the bubble legend creation process.\n         */\n        function onLegendAfterGetAllItems(e) {\n            const legend = this, bubbleLegend = legend.bubbleLegend, legendOptions = legend.options, options = legendOptions.bubbleLegend, bubbleSeriesIndex = getVisibleBubbleSeriesIndex(legend.chart);\n            // Remove unnecessary element\n            if (bubbleLegend && bubbleLegend.ranges && bubbleLegend.ranges.length) {\n                // Allow change the way of calculating ranges in update\n                if (options.ranges.length) {\n                    options.autoRanges =\n                        !!options.ranges[0].autoRanges;\n                }\n                // Update bubbleLegend dimensions in each redraw\n                legend.destroyItem(bubbleLegend);\n            }\n            // Create bubble legend\n            if (bubbleSeriesIndex >= 0 &&\n                legendOptions.enabled &&\n                options.enabled) {\n                options.seriesIndex = bubbleSeriesIndex;\n                legend.bubbleLegend = new BubbleLegendItem(options, legend);\n                legend.bubbleLegend.addToLegend(e.allItems);\n            }\n        }\n        /**\n         * Toggle bubble legend depending on the visible status of bubble series.\n         */\n        function onSeriesLegendItemClick(e) {\n            // #14080 don't fire this code if click function is prevented\n            if (e.defaultPrevented) {\n                return false;\n            }\n            const series = this, chart = series.chart, visible = series.visible, legend = series.chart.legend;\n            let status;\n            if (legend && legend.bubbleLegend) {\n                // Temporary correct 'visible' property\n                series.visible = !visible;\n                // Save future status for getRanges method\n                series.ignoreSeries = visible;\n                // Check if at lest one bubble series is visible\n                status = getVisibleBubbleSeriesIndex(chart) >= 0;\n                // Hide bubble legend if all bubble series are disabled\n                if (legend.bubbleLegend.visible !== status) {\n                    // Show or hide bubble legend\n                    legend.update({\n                        bubbleLegend: { enabled: status }\n                    });\n                    legend.bubbleLegend.visible = status; // Restore default status\n                }\n                series.visible = visible;\n            }\n        }\n        /**\n         * Correct legend items translation in case of different elements heights.\n         *\n         * @private\n         * @function Highcharts.Legend#retranslateItems\n         *\n         * @param {Highcharts.Legend} legend\n         * Legend to translate in.\n         *\n         * @param {Array<Highcharts.Dictionary<number>>} lines\n         * Informations about line height and items amount\n         */\n        function retranslateItems(legend, lines) {\n            const items = legend.allItems, rtl = legend.options.rtl;\n            let orgTranslateX, orgTranslateY, movementX, legendItem, actualLine = 0;\n            items.forEach((item, index) => {\n                legendItem = item.legendItem || {};\n                if (!legendItem.group) {\n                    return;\n                }\n                orgTranslateX = legendItem.group.translateX || 0;\n                orgTranslateY = legendItem.y || 0;\n                movementX = item.movementX;\n                if (movementX || (rtl && item.ranges)) {\n                    movementX = rtl ?\n                        orgTranslateX - item.options.maxSize / 2 :\n                        orgTranslateX + movementX;\n                    legendItem.group.attr({ translateX: movementX });\n                }\n                if (index > lines[actualLine].step) {\n                    actualLine++;\n                }\n                legendItem.group.attr({\n                    translateY: Math.round(orgTranslateY + lines[actualLine].height / 2)\n                });\n                legendItem.y = orgTranslateY + lines[actualLine].height / 2;\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const BubbleLegendComposition = {\n            compose\n        };\n\n        return BubbleLegendComposition;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubblePoint.js', [_modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Point, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { scatter: { prototype: { pointClass: ScatterPoint } } } } = SeriesRegistry;\n        const { extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BubblePoint extends ScatterPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.options = void 0;\n                this.series = void 0;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            haloPath(size) {\n                return Point.prototype.haloPath.call(this, \n                // #6067\n                size === 0 ? 0 : (this.marker ? this.marker.radius || 0 : 0) + size);\n            }\n        }\n        /* *\n         *\n         *  Class Prototype\n         *\n         * */\n        extend(BubblePoint.prototype, {\n            ttBelow: false\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BubblePoint;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleSeries.js', [_modules['Series/Bubble/BubbleLegendComposition.js'], _modules['Series/Bubble/BubblePoint.js'], _modules['Core/Color/Color.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BubbleLegendComposition, BubblePoint, Color, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { noop } = H;\n        const { series: Series, seriesTypes: { column: { prototype: columnProto }, scatter: ScatterSeries } } = SeriesRegistry;\n        const { addEvent, arrayMax, arrayMin, clamp, extend, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Add logic to pad each axis with the amount of pixels necessary to avoid the\n         * bubbles to overflow.\n         */\n        function axisBeforePadding() {\n            const axisLength = this.len, chart = this.chart, isXAxis = this.isXAxis, dataKey = isXAxis ? 'xData' : 'yData', min = this.min, range = this.max - min;\n            let pxMin = 0, pxMax = axisLength, transA = axisLength / range, hasActiveSeries;\n            // Handle padding on the second pass, or on redraw\n            this.series.forEach((series) => {\n                if (series.bubblePadding && series.reserveSpace()) {\n                    // Correction for #1673\n                    this.allowZoomOutside = true;\n                    hasActiveSeries = true;\n                    const data = series[dataKey];\n                    if (isXAxis) {\n                        (series.onPoint || series).getRadii(0, 0, series);\n                        if (series.onPoint) {\n                            series.radii = series.onPoint.radii;\n                        }\n                    }\n                    if (range > 0) {\n                        let i = data.length;\n                        while (i--) {\n                            if (isNumber(data[i]) &&\n                                this.dataMin <= data[i] &&\n                                data[i] <= this.max) {\n                                const radius = series.radii && series.radii[i] || 0;\n                                pxMin = Math.min(((data[i] - min) * transA) - radius, pxMin);\n                                pxMax = Math.max(((data[i] - min) * transA) + radius, pxMax);\n                            }\n                        }\n                    }\n                }\n            });\n            // Apply the padding to the min and max properties\n            if (hasActiveSeries && range > 0 && !this.logarithmic) {\n                pxMax -= axisLength;\n                transA *= (axisLength +\n                    Math.max(0, pxMin) - // #8901\n                    Math.min(pxMax, axisLength)) / axisLength;\n                [\n                    ['min', 'userMin', pxMin],\n                    ['max', 'userMax', pxMax]\n                ].forEach((keys) => {\n                    if (typeof pick(this.options[keys[0]], this[keys[1]]) === 'undefined') {\n                        this[keys[0]] += keys[2] / transA;\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BubbleSeries extends ScatterSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.maxPxSize = void 0;\n                this.minPxSize = void 0;\n                this.options = void 0;\n                this.points = void 0;\n                this.radii = void 0;\n                this.yData = void 0;\n                this.zData = void 0;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, LegendClass, SeriesClass) {\n                BubbleLegendComposition.compose(ChartClass, LegendClass, SeriesClass);\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    AxisClass.prototype.beforePadding = axisBeforePadding;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Perform animation on the bubbles\n             * @private\n             */\n            animate(init) {\n                if (!init &&\n                    this.points.length < this.options.animationLimit // #8099\n                ) {\n                    this.points.forEach(function (point) {\n                        const { graphic } = point;\n                        if (graphic && graphic.width) { // URL symbols don't have width\n                            // Start values\n                            if (!this.hasRendered) {\n                                graphic.attr({\n                                    x: point.plotX,\n                                    y: point.plotY,\n                                    width: 1,\n                                    height: 1\n                                });\n                            }\n                            // Run animation\n                            graphic.animate(this.markerAttribs(point), this.options.animation);\n                        }\n                    }, this);\n                }\n            }\n            /**\n             * Get the radius for each point based on the minSize, maxSize and each\n             * point's Z value. This must be done prior to Series.translate because\n             * the axis needs to add padding in accordance with the point sizes.\n             * @private\n             */\n            getRadii() {\n                const zData = this.zData, yData = this.yData, radii = [];\n                let len, i, value, zExtremes = this.chart.bubbleZExtremes;\n                const { minPxSize, maxPxSize } = this.getPxExtremes();\n                // Get the collective Z extremes of all bubblish series. The chart-level\n                // `bubbleZExtremes` are only computed once, and reset on `updatedData`\n                // in any member series.\n                if (!zExtremes) {\n                    let zMin = Number.MAX_VALUE;\n                    let zMax = -Number.MAX_VALUE;\n                    let valid;\n                    this.chart.series.forEach((otherSeries) => {\n                        if (otherSeries.bubblePadding && otherSeries.reserveSpace()) {\n                            const zExtremes = (otherSeries.onPoint || otherSeries).getZExtremes();\n                            if (zExtremes) {\n                                // Changed '||' to 'pick' because min or max can be 0.\n                                // #17280\n                                zMin = Math.min(pick(zMin, zExtremes.zMin), zExtremes.zMin);\n                                zMax = Math.max(pick(zMax, zExtremes.zMax), zExtremes.zMax);\n                                valid = true;\n                            }\n                        }\n                    });\n                    if (valid) {\n                        zExtremes = { zMin, zMax };\n                        this.chart.bubbleZExtremes = zExtremes;\n                    }\n                    else {\n                        zExtremes = { zMin: 0, zMax: 0 };\n                    }\n                }\n                // Set the shape type and arguments to be picked up in drawPoints\n                for (i = 0, len = zData.length; i < len; i++) {\n                    value = zData[i];\n                    // Separate method to get individual radius for bubbleLegend\n                    radii.push(this.getRadius(zExtremes.zMin, zExtremes.zMax, minPxSize, maxPxSize, value, yData && yData[i]));\n                }\n                this.radii = radii;\n            }\n            /**\n             * Get the individual radius for one point.\n             * @private\n             */\n            getRadius(zMin, zMax, minSize, maxSize, value, yValue) {\n                const options = this.options, sizeByArea = options.sizeBy !== 'width', zThreshold = options.zThreshold;\n                let zRange = zMax - zMin, pos = 0.5;\n                // #8608 - bubble should be visible when z is undefined\n                if (yValue === null || value === null) {\n                    return null;\n                }\n                if (isNumber(value)) {\n                    // When sizing by threshold, the absolute value of z determines\n                    // the size of the bubble.\n                    if (options.sizeByAbsoluteValue) {\n                        value = Math.abs(value - zThreshold);\n                        zMax = zRange = Math.max(zMax - zThreshold, Math.abs(zMin - zThreshold));\n                        zMin = 0;\n                    }\n                    // Issue #4419 - if value is less than zMin, push a radius that's\n                    // always smaller than the minimum size\n                    if (value < zMin) {\n                        return minSize / 2 - 1;\n                    }\n                    // Relative size, a number between 0 and 1\n                    if (zRange > 0) {\n                        pos = (value - zMin) / zRange;\n                    }\n                }\n                if (sizeByArea && pos >= 0) {\n                    pos = Math.sqrt(pos);\n                }\n                return Math.ceil(minSize + pos * (maxSize - minSize)) / 2;\n            }\n            /**\n             * Define hasData function for non-cartesian series.\n             * Returns true if the series has points at all.\n             * @private\n             */\n            hasData() {\n                return !!this.processedXData.length; // != 0\n            }\n            /**\n             * @private\n             */\n            pointAttribs(point, state) {\n                const markerOptions = this.options.marker, fillOpacity = markerOptions.fillOpacity, attr = Series.prototype.pointAttribs.call(this, point, state);\n                if (fillOpacity !== 1) {\n                    attr.fill = color(attr.fill)\n                        .setOpacity(fillOpacity)\n                        .get('rgba');\n                }\n                return attr;\n            }\n            /**\n             * Extend the base translate method to handle bubble size\n             * @private\n             */\n            translate() {\n                // Run the parent method\n                super.translate.call(this);\n                this.getRadii();\n                this.translateBubble();\n            }\n            translateBubble() {\n                const { data, options, radii } = this, { minPxSize } = this.getPxExtremes();\n                // Set the shape type and arguments to be picked up in drawPoints\n                let i = data.length;\n                while (i--) {\n                    const point = data[i];\n                    const radius = radii ? radii[i] : 0; // #1737\n                    // Negative points means negative z values (#9728)\n                    if (this.zoneAxis === 'z') {\n                        point.negative = (point.z || 0) < (options.zThreshold || 0);\n                    }\n                    if (isNumber(radius) && radius >= minPxSize / 2) {\n                        // Shape arguments\n                        point.marker = extend(point.marker, {\n                            radius,\n                            width: 2 * radius,\n                            height: 2 * radius\n                        });\n                        // Alignment box for the data label\n                        point.dlBox = {\n                            x: point.plotX - radius,\n                            y: point.plotY - radius,\n                            width: 2 * radius,\n                            height: 2 * radius\n                        };\n                    }\n                    else { // below zThreshold\n                        // #1691\n                        point.shapeArgs = point.plotY = point.dlBox = void 0;\n                        point.isInside = false; // #17281\n                    }\n                }\n            }\n            getPxExtremes() {\n                const smallestSize = Math.min(this.chart.plotWidth, this.chart.plotHeight);\n                const getPxSize = (length) => {\n                    let isPercent;\n                    if (typeof length === 'string') {\n                        isPercent = /%$/.test(length);\n                        length = parseInt(length, 10);\n                    }\n                    return isPercent ? smallestSize * length / 100 : length;\n                };\n                const minPxSize = getPxSize(pick(this.options.minSize, 8));\n                // Prioritize min size if conflict to make sure bubbles are\n                // always visible. #5873\n                const maxPxSize = Math.max(getPxSize(pick(this.options.maxSize, '20%')), minPxSize);\n                return { minPxSize, maxPxSize };\n            }\n            getZExtremes() {\n                const options = this.options, zData = (this.zData || []).filter(isNumber);\n                if (zData.length) {\n                    const zMin = pick(options.zMin, clamp(arrayMin(zData), options.displayNegative === false ?\n                        (options.zThreshold || 0) :\n                        -Number.MAX_VALUE, Number.MAX_VALUE));\n                    const zMax = pick(options.zMax, arrayMax(zData));\n                    if (isNumber(zMin) && isNumber(zMax)) {\n                        return { zMin, zMax };\n                    }\n                }\n            }\n        }\n        /**\n         * A bubble series is a three dimensional series type where each point\n         * renders an X, Y and Z value. Each points is drawn as a bubble where the\n         * position along the X and Y axes mark the X and Y values, and the size of\n         * the bubble relates to the Z value.\n         *\n         * @sample {highcharts} highcharts/demo/bubble/\n         *         Bubble chart\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    cluster\n         * @product      highcharts highstock\n         * @requires     highcharts-more\n         * @optionparent plotOptions.bubble\n         */\n        BubbleSeries.defaultOptions = merge(ScatterSeries.defaultOptions, {\n            dataLabels: {\n                formatter: function () {\n                    const { numberFormatter } = this.series.chart;\n                    const { z } = this.point;\n                    return isNumber(z) ? numberFormatter(z, -1) : '';\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            /**\n             * If there are more points in the series than the `animationLimit`, the\n             * animation won't run. Animation affects overall performance and\n             * doesn't work well with heavy data series.\n             *\n             * @since 6.1.0\n             */\n            animationLimit: 250,\n            /**\n             * Whether to display negative sized bubbles. The threshold is given\n             * by the [zThreshold](#plotOptions.bubble.zThreshold) option, and negative\n             * bubbles can be visualized by setting\n             * [negativeColor](#plotOptions.bubble.negativeColor).\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-negative/\n             *         Negative bubbles\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     3.0\n             * @apioption plotOptions.bubble.displayNegative\n             */\n            /**\n             * @extends   plotOptions.series.marker\n             * @excluding enabled, enabledThreshold, height, radius, width\n             */\n            marker: {\n                lineColor: null,\n                lineWidth: 1,\n                /**\n                 * The fill opacity of the bubble markers.\n                 */\n                fillOpacity: 0.5,\n                /**\n                 * In bubble charts, the radius is overridden and determined based\n                 * on the point's data value.\n                 *\n                 * @ignore-option\n                 */\n                radius: null,\n                states: {\n                    hover: {\n                        radiusPlus: 0\n                    }\n                },\n                /**\n                 * A predefined shape or symbol for the marker. Possible values are\n                 * \"circle\", \"square\", \"diamond\", \"triangle\" and \"triangle-down\".\n                 *\n                 * Additionally, the URL to a graphic can be given on the form\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/bubble-symbol/\n                 *         Bubble chart with various symbols\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-symbol/\n                 *         General chart with predefined, graphic and custom markers\n                 *\n                 * @type  {Highcharts.SymbolKeyValue|string}\n                 * @since 5.0.11\n                 */\n                symbol: 'circle'\n            },\n            /**\n             * Minimum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the `z` value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type    {number|string}\n             * @since   3.0\n             * @product highcharts highstock\n             */\n            minSize: 8,\n            /**\n             * Maximum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the `z` value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type    {number|string}\n             * @since   3.0\n             * @product highcharts highstock\n             */\n            maxSize: '20%',\n            /**\n             * When a point's Z value is below the\n             * [zThreshold](#plotOptions.bubble.zThreshold)\n             * setting, this color is used.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-negative/\n             *         Negative bubbles\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.bubble.negativeColor\n             */\n            /**\n             * Whether the bubble's value should be represented by the area or the\n             * width of the bubble. The default, `area`, corresponds best to the\n             * human perception of the size of each bubble.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-sizeby/\n             *         Comparison of area and size\n             *\n             * @type       {Highcharts.BubbleSizeByValue}\n             * @default    area\n             * @since      3.0.7\n             * @apioption  plotOptions.bubble.sizeBy\n             */\n            /**\n             * When this is true, the absolute value of z determines the size of\n             * the bubble. This means that with the default `zThreshold` of 0, a\n             * bubble of value -1 will have the same size as a bubble of value 1,\n             * while a bubble of value 0 will have a smaller size according to\n             * `minSize`.\n             *\n             * @sample    {highcharts} highcharts/plotoptions/bubble-sizebyabsolutevalue/\n             *            Size by absolute value, various thresholds\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.9\n             * @product   highcharts\n             * @apioption plotOptions.bubble.sizeByAbsoluteValue\n             */\n            /**\n             * When this is true, the series will not cause the Y axis to cross\n             * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n             * unless the data actually crosses the plane.\n             *\n             * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n             * 3 will make the Y axis show negative values according to the\n             * `minPadding` option. If `softThreshold` is `true`, the Y axis starts\n             * at 0.\n             *\n             * @since   4.1.9\n             * @product highcharts\n             */\n            softThreshold: false,\n            states: {\n                hover: {\n                    halo: {\n                        size: 5\n                    }\n                }\n            },\n            tooltip: {\n                pointFormat: '({point.x}, {point.y}), Size: {point.z}'\n            },\n            turboThreshold: 0,\n            /**\n             * The minimum for the Z value range. Defaults to the highest Z value\n             * in the data.\n             *\n             * @see [zMin](#plotOptions.bubble.zMin)\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-zmin-zmax/\n             *         Z has a possible range of 0-100\n             *\n             * @type      {number}\n             * @since     4.0.3\n             * @product   highcharts\n             * @apioption plotOptions.bubble.zMax\n             */\n            /**\n             * @default   z\n             * @apioption plotOptions.bubble.colorKey\n             */\n            /**\n             * The minimum for the Z value range. Defaults to the lowest Z value\n             * in the data.\n             *\n             * @see [zMax](#plotOptions.bubble.zMax)\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-zmin-zmax/\n             *         Z has a possible range of 0-100\n             *\n             * @type      {number}\n             * @since     4.0.3\n             * @product   highcharts\n             * @apioption plotOptions.bubble.zMin\n             */\n            /**\n             * When [displayNegative](#plotOptions.bubble.displayNegative) is `false`,\n             * bubbles with lower Z values are skipped. When `displayNegative`\n             * is `true` and a [negativeColor](#plotOptions.bubble.negativeColor)\n             * is given, points with lower Z is colored.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-negative/\n             *         Negative bubbles\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            zThreshold: 0,\n            zoneAxis: 'z'\n        });\n        extend(BubbleSeries.prototype, {\n            alignDataLabel: columnProto.alignDataLabel,\n            applyZones: noop,\n            bubblePadding: true,\n            isBubble: true,\n            pointArrayMap: ['y', 'z'],\n            pointClass: BubblePoint,\n            parallelArrays: ['x', 'y', 'z'],\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            specialGroup: 'group',\n            zoneAxis: 'z'\n        });\n        // On updated data in any series, delete the chart-level Z extremes cache\n        addEvent(BubbleSeries, 'updatedData', (e) => {\n            delete e.target.chart.bubbleZExtremes;\n        });\n        // After removing series, delete the chart-level Z extremes cache, #17502.\n        addEvent(BubbleSeries, 'remove', (e) => {\n            delete e.target.chart.bubbleZExtremes;\n        });\n        SeriesRegistry.registerSeriesType('bubble', BubbleSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"area\"|\"width\"} Highcharts.BubbleSizeByValue\n         */\n        ''; // detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `bubble` series. If the [type](#series.bubble.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.bubble\n         * @excluding dataParser, dataURL, stack\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.bubble\n         */\n        /**\n         * An array of data points for the series. For the `bubble` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,y,z`. If the first value is a string, it is applied as the name of\n         *    the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 1, 2],\n         *        [1, 5, 5],\n         *        [2, 0, 2]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.bubble.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 1,\n         *        z: 1,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 5,\n         *        z: 4,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.line.data\n         * @product   highcharts\n         * @apioption series.bubble.data\n         */\n        /**\n         * @extends     series.line.data.marker\n         * @excluding   enabledThreshold, height, radius, width\n         * @product     highcharts\n         * @apioption   series.bubble.data.marker\n         */\n        /**\n         * The size value for each bubble. The bubbles' diameters are computed\n         * based on the `z`, and controlled by series options like `minSize`,\n         * `maxSize`, `sizeBy`, `zMin` and `zMax`.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.bubble.data.z\n         */\n        /**\n         * @excluding enabled, enabledThreshold, height, radius, width\n         * @apioption series.bubble.marker\n         */\n        ''; // adds doclets above to transpiled file\n\n        return BubbleSeries;\n    });\n    _registerModule(_modules, 'Series/ColumnRange/ColumnRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { column: { prototype: { pointClass: { prototype: columnProto } } }, arearange: { prototype: { pointClass: AreaRangePoint } } } } = SeriesRegistry;\n        const { extend, isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class ColumnRangePoint extends AreaRangePoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.options = void 0;\n                this.series = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            isValid() {\n                return isNumber(this.low);\n            }\n        }\n        extend(ColumnRangePoint.prototype, {\n            setState: columnProto.setState\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnRangePoint;\n    });\n    _registerModule(_modules, 'Series/ColumnRange/ColumnRangeSeries.js', [_modules['Series/ColumnRange/ColumnRangePoint.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ColumnRangePoint, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { seriesTypes: { arearange: AreaRangeSeries, column: ColumnSeries, column: { prototype: columnProto } } } = SeriesRegistry;\n        const { addEvent, clamp, extend, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The column range is a cartesian series type with higher and lower\n         * Y values along an X axis. To display horizontal bars, set\n         * [chart.inverted](#chart.inverted) to `true`.\n         *\n         * @sample {highcharts|highstock} highcharts/demo/columnrange/\n         *         Inverted column range\n         *\n         * @extends      plotOptions.column\n         * @since        2.3.0\n         * @excluding    negativeColor, stacking, softThreshold, threshold\n         * @product      highcharts highstock\n         * @requires     highcharts-more\n         * @optionparent plotOptions.columnrange\n         */\n        const columnRangeOptions = {\n            borderRadius: {\n                where: 'all'\n            },\n            /**\n             * Extended data labels for range series types. Range series data labels\n             * have no `x` and `y` options. Instead, they have `xLow`, `xHigh`,\n             * `yLow` and `yHigh` options to allow the higher and lower data label\n             * sets individually.\n             *\n             * @declare   Highcharts.SeriesAreaRangeDataLabelsOptionsObject\n             * @extends   plotOptions.arearange.dataLabels\n             * @since     2.3.0\n             * @product   highcharts highstock\n             * @apioption plotOptions.columnrange.dataLabels\n             */\n            pointRange: null,\n            /** @ignore-option */\n            marker: null,\n            states: {\n                hover: {\n                    /** @ignore-option */\n                    halo: false\n                }\n            }\n        };\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ColumnRangeSeries class\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.columnrange\n         *\n         * @augments Highcharts.Series\n         */\n        class ColumnRangeSeries extends AreaRangeSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            setOptions() {\n                // #14359 Prevent side-effect from stacking.\n                merge(true, arguments[0], { stacking: void 0 });\n                return AreaRangeSeries.prototype.setOptions.apply(this, arguments);\n            }\n            // Overrides from modules that may be loaded after this module\n            // @todo move to compositions\n            translate() {\n                return columnProto.translate.apply(this);\n            }\n            // public crispCol(): BBoxObject {\n            //     return columnProto.crispCol.apply(this, arguments as any);\n            // }\n            // public drawPoints(): void {\n            //     return columnProto.drawPoints.apply(this, arguments as any);\n            // }\n            // public drawTracker(): void {\n            //     return columnProto.drawTracker.apply(this, arguments as any);\n            // }\n            // public getColumnMetrics(): ColumnMetricsObject {\n            //     return columnProto.getColumnMetrics.apply(this, arguments as any);\n            // }\n            pointAttribs() {\n                return columnProto.pointAttribs.apply(this, arguments);\n            }\n            // public adjustForMissingColumns(): number {\n            //     return columnProto.adjustForMissingColumns.apply(this, arguments);\n            // }\n            // public animate(): void {\n            //     return columnProto.animate.apply(this, arguments as any);\n            // }\n            translate3dPoints() {\n                return columnProto.translate3dPoints.apply(this, arguments);\n            }\n            translate3dShapes() {\n                return columnProto.translate3dShapes.apply(this, arguments);\n            }\n            afterColumnTranslate() {\n                /**\n                 * Translate data points from raw values x and y to plotX and plotY\n                 * @private\n                 */\n                const yAxis = this.yAxis, xAxis = this.xAxis, startAngleRad = xAxis.startAngleRad, chart = this.chart, isRadial = this.xAxis.isRadial, safeDistance = Math.max(chart.chartWidth, chart.chartHeight) + 999;\n                let height, heightDifference, start, plotHigh, y;\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Don't draw too far outside plot area (#6835)\n                 * @private\n                 */\n                function safeBounds(pixelPos) {\n                    return clamp(pixelPos, -safeDistance, safeDistance);\n                }\n                // Set plotLow and plotHigh\n                this.points.forEach((point) => {\n                    const shapeArgs = point.shapeArgs || {}, minPointLength = this.options.minPointLength, plotY = point.plotY, plotHigh = yAxis.translate(point.high, 0, 1, 0, 1);\n                    if (isNumber(plotHigh) && isNumber(plotY)) {\n                        point.plotHigh = safeBounds(plotHigh);\n                        point.plotLow = safeBounds(plotY);\n                        // adjust shape\n                        y = point.plotHigh;\n                        height = pick(point.rectPlotY, point.plotY) - point.plotHigh;\n                        // Adjust for minPointLength\n                        if (Math.abs(height) < minPointLength) {\n                            heightDifference = (minPointLength - height);\n                            height += heightDifference;\n                            y -= heightDifference / 2;\n                            // Adjust for negative ranges or reversed Y axis (#1457)\n                        }\n                        else if (height < 0) {\n                            height *= -1;\n                            y -= height;\n                        }\n                        if (isRadial && this.polar) {\n                            start = point.barX + startAngleRad;\n                            point.shapeType = 'arc';\n                            point.shapeArgs = this.polar.arc(y + height, y, start, start + point.pointWidth);\n                        }\n                        else {\n                            shapeArgs.height = height;\n                            shapeArgs.y = y;\n                            const { x = 0, width = 0 } = shapeArgs;\n                            // #17912, aligning column range points\n                            // merge if shapeArgs contains more properties e.g. for 3d\n                            point.shapeArgs = merge(point.shapeArgs, this.crispCol(x, y, width, height));\n                            point.tooltipPos = chart.inverted ?\n                                [\n                                    yAxis.len + yAxis.pos - chart.plotLeft - y -\n                                        height / 2,\n                                    xAxis.len + xAxis.pos - chart.plotTop - x -\n                                        width / 2,\n                                    height\n                                ] : [\n                                xAxis.left - chart.plotLeft + x + width / 2,\n                                yAxis.pos - chart.plotTop + y + height / 2,\n                                height\n                            ]; // don't inherit from column tooltip position - #3372\n                        }\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        ColumnRangeSeries.defaultOptions = merge(ColumnSeries.defaultOptions, AreaRangeSeries.defaultOptions, columnRangeOptions);\n        addEvent(ColumnRangeSeries, 'afterColumnTranslate', function () {\n            ColumnRangeSeries.prototype.afterColumnTranslate.apply(this);\n        }, { order: 5 });\n        extend(ColumnRangeSeries.prototype, {\n            directTouch: true,\n            pointClass: ColumnRangePoint,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            adjustForMissingColumns: columnProto.adjustForMissingColumns,\n            animate: columnProto.animate,\n            crispCol: columnProto.crispCol,\n            drawGraph: noop,\n            drawPoints: columnProto.drawPoints,\n            getSymbol: noop,\n            drawTracker: columnProto.drawTracker,\n            getColumnMetrics: columnProto.getColumnMetrics\n            // pointAttribs: columnProto.pointAttribs,\n            // polarArc: columnProto.polarArc\n            // translate3dPoints: columnProto.translate3dPoints,\n            // translate3dShapes: columnProto.translate3dShapes\n        });\n        SeriesRegistry.registerSeriesType('columnrange', ColumnRangeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `columnrange` series. If the [type](#series.columnrange.type)\n         * option is not specified, it is inherited from\n         * [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.columnrange\n         * @excluding dataParser, dataURL, stack, stacking\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.columnrange\n         */\n        /**\n         * An array of data points for the series. For the `columnrange` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,low,high`. If the first value is a string, it is applied as the name\n         *    of the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 4, 2],\n         *        [1, 2, 1],\n         *        [2, 9, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.columnrange.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 0,\n         *        high: 4,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 5,\n         *        high: 3,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding marker\n         * @product   highcharts highstock\n         * @apioption series.columnrange.data\n         */\n        /**\n         * @extends   series.columnrange.dataLabels\n         * @product   highcharts highstock\n         * @apioption series.columnrange.data.dataLabels\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnrange.states.hover\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnrange.states.select\n         */\n        ''; // adds doclets above into transpiled\n\n        return ColumnRangeSeries;\n    });\n    _registerModule(_modules, 'Series/ColumnPyramid/ColumnPyramidSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Column pyramid series display one pyramid per value along an X axis.\n         * To display horizontal pyramids, set [chart.inverted](#chart.inverted) to\n         * `true`.\n         *\n         * @sample {highcharts|highstock} highcharts/demo/column-pyramid/\n         *         Column pyramid\n         * @sample {highcharts|highstock} highcharts/plotoptions/columnpyramid-stacked/\n         *         Column pyramid stacked\n         * @sample {highcharts|highstock} highcharts/plotoptions/columnpyramid-inverted/\n         *         Column pyramid inverted\n         *\n         * @extends      plotOptions.column\n         * @since        7.0.0\n         * @product      highcharts highstock\n         * @excluding    boostThreshold, borderRadius, crisp, depth, edgeColor,\n         *               edgeWidth, groupZPadding, negativeColor, softThreshold,\n         *               threshold, zoneAxis, zones, boostBlending\n         * @requires     highcharts-more\n         * @optionparent plotOptions.columnpyramid\n         */\n        const ColumnPyramidSeriesDefaults = {};\n        /**\n         * A `columnpyramid` series. If the [type](#series.columnpyramid.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.columnpyramid\n         * @excluding connectEnds, connectNulls, dashStyle, dataParser, dataURL,\n         *            gapSize, gapUnit, linecap, lineWidth, marker, step,\n         *            boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.columnpyramid\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnpyramid.states.hover\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnpyramid.states.select\n         */\n        /**\n         * An array of data points for the series. For the `columnpyramid` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. The `x` values will be automatically\n         *    calculated, either starting at 0 and incremented by 1, or from\n         *    `pointStart` and `pointInterval` given in the series options. If the axis\n         *    has categories, these will be used. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of arrays with 2 values. In this case, the values correspond to\n         *    `x,y`. If the first value is a string, it is applied as the name of the\n         *    point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 6],\n         *        [1, 2],\n         *        [2, 6]\n         *    ]\n         *    ```\n         *\n         * 3. An array of objects with named values. The objects are point configuration\n         *    objects as seen below. If the total number of data points exceeds the\n         *    series' [turboThreshold](#series.columnpyramid.turboThreshold), this\n         *    option is not available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 9,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 6,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n         * @extends   series.line.data\n         * @excluding marker\n         * @product   highcharts highstock\n         * @apioption series.columnpyramid.data\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnPyramidSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/ColumnPyramid/ColumnPyramidSeries.js', [_modules['Series/ColumnPyramid/ColumnPyramidSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ColumnPyramidSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { clamp, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ColumnPyramidSeries class\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.columnpyramid\n         *\n         * @augments Highcharts.Series\n         */\n        class ColumnPyramidSeries extends ColumnSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Overrides the column translate method\n             * @private\n             */\n            translate() {\n                const series = this, chart = series.chart, options = series.options, dense = series.dense =\n                    series.closestPointRange * series.xAxis.transA < 2, borderWidth = series.borderWidth = pick(options.borderWidth, dense ? 0 : 1 // #3635\n                ), yAxis = series.yAxis, threshold = options.threshold, minPointLength = pick(options.minPointLength, 5), metrics = series.getColumnMetrics(), pointWidth = metrics.width, pointXOffset = series.pointXOffset = metrics.offset;\n                let translatedThreshold = series.translatedThreshold =\n                    yAxis.getThreshold(threshold), \n                // postprocessed for border width\n                seriesBarW = series.barW =\n                    Math.max(pointWidth, 1 + 2 * borderWidth);\n                if (chart.inverted) {\n                    translatedThreshold -= 0.5; // #3355\n                }\n                // When the pointPadding is 0,\n                // we want the pyramids to be packed tightly,\n                // so we allow individual pyramids to have individual sizes.\n                // When pointPadding is greater,\n                // we strive for equal-width columns (#2694).\n                if (options.pointPadding) {\n                    seriesBarW = Math.ceil(seriesBarW);\n                }\n                super.translate();\n                // Record the new values\n                for (const point of series.points) {\n                    const yBottom = pick(point.yBottom, translatedThreshold), safeDistance = 999 + Math.abs(yBottom), plotY = clamp(point.plotY, -safeDistance, yAxis.len + safeDistance), \n                    // Don't draw too far outside plot area\n                    // (#1303, #2241, #4264)\n                    barW = seriesBarW / 2, barY = Math.min(plotY, yBottom), barH = Math.max(plotY, yBottom) - barY;\n                    let barX = point.plotX + pointXOffset, stackTotal, stackHeight, topPointY, topXwidth, bottomXwidth, invBarPos, x1, x2, x3, x4, y1, y2;\n                    // Adjust for null or missing points\n                    if (options.centerInCategory) {\n                        barX = series.adjustForMissingColumns(barX, pointWidth, point, metrics);\n                    }\n                    point.barX = barX;\n                    point.pointWidth = pointWidth;\n                    // Fix the tooltip on center of grouped pyramids\n                    // (#1216, #424, #3648)\n                    point.tooltipPos = chart.inverted ?\n                        [\n                            yAxis.len + yAxis.pos - chart.plotLeft - plotY,\n                            series.xAxis.len - barX - barW,\n                            barH\n                        ] :\n                        [\n                            barX + barW,\n                            plotY + yAxis.pos - chart.plotTop,\n                            barH\n                        ];\n                    stackTotal =\n                        threshold + (point.total || point.y);\n                    // overwrite stacktotal (always 100 / -100)\n                    if (options.stacking === 'percent') {\n                        stackTotal =\n                            threshold + (point.y < 0) ?\n                                -100 :\n                                100;\n                    }\n                    // get the highest point (if stack, extract from total)\n                    topPointY = yAxis.toPixels((stackTotal), true);\n                    // calculate height of stack (in pixels)\n                    stackHeight =\n                        chart.plotHeight - topPointY -\n                            (chart.plotHeight - translatedThreshold);\n                    // topXwidth and bottomXwidth = width of lines from the center\n                    // calculated from tanges proportion.\n                    // Cannot be a NaN #12514\n                    topXwidth = stackHeight ?\n                        (barW * (barY - topPointY)) / stackHeight : 0;\n                    // like topXwidth, but with height of point\n                    bottomXwidth = stackHeight ?\n                        (barW * (barY + barH - topPointY)) / stackHeight :\n                        0;\n                    /*\n                            /\\\n                           /  \\\n                    x1,y1,------ x2,y1\n                        /       \\\n                       -----------\n                    x4,y2        x3,y2\n                    */\n                    x1 = barX - topXwidth + barW;\n                    x2 = barX + topXwidth + barW;\n                    x3 = barX + bottomXwidth + barW;\n                    x4 = barX - bottomXwidth + barW;\n                    y1 = barY - minPointLength;\n                    y2 = barY + barH;\n                    if (point.y < 0) {\n                        y1 = barY;\n                        y2 = barY + barH + minPointLength;\n                    }\n                    // inverted chart\n                    if (chart.inverted) {\n                        invBarPos = yAxis.width - barY;\n                        stackHeight =\n                            topPointY - (yAxis.width - translatedThreshold);\n                        // proportion tanges\n                        topXwidth = (barW *\n                            (topPointY - invBarPos)) / stackHeight;\n                        bottomXwidth = (barW *\n                            (topPointY - (invBarPos - barH))) / stackHeight;\n                        x1 = barX + barW + topXwidth; // top bottom\n                        x2 = x1 - 2 * topXwidth; // top top\n                        x3 = barX - bottomXwidth + barW; // bottom top\n                        x4 = barX + bottomXwidth + barW; // bottom bottom\n                        y1 = barY;\n                        y2 = barY + barH - minPointLength;\n                        if (point.y < 0) {\n                            y2 = barY + barH + minPointLength;\n                        }\n                    }\n                    // Register shape type and arguments to be used in drawPoints\n                    point.shapeType = 'path';\n                    point.shapeArgs = {\n                        x: x1,\n                        y: y1,\n                        width: x2 - x1,\n                        height: barH,\n                        // path of pyramid\n                        d: [\n                            ['M', x1, y1],\n                            ['L', x2, y1],\n                            ['L', x3, y2],\n                            ['L', x4, y2],\n                            ['Z']\n                        ]\n                    };\n                }\n            }\n        }\n        ColumnPyramidSeries.defaultOptions = merge(ColumnSeries.defaultOptions, ColumnPyramidSeriesDefaults);\n        SeriesRegistry.registerSeriesType('columnpyramid', ColumnPyramidSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnPyramidSeries;\n    });\n    _registerModule(_modules, 'Series/ErrorBar/ErrorBarSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Error bars are a graphical representation of the variability of data and\n         * are used on graphs to indicate the error, or uncertainty in a reported\n         * measurement.\n         *\n         * @sample highcharts/demo/error-bar/\n         *         Error bars on a column series\n         * @sample highcharts/series-errorbar/on-scatter/\n         *         Error bars on a scatter series\n         * @sample highcharts/series-errorbar/datalabels/\n         *         Error bars with data labels\n         *\n         * @extends      plotOptions.boxplot\n         * @excluding    boostBlending, boostThreshold\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.errorbar\n         */\n        const ErrorBarSeriesDefaults = {\n            /**\n             * The main color of the bars. This can be overridden by\n             * [stemColor](#plotOptions.errorbar.stemColor) and\n             * [whiskerColor](#plotOptions.errorbar.whiskerColor) individually.\n             *\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #000000\n             * @since   3.0\n             * @product highcharts\n             */\n            color: \"#000000\" /* Palette.neutralColor100 */,\n            grouping: false,\n            /**\n             * The parent series of the error bar. The default value links it to\n             * the previous series. Otherwise, use the id of the parent series.\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            linkedTo: ':previous',\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'\n            },\n            /**\n             * The line width of the whiskers, the horizontal lines marking\n             * low and high values. When `null`, the general\n             * [lineWidth](#plotOptions.errorbar.lineWidth) applies.\n             *\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type    {number}\n             * @since   3.0\n             * @product highcharts\n             */\n            whiskerWidth: null\n        };\n        /**\n         * A `errorbar` series. If the [type](#series.errorbar.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.errorbar\n         * @excluding dataParser, dataURL, stack, stacking, boostThreshold,\n         *            boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.errorbar\n         */\n        /**\n         * An array of data points for the series. For the `errorbar` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,low,high`. If the first value is a string, it is applied as the name\n         *    of the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 10, 2],\n         *        [1, 1, 8],\n         *        [2, 4, 5]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.errorbar.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 0,\n         *        high: 0,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 5,\n         *        high: 5,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding dataLabels, drilldown, marker, states\n         * @product   highcharts\n         * @apioption series.errorbar.data\n         */\n        ''; // adds doclets above to transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ErrorBarSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/ErrorBar/ErrorBarSeries.js', [_modules['Series/BoxPlot/BoxPlotSeries.js'], _modules['Series/Column/ColumnSeries.js'], _modules['Series/ErrorBar/ErrorBarSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BoxPlotSeries, ColumnSeries, ErrorBarSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { arearange: AreaRangeSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Errorbar series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.errorbar\n         *\n         * @augments Highcharts.Series\n         */\n        class ErrorBarSeries extends BoxPlotSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getColumnMetrics() {\n                const series = this;\n                // Get the width and X offset, either on top of the linked series\n                // column or standalone\n                return ((series.linkedParent && series.linkedParent.columnMetrics) ||\n                    ColumnSeries.prototype.getColumnMetrics.call(series));\n            }\n            drawDataLabels() {\n                const series = this, valKey = series.pointValKey;\n                if (AreaRangeSeries) {\n                    AreaRangeSeries.prototype.drawDataLabels.call(series);\n                    // Arearange drawDataLabels does not reset point.y to high,\n                    // but to low after drawing (#4133)\n                    for (const point of series.data) {\n                        point.y = point[valKey];\n                    }\n                }\n            }\n            toYData(point) {\n                // return a plain array for speedy calculation\n                return [point.low, point.high];\n            }\n        }\n        ErrorBarSeries.defaultOptions = merge(BoxPlotSeries.defaultOptions, ErrorBarSeriesDefaults);\n        addEvent(ErrorBarSeries, 'afterTranslate', function () {\n            for (const point of this.points) {\n                point.plotLow = point.plotY;\n            }\n        }, { order: 0 });\n        extend(ErrorBarSeries.prototype, {\n            // pointClass: ErrorBarPoint, // just a declaration\n            pointArrayMap: ['low', 'high'],\n            pointValKey: 'high',\n            doQuartiles: false\n        });\n        SeriesRegistry.registerSeriesType('errorbar', ErrorBarSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ErrorBarSeries;\n    });\n    _registerModule(_modules, 'Series/Gauge/GaugePoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: { pointClass: Point } } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class GaugePoint extends Point {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.options = void 0;\n                this.series = void 0;\n                this.shapeArgs = void 0;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Don't do any hover colors or anything\n             * @private\n             */\n            setState(state) {\n                this.state = state;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GaugePoint;\n    });\n    _registerModule(_modules, 'Series/Gauge/GaugeSeries.js', [_modules['Series/Gauge/GaugePoint.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (GaugePoint, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { series: Series, seriesTypes: { column: ColumnSeries } } = SeriesRegistry;\n        const { clamp, isNumber, extend, merge, pick, pInt, defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * The `gauge` series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.map\n         *\n         * @augments Highcharts.Series\n         */\n        class GaugeSeries extends Series {\n            constructor() {\n                /* *\n                 *\n                 *  Static properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.points = void 0;\n                this.options = void 0;\n                this.yAxis = void 0;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Calculate paths etc\n             * @private\n             */\n            translate() {\n                const series = this, yAxis = series.yAxis, options = series.options, center = yAxis.center;\n                series.generatePoints();\n                series.points.forEach((point) => {\n                    const dialOptions = merge(options.dial, point.dial), radius = (pInt(dialOptions.radius) * center[2]) / 200, baseLength = (pInt(dialOptions.baseLength) * radius) / 100, rearLength = (pInt(dialOptions.rearLength) * radius) / 100, baseWidth = dialOptions.baseWidth, topWidth = dialOptions.topWidth;\n                    let overshoot = options.overshoot, rotation = yAxis.startAngleRad + yAxis.translate(point.y, void 0, void 0, void 0, true);\n                    // Handle the wrap and overshoot options\n                    if (isNumber(overshoot) || options.wrap === false) {\n                        overshoot = isNumber(overshoot) ?\n                            (overshoot / 180 * Math.PI) : 0;\n                        rotation = clamp(rotation, yAxis.startAngleRad - overshoot, yAxis.endAngleRad + overshoot);\n                    }\n                    rotation = rotation * 180 / Math.PI;\n                    point.shapeType = 'path';\n                    const d = dialOptions.path || [\n                        ['M', -rearLength, -baseWidth / 2],\n                        ['L', baseLength, -baseWidth / 2],\n                        ['L', radius, -topWidth / 2],\n                        ['L', radius, topWidth / 2],\n                        ['L', baseLength, baseWidth / 2],\n                        ['L', -rearLength, baseWidth / 2],\n                        ['Z']\n                    ];\n                    point.shapeArgs = {\n                        d,\n                        translateX: center[0],\n                        translateY: center[1],\n                        rotation: rotation\n                    };\n                    // Positions for data label\n                    point.plotX = center[0];\n                    point.plotY = center[1];\n                    if (defined(point.y) && yAxis.max - yAxis.min) {\n                        point.percentage =\n                            (point.y - yAxis.min) / (yAxis.max - yAxis.min) * 100;\n                    }\n                });\n            }\n            /**\n             * Draw the points where each point is one needle\n             * @private\n             */\n            drawPoints() {\n                const series = this, chart = series.chart, center = series.yAxis.center, pivot = series.pivot, options = series.options, pivotOptions = options.pivot, renderer = chart.renderer;\n                series.points.forEach((point) => {\n                    const graphic = point.graphic, shapeArgs = point.shapeArgs, d = shapeArgs.d, dialOptions = merge(options.dial, point.dial); // #1233\n                    if (graphic) {\n                        graphic.animate(shapeArgs);\n                        shapeArgs.d = d; // animate alters it\n                    }\n                    else {\n                        point.graphic =\n                            renderer[point.shapeType](shapeArgs)\n                                .addClass('highcharts-dial')\n                                .add(series.group);\n                    }\n                    // Presentational attributes\n                    if (!chart.styledMode) {\n                        point.graphic[graphic ? 'animate' : 'attr']({\n                            stroke: dialOptions.borderColor,\n                            'stroke-width': dialOptions.borderWidth,\n                            fill: dialOptions.backgroundColor\n                        });\n                    }\n                });\n                // Add or move the pivot\n                if (pivot) {\n                    pivot.animate({\n                        translateX: center[0],\n                        translateY: center[1]\n                    });\n                }\n                else if (pivotOptions) {\n                    series.pivot =\n                        renderer.circle(0, 0, pivotOptions.radius)\n                            .attr({\n                            zIndex: 2\n                        })\n                            .addClass('highcharts-pivot')\n                            .translate(center[0], center[1])\n                            .add(series.group);\n                    // Presentational attributes\n                    if (!chart.styledMode) {\n                        series.pivot.attr({\n                            fill: pivotOptions.backgroundColor,\n                            stroke: pivotOptions.borderColor,\n                            'stroke-width': pivotOptions.borderWidth\n                        });\n                    }\n                }\n            }\n            /**\n             * Animate the arrow up from startAngle\n             * @private\n             */\n            animate(init) {\n                const series = this;\n                if (!init) {\n                    series.points.forEach((point) => {\n                        const graphic = point.graphic;\n                        if (graphic) {\n                            // start value\n                            graphic.attr({\n                                rotation: series.yAxis.startAngleRad * 180 / Math.PI\n                            });\n                            // animate\n                            graphic.animate({\n                                rotation: point.shapeArgs.rotation\n                            }, series.options.animation);\n                        }\n                    });\n                }\n            }\n            /**\n             * @private\n             */\n            render() {\n                this.group = this.plotGroup('group', 'series', this.visible ? 'inherit' : 'hidden', this.options.zIndex, this.chart.seriesGroup);\n                Series.prototype.render.call(this);\n                this.group.clip(this.chart.clipRect);\n            }\n            /**\n             * Extend the basic setData method by running processData and generatePoints\n             * immediately, in order to access the points from the legend.\n             * @private\n             */\n            setData(data, redraw) {\n                Series.prototype.setData.call(this, data, false);\n                this.processData();\n                this.generatePoints();\n                if (pick(redraw, true)) {\n                    this.chart.redraw();\n                }\n            }\n            /**\n             * Define hasData function for non-cartesian series.\n             * Returns true if the series has points at all.\n             * @private\n             */\n            hasData() {\n                return !!this.points.length; // != 0\n            }\n        }\n        /**\n         * Gauges are circular plots displaying one or more values with a dial\n         * pointing to values along the perimeter.\n         *\n         * @sample highcharts/demo/gauge-speedometer/\n         *         Gauge chart\n         *\n         * @extends      plotOptions.line\n         * @excluding    animationLimit, boostThreshold, colorAxis, colorKey,\n         *               connectEnds, connectNulls, cropThreshold, dashStyle,\n         *               dragDrop, findNearestPointBy, getExtremesFromAll, marker,\n         *               negativeColor, pointPlacement, shadow, softThreshold,\n         *               stacking, states, step, threshold, turboThreshold, xAxis,\n         *               zoneAxis, zones, dataSorting, boostBlending\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.gauge\n         */\n        GaugeSeries.defaultOptions = merge(Series.defaultOptions, {\n            /**\n             * When this option is `true`, the dial will wrap around the axes.\n             * For instance, in a full-range gauge going from 0 to 360, a value\n             * of 400 will point to 40\\. When `wrap` is `false`, the dial stops\n             * at 360.\n             *\n             * @see [overshoot](#plotOptions.gauge.overshoot)\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.gauge.wrap\n             */\n            /**\n             * Data labels for the gauge. For gauges, the data labels are\n             * enabled by default and shown in a bordered box below the point.\n             *\n             * @since   2.3.0\n             * @product highcharts\n             */\n            dataLabels: {\n                borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                borderRadius: 3,\n                borderWidth: 1,\n                crop: false,\n                defer: false,\n                enabled: true,\n                verticalAlign: 'top',\n                y: 15,\n                zIndex: 2\n            },\n            /**\n             * Options for the dial or arrow pointer of the gauge.\n             *\n             * In styled mode, the dial is styled with the\n             * `.highcharts-gauge-series .highcharts-dial` rule.\n             *\n             * @sample {highcharts} highcharts/css/gauge/\n             *         Styled mode\n             *\n             * @type    {*}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            dial: {\n                /**\n                 * The background or fill color of the gauge's dial.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #000000\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.backgroundColor\n                 */\n                backgroundColor: \"#000000\" /* Palette.neutralColor100 */,\n                /**\n                 * The length of the dial's base part, relative to the total\n                 * radius or length of the dial.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {string}\n                 * @default   70%\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.baseLength\n                 */\n                baseLength: '70%',\n                /**\n                 * The pixel width of the base of the gauge dial. The base is\n                 * the part closest to the pivot, defined by baseLength.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   3\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.baseWidth\n                 */\n                baseWidth: 3,\n                /**\n                 * The border color or stroke of the gauge's dial. By default,\n                 * the borderWidth is 0, so this must be set in addition to a\n                 * custom border color.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #cccccc\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.borderColor\n                 */\n                borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                /**\n                 * The width of the gauge dial border in pixels.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.borderWidth\n                 */\n                borderWidth: 0,\n                /**\n                 * An array with an SVG path for the custom dial.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-path/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {Highcharts.SVGPathArray}\n                 * @since 10.2.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.path\n                 */\n                /**\n                 * The radius or length of the dial, in percentages relative to\n                 * the radius of the gauge itself.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {string}\n                 * @default   80%\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.radius\n                 */\n                radius: '80%',\n                /**\n                 * The length of the dial's rear end, the part that extends out\n                 * on the other side of the pivot. Relative to the dial's\n                 * length.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {string}\n                 * @default   10%\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.rearLength\n                 */\n                rearLength: '10%',\n                /**\n                 * The width of the top of the dial, closest to the perimeter.\n                 * The pivot narrows in from the base to the top.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   1\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.topWidth\n                 */\n                topWidth: 1\n            },\n            /**\n             * Allow the dial to overshoot the end of the perimeter axis by\n             * this many degrees. Say if the gauge axis goes from 0 to 60, a\n             * value of 100, or 1000, will show 5 degrees beyond the end of the\n             * axis when this option is set to 5.\n             *\n             * @see [wrap](#plotOptions.gauge.wrap)\n             *\n             * @sample {highcharts} highcharts/plotoptions/gauge-overshoot/\n             *         Allow 5 degrees overshoot\n             *\n             * @type      {number}\n             * @since     3.0.10\n             * @product   highcharts\n             * @apioption plotOptions.gauge.overshoot\n             */\n            /**\n             * Options for the pivot or the center point of the gauge.\n             *\n             * In styled mode, the pivot is styled with the\n             * `.highcharts-gauge-series .highcharts-pivot` rule.\n             *\n             * @sample {highcharts} highcharts/css/gauge/\n             *         Styled mode\n             *\n             * @type    {*}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            pivot: {\n                /**\n                 * The pixel radius of the pivot.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   5\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.radius\n                 */\n                radius: 5,\n                /**\n                 * The border or stroke width of the pivot.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.borderWidth\n                 */\n                borderWidth: 0,\n                /**\n                 * The border or stroke color of the pivot. In able to change\n                 * this, the borderWidth must also be set to something other\n                 * than the default 0.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #cccccc\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.borderColor\n                 */\n                borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                /**\n                 * The background color or fill of the pivot.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #000000\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.backgroundColor\n                 */\n                backgroundColor: \"#000000\" /* Palette.neutralColor100 */\n            },\n            tooltip: {\n                headerFormat: ''\n            },\n            /**\n             * Whether to display this particular series or series type in the\n             * legend. Defaults to false for gauge series.\n             *\n             * @since   2.3.0\n             * @product highcharts\n             */\n            showInLegend: false\n            // Prototype members\n        });\n        extend(GaugeSeries.prototype, {\n            // chart.angular will be set to true when a gauge series is present,\n            // and this will be used on the axes\n            angular: true,\n            directTouch: true,\n            drawGraph: noop,\n            drawTracker: ColumnSeries.prototype.drawTracker,\n            fixedBox: true,\n            forceDL: true,\n            noSharedTooltip: true,\n            pointClass: GaugePoint,\n            trackerGroups: ['group', 'dataLabelsGroup']\n        });\n        SeriesRegistry.registerSeriesType('gauge', GaugeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API options\n         *\n         * */\n        /**\n         * A `gauge` series. If the [type](#series.gauge.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.gauge\n         * @excluding animationLimit, boostThreshold, connectEnds, connectNulls,\n         *            cropThreshold, dashStyle, dataParser, dataURL, findNearestPointBy,\n         *            getExtremesFromAll, marker, negativeColor, pointPlacement, shadow,\n         *            softThreshold, stack, stacking, states, step, threshold,\n         *            turboThreshold, zoneAxis, zones, dataSorting, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.gauge\n         */\n        /**\n         * An array of data points for the series. For the `gauge` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.gauge.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        y: 6,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        y: 8,\n         *        name: \"Point1\",\n         *       color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * The typical gauge only contains a single data value.\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.line.data\n         * @excluding drilldown, marker, x\n         * @product   highcharts\n         * @apioption series.gauge.data\n         */\n        ''; // adds the doclets above in the transpiled file\n\n        return GaugeSeries;\n    });\n    _registerModule(_modules, 'Series/DragNodesComposition.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2021 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                addEvent(ChartClass, 'load', onChartLoad);\n            }\n        }\n        /**\n         * Draggable mode:\n         * @private\n         */\n        function onChartLoad() {\n            const chart = this;\n            let mousedownUnbinder, mousemoveUnbinder, mouseupUnbinder;\n            if (chart.container) {\n                mousedownUnbinder = addEvent(chart.container, 'mousedown', (event) => {\n                    const point = chart.hoverPoint;\n                    if (point &&\n                        point.series &&\n                        point.series.hasDraggableNodes &&\n                        point.series.options.draggable) {\n                        point.series.onMouseDown(point, event);\n                        mousemoveUnbinder = addEvent(chart.container, 'mousemove', (e) => (point &&\n                            point.series &&\n                            point.series.onMouseMove(point, e)));\n                        mouseupUnbinder = addEvent(chart.container.ownerDocument, 'mouseup', (e) => {\n                            mousemoveUnbinder();\n                            mouseupUnbinder();\n                            return point &&\n                                point.series &&\n                                point.series.onMouseUp(point, e);\n                        });\n                    }\n                });\n            }\n            addEvent(chart, 'destroy', function () {\n                mousedownUnbinder();\n            });\n        }\n        /**\n         * Mouse down action, initializing drag&drop mode.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occured.\n         * @param {Highcharts.PointerEventObject} event\n         *        Browser event, before normalization.\n         */\n        function onMouseDown(point, event) {\n            const normalizedEvent = this.chart.pointer.normalize(event);\n            point.fixedPosition = {\n                chartX: normalizedEvent.chartX,\n                chartY: normalizedEvent.chartY,\n                plotX: point.plotX,\n                plotY: point.plotY\n            };\n            point.inDragMode = true;\n        }\n        /**\n         * Mouse move action during drag&drop.\n         *\n         * @private\n         *\n         * @param {global.Event} event\n         *        Browser event, before normalization.\n         * @param {Highcharts.Point} point\n         *        The point that event occured.\n         *\n         */\n        function onMouseMove(point, event) {\n            if (point.fixedPosition && point.inDragMode) {\n                const series = this, chart = series.chart, normalizedEvent = chart.pointer.normalize(event), diffX = point.fixedPosition.chartX - normalizedEvent.chartX, diffY = point.fixedPosition.chartY - normalizedEvent.chartY, graphLayoutsLookup = chart.graphLayoutsLookup;\n                let newPlotX, newPlotY;\n                // At least 5px to apply change (avoids simple click):\n                if (Math.abs(diffX) > 5 || Math.abs(diffY) > 5) {\n                    newPlotX = point.fixedPosition.plotX - diffX;\n                    newPlotY = point.fixedPosition.plotY - diffY;\n                    if (chart.isInsidePlot(newPlotX, newPlotY)) {\n                        point.plotX = newPlotX;\n                        point.plotY = newPlotY;\n                        point.hasDragged = true;\n                        this.redrawHalo(point);\n                        graphLayoutsLookup.forEach((layout) => {\n                            layout.restartSimulation();\n                        });\n                    }\n                }\n            }\n        }\n        /**\n         * Mouse up action, finalizing drag&drop.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occured.\n         */\n        function onMouseUp(point, _event) {\n            if (point.fixedPosition) {\n                if (point.hasDragged) {\n                    if (this.layout.enableSimulation) {\n                        this.layout.start();\n                    }\n                    else {\n                        this.chart.redraw();\n                    }\n                }\n                point.inDragMode = point.hasDragged = false;\n                if (!this.options.fixedDraggable) {\n                    delete point.fixedPosition;\n                }\n            }\n        }\n        /**\n         * Redraw halo on mousemove during the drag&drop action.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that should show halo.\n         */\n        function redrawHalo(point) {\n            if (point && this.halo) {\n                this.halo.attr({\n                    d: point.haloPath(this.options.states.hover.halo.size)\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DragNodesComposition = {\n            compose,\n            onMouseDown,\n            onMouseMove,\n            onMouseUp,\n            redrawHalo\n        };\n\n        return DragNodesComposition;\n    });\n    _registerModule(_modules, 'Series/GraphLayoutComposition.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Utilities.js']], function (A, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2021 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setAnimation } = A;\n        const { addEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        const integrations = {};\n        const layouts = {};\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                addEvent(ChartClass, 'afterPrint', onChartAfterPrint);\n                addEvent(ChartClass, 'beforePrint', onChartBeforePrint);\n                addEvent(ChartClass, 'predraw', onChartPredraw);\n                addEvent(ChartClass, 'render', onChartRender);\n            }\n        }\n        /**\n         * Re-enable simulation after print.\n         * @private\n         */\n        function onChartAfterPrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    // return to default simulation\n                    layout.updateSimulation();\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Disable simulation before print if enabled.\n         * @private\n         */\n        function onChartBeforePrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    layout.updateSimulation(false);\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Clear previous layouts.\n         * @private\n         */\n        function onChartPredraw() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    layout.stop();\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            let systemsStable, afterRender = false;\n            const layoutStep = (layout) => {\n                if (layout.maxIterations-- &&\n                    isFinite(layout.temperature) &&\n                    !layout.isStable() &&\n                    !layout.enableSimulation) {\n                    // Hook similar to build-in addEvent, but instead of\n                    // creating whole events logic, use just a function.\n                    // It's faster which is important for rAF code.\n                    // Used e.g. in packed-bubble series for bubble radius\n                    // calculations\n                    if (layout.beforeStep) {\n                        layout.beforeStep();\n                    }\n                    layout.step();\n                    systemsStable = false;\n                    afterRender = true;\n                }\n            };\n            if (this.graphLayoutsLookup) {\n                setAnimation(false, this);\n                // Start simulation\n                this.graphLayoutsLookup.forEach((layout) => layout.start());\n                // Just one sync step, to run different layouts similar to\n                // async mode.\n                while (!systemsStable) {\n                    systemsStable = true;\n                    this.graphLayoutsLookup.forEach(layoutStep);\n                }\n                if (afterRender) {\n                    this.series.forEach((series) => {\n                        if (series && series.layout) {\n                            series.render();\n                        }\n                    });\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const GraphLayoutComposition = {\n            compose,\n            integrations,\n            layouts\n        };\n\n        return GraphLayoutComposition;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubblePoint.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js']], function (Chart, Point, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { bubble: { prototype: { pointClass: BubblePoint } } } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PackedBubblePoint extends BubblePoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.degree = NaN;\n                this.mass = NaN;\n                this.radius = NaN;\n                this.options = void 0;\n                this.series = void 0;\n                this.value = null;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Destroy point.\n             * Then remove point from the layout.\n             * @private\n             */\n            destroy() {\n                if (this.series.layout) {\n                    this.series.layout.removeElementFromCollection(this, this.series.layout.nodes);\n                }\n                return Point.prototype.destroy.apply(this, arguments);\n            }\n            firePointEvent() {\n                const point = this, series = this.series, seriesOptions = series.options;\n                if (this.isParentNode && seriesOptions.parentNode) {\n                    const temp = seriesOptions.allowPointSelect;\n                    seriesOptions.allowPointSelect = (seriesOptions.parentNode.allowPointSelect);\n                    Point.prototype.firePointEvent.apply(this, arguments);\n                    seriesOptions.allowPointSelect = temp;\n                }\n                else {\n                    Point.prototype.firePointEvent.apply(this, arguments);\n                }\n            }\n            select() {\n                const point = this, series = this.series, chart = series.chart;\n                if (point.isParentNode) {\n                    chart.getSelectedPoints = chart.getSelectedParentNodes;\n                    Point.prototype.select.apply(this, arguments);\n                    chart.getSelectedPoints = Chart.prototype.getSelectedPoints;\n                }\n                else {\n                    Point.prototype.select.apply(this, arguments);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PackedBubblePoint;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * A packed bubble series is a two dimensional series type, where each point\n         * renders a value in X, Y position. Each point is drawn as a bubble\n         * where the bubbles don't overlap with each other and the radius\n         * of the bubble relates to the value.\n         *\n         * @sample highcharts/demo/packed-bubble/\n         *         Packed bubble chart\n         * @sample highcharts/demo/packed-bubble-split/\n         *         Split packed bubble chart\n         *\n         * @extends      plotOptions.bubble\n         * @excluding    connectEnds, connectNulls, cropThreshold, dragDrop, jitter,\n         *               keys, pointPlacement, sizeByAbsoluteValue, step, xAxis,\n         *               yAxis, zMax, zMin, dataSorting, boostThreshold,\n         *               boostBlending\n         * @product      highcharts\n         * @since        7.0.0\n         * @requires     highcharts-more\n         * @optionparent plotOptions.packedbubble\n         *\n         * @private\n         */\n        const PackedBubbleSeriesDefaults = {\n            /**\n             * Minimum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height, divided by the square\n             * root of total number of points.\n             *\n             * @sample highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type {number|string}\n             *\n             * @private\n             */\n            minSize: '10%',\n            /**\n             * Maximum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height, divided by the square\n             * root of total number of points.\n             *\n             * @sample highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type {number|string}\n             *\n             * @private\n             */\n            maxSize: '50%',\n            sizeBy: 'area',\n            zoneAxis: 'y',\n            crisp: false,\n            tooltip: {\n                pointFormat: 'Value: {point.value}'\n            },\n            /**\n             * Flag to determine if nodes are draggable or not. Available for\n             * graph with useSimulation set to true only.\n             *\n             * @since 7.1.0\n             *\n             * @private\n             */\n            draggable: true,\n            /**\n             * An option is giving a possibility to choose between using simulation\n             * for calculating bubble positions. These reflects in both animation\n             * and final position of bubbles. Simulation is also adding options to\n             * the series graph based on used layout. In case of big data sets, with\n             * any performance issues, it is possible to disable animation and pack\n             * bubble in a simple circular way.\n             *\n             * @sample highcharts/series-packedbubble/spiral/\n             *         useSimulation set to false\n             *\n             * @since 7.1.0\n             *\n             * @private\n             */\n            useSimulation: true,\n            /**\n             * Series options for parent nodes.\n             *\n             * @since 8.1.1\n             *\n             * @private\n             */\n            parentNode: {\n                /**\n                 * Allow this series' parent nodes to be selected\n                 * by clicking on the graph.\n                 *\n                 * @since 8.1.1\n                 */\n                allowPointSelect: false\n            },\n            /**\n            /**\n             *\n             * @declare Highcharts.SeriesPackedBubbleDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _node_ in the networkgraph. In v7.0\n                 * defaults to `{key}`, since v7.1 defaults to `undefined` and\n                 * `formatter` is used instead.\n                 *\n                 * @type      {string}\n                 * @since     7.0.0\n                 * @apioption plotOptions.packedbubble.dataLabels.format\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Callback JavaScript function to format the data label for a node.\n                 * Note that if a `format` is defined, the format takes precedence\n                 * and the formatter is ignored.\n                 *\n                 * @type  {Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction}\n                 * @since 7.0.0\n                 */\n                formatter: function () {\n                    const { numberFormatter } = this.series.chart;\n                    const { value } = this.point;\n                    return isNumber(value) ? numberFormatter(value, -1) : '';\n                },\n                /**\n                 * @type      {string}\n                 * @since     7.1.0\n                 * @apioption plotOptions.packedbubble.dataLabels.parentNodeFormat\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * @type  {Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction}\n                 * @since 7.1.0\n                 */\n                parentNodeFormatter: function () {\n                    return this.name;\n                },\n                /**\n                 * @sample {highcharts} highcharts/series-packedbubble/packed-dashboard\n                 *         Dashboard with dataLabels on parentNodes\n                 *\n                 * @declare Highcharts.SeriesPackedBubbleDataLabelsTextPathOptionsObject\n                 * @since   7.1.0\n                 */\n                parentNodeTextPath: {\n                    /**\n                     * Presentation attributes for the text path.\n                     *\n                     * @type      {Highcharts.SVGAttributes}\n                     * @since     7.1.0\n                     * @apioption plotOptions.packedbubble.dataLabels.attributes\n                     */\n                    /**\n                     * Enable or disable `textPath` option for link's or marker's\n                     * data labels.\n                     *\n                     * @since 7.1.0\n                     */\n                    enabled: true\n                },\n                /**\n                 * Options for a _node_ label text which should follow marker's\n                 * shape.\n                 *\n                 * **Note:** Only SVG-based renderer supports this option.\n                 *\n                 * @extends   plotOptions.series.dataLabels.textPath\n                 * @apioption plotOptions.packedbubble.dataLabels.textPath\n                 */\n                padding: 0,\n                style: {\n                    transition: 'opacity 2000ms'\n                }\n            },\n            /**\n             * Options for layout algorithm when simulation is enabled. Inside there\n             * are options to change the speed, padding, initial bubbles positions\n             * and more.\n             *\n             * @extends   plotOptions.networkgraph.layoutAlgorithm\n             * @excluding approximation, attractiveForce, repulsiveForce, theta\n             * @since     7.1.0\n             *\n             * @private\n             */\n            layoutAlgorithm: {\n                /**\n                 * Initial layout algorithm for positioning nodes. Can be one of\n                 * the built-in options (\"circle\", \"random\") or a function where\n                 * positions should be set on each node (`this.nodes`) as\n                 * `node.plotX` and `node.plotY`.\n                 *\n                 * @sample highcharts/series-networkgraph/initial-positions/\n                 *         Initial positions with callback\n                 *\n                 * @type {\"circle\"|\"random\"|Function}\n                 */\n                initialPositions: 'circle',\n                /**\n                 * @sample highcharts/series-packedbubble/initial-radius/\n                 *         Initial radius set to 200\n                 *\n                 * @extends   plotOptions.networkgraph.layoutAlgorithm.initialPositionRadius\n                 * @excluding states\n                 */\n                initialPositionRadius: 20,\n                /**\n                 * The distance between two bubbles, when the algorithm starts to\n                 * treat two bubbles as overlapping. The `bubblePadding` is also the\n                 * expected distance between all the bubbles on simulation end.\n                 */\n                bubblePadding: 5,\n                /**\n                 * Whether bubbles should interact with their parentNode to keep\n                 * them inside.\n                 */\n                parentNodeLimit: false,\n                /**\n                 * Whether series should interact with each other or not. When\n                 * `parentNodeLimit` is set to true, thi option should be set to\n                 * false to avoid sticking points in wrong series parentNode.\n                 */\n                seriesInteraction: true,\n                /**\n                 * In case of split series, this option allows user to drag and\n                 * drop points between series, for changing point related series.\n                 *\n                 * @sample highcharts/series-packedbubble/packed-dashboard/\n                 *         Example of drag'n drop bubbles for bubble kanban\n                 */\n                dragBetweenSeries: false,\n                /**\n                 * Layout algorithm options for parent nodes.\n                 *\n                 * @extends   plotOptions.networkgraph.layoutAlgorithm\n                 * @excluding approximation, attractiveForce, enableSimulation,\n                 *            repulsiveForce, theta\n                 */\n                parentNodeOptions: {\n                    maxIterations: 400,\n                    gravitationalConstant: 0.03,\n                    maxSpeed: 50,\n                    initialPositionRadius: 100,\n                    seriesInteraction: true,\n                    /**\n                     * Styling options for parentNodes markers. Similar to\n                     * line.marker options.\n                     *\n                     * @sample highcharts/series-packedbubble/parentnode-style/\n                     *         Bubble size\n                     *\n                     * @extends   plotOptions.series.marker\n                     * @excluding states\n                     */\n                    marker: {\n                        fillColor: null,\n                        fillOpacity: 1,\n                        lineWidth: null,\n                        lineColor: null,\n                        symbol: 'circle'\n                    }\n                },\n                enableSimulation: true,\n                /**\n                 * Type of the algorithm used when positioning bubbles.\n                 * @ignore-option\n                 */\n                type: 'packedbubble',\n                /**\n                 * Integration type. Integration determines how forces are applied\n                 * on particles. The `packedbubble` integration is based on\n                 * the networkgraph `verlet` integration, where the new position\n                 * is based on a previous position without velocity:\n                 * `newPosition += previousPosition - newPosition`.\n                 *\n                 * @sample highcharts/series-networkgraph/forces/\n                 *\n                 * @ignore-option\n                 */\n                integration: 'packedbubble',\n                maxIterations: 1000,\n                /**\n                 * Whether to split series into individual groups or to mix all\n                 * series together.\n                 *\n                 * @since   7.1.0\n                 * @default false\n                 */\n                splitSeries: false,\n                /**\n                 * Max speed that node can get in one iteration. In terms of\n                 * simulation, it's a maximum translation (in pixels) that a node\n                 * can move (in both, x and y, dimensions). While `friction` is\n                 * applied on all nodes, max speed is applied only for nodes that\n                 * move very fast, for example small or disconnected ones.\n                 *\n                 * @see [layoutAlgorithm.integration](#series.networkgraph.layoutAlgorithm.integration)\n                 *\n                 * @see [layoutAlgorithm.friction](#series.networkgraph.layoutAlgorithm.friction)\n                 */\n                maxSpeed: 5,\n                gravitationalConstant: 0.01,\n                friction: -0.981\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `packedbubble` series. If the [type](#series.packedbubble.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @type      {Object}\n         * @extends   series,plotOptions.packedbubble\n         * @excluding cropThreshold, dataParser, dataSorting, dataURL, dragDrop, stack,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.packedbubble\n         */\n        /**\n         * An array of data points for the series. For the `packedbubble` series type,\n         * points can be given in the following ways:\n         *\n         * 1.  An array of `values`.\n         *\n         *  ```js\n         *     data: [5, 1, 20]\n         *  ```\n         *\n         * 2.  An array of objects with named values. The objects are point\n         * configuration objects as seen below. If the total number of data points\n         * exceeds the series' [turboThreshold](#series.packedbubble.turboThreshold),\n         * this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         value: 1,\n         *         name: \"Point2\",\n         *         color: \"#00FF00\"\n         *     }, {\n         *         value: 5,\n         *         name: \"Point1\",\n         *         color: \"#FF00FF\"\n         *     }]\n         *  ```\n         *\n         * @type      {Array<Object|Array>}\n         * @extends   series.line.data\n         * @excluding marker, x, y\n         * @sample    {highcharts} highcharts/series/data-array-of-objects/\n         *            Config objects\n         * @product   highcharts\n         * @apioption series.packedbubble.data\n         */\n        /**\n         * @type      {Highcharts.SeriesPackedBubbleDataLabelsOptionsObject|Array<Highcharts.SeriesPackedBubbleDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.packedbubble.data.dataLabels\n         */\n        /**\n         * @excluding enabled,enabledThreshold,height,radius,width\n         * @product   highcharts\n         * @apioption series.packedbubble.marker\n         */\n        ''; // adds doclets above to transpiled file\n\n        return PackedBubbleSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/VerletIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2021 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Verlet integration, force is applied on a node immidatelly to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calcualated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distance\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function attractive(link, force, distanceXY) {\n            const massFactor = link.getMass(), translatedX = -distanceXY.x * force * this.diffTemperature, translatedY = -distanceXY.y * force * this.diffTemperature;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.plotX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.plotY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.plotX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.plotY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force funtion. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Verlet integration, force is applied on a node immidatelly to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         */\n        function barycenter() {\n            let gravitationalConstant = this.options.gravitationalConstant, xFactor = this.barycenter.xFactor, yFactor = this.barycenter.yFactor;\n            // To consider:\n            xFactor = (xFactor - (this.box.left + this.box.width) / 2) *\n                gravitationalConstant;\n            yFactor = (yFactor - (this.box.top + this.box.height) / 2) *\n                gravitationalConstant;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    node.plotX -=\n                        xFactor / node.mass / node.degree;\n                    node.plotY -=\n                        yFactor / node.mass / node.degree;\n                }\n            });\n        }\n        /**\n         * Estiamte the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.5);\n        }\n        /**\n         * Integration method.\n         *\n         * In Verlet integration, forces are applied on node immidatelly to it's\n         * `plotX` and `plotY` position.\n         *\n         * Verlet without velocity:\n         *\n         *    x(n+1) = 2 * x(n) - x(n-1) + A(T) * deltaT ^ 2\n         *\n         * where:\n         *     - x(n+1) - new position\n         *     - x(n) - current position\n         *     - x(n-1) - previous position\n         *\n         * Assuming A(t) = 0 (no acceleration) and (deltaT = 1) we get:\n         *\n         *     x(n+1) = x(n) + (x(n) - x(n-1))\n         *\n         * where:\n         *     - (x(n) - x(n-1)) - position change\n         *\n         * TO DO:\n         * Consider Verlet with velocity to support additional\n         * forces. Or even Time-Corrected Verlet by Jonathan\n         * \"lonesock\" Dummer\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout layout object\n         * @param {Highcharts.Point} node node that should be translated\n         */\n        function integrate(layout, node) {\n            let friction = -layout.options.friction, maxSpeed = layout.options.maxSpeed, prevX = node.prevX, prevY = node.prevY, \n            // Apply friciton:\n            diffX = ((node.plotX + node.dispX -\n                prevX) * friction), diffY = ((node.plotY + node.dispY -\n                prevY) * friction), abs = Math.abs, signX = abs(diffX) / (diffX || 1), // need to deal with 0\n            signY = abs(diffY) / (diffY || 1);\n            // Apply max speed:\n            diffX = signX * Math.min(maxSpeed, Math.abs(diffX));\n            diffY = signY * Math.min(maxSpeed, Math.abs(diffY));\n            // Store for the next iteration:\n            node.prevX = node.plotX + node.dispX;\n            node.prevY = node.plotY + node.dispY;\n            // Update positions:\n            node.plotX += diffX;\n            node.plotY += diffY;\n            node.temperature = layout.vectorLength({\n                x: diffX,\n                y: diffY\n            });\n        }\n        /**\n         * Repulsive force.\n         *\n         * In Verlet integration, force is applied on a node immidatelly to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calcualated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distance\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY) {\n            const factor = force * this.diffTemperature / node.mass / node.degree;\n            if (!node.fixedPosition) {\n                node.plotX += distanceXY.x * factor;\n                node.plotY += distanceXY.y * factor;\n            }\n        }\n        /**\n         * Repulsive force funtion. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d * (k > d ? 1 : 0); // Force only for close nodes\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const VerletIntegration = {\n            attractive,\n            attractiveForceFunction,\n            barycenter,\n            getK,\n            integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return VerletIntegration;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleIntegration.js', [_modules['Core/Globals.js'], _modules['Series/Networkgraph/VerletIntegration.js']], function (H, VerletIntegration) {\n        /* *\n         *\n         *  (c) 2010-2021 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function barycenter() {\n            const layout = this, gravitationalConstant = layout.options.gravitationalConstant, box = layout.box, nodes = layout.nodes;\n            let centerX, centerY;\n            for (const node of nodes) {\n                if (layout.options.splitSeries && !node.isParentNode) {\n                    centerX = node.series.parentNode.plotX;\n                    centerY = node.series.parentNode.plotY;\n                }\n                else {\n                    centerX = box.width / 2;\n                    centerY = box.height / 2;\n                }\n                if (!node.fixedPosition) {\n                    node.plotX -=\n                        (node.plotX - centerX) *\n                            gravitationalConstant /\n                            (node.mass * Math.sqrt(nodes.length));\n                    node.plotY -=\n                        (node.plotY - centerY) *\n                            gravitationalConstant /\n                            (node.mass * Math.sqrt(nodes.length));\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function repulsive(node, force, distanceXY, repNode) {\n            const factor = (force * this.diffTemperature / node.mass /\n                node.degree), x = distanceXY.x * factor, y = distanceXY.y * factor;\n            if (!node.fixedPosition) {\n                node.plotX += x;\n                node.plotY += y;\n            }\n            if (!repNode.fixedPosition) {\n                repNode.plotX -= x;\n                repNode.plotY -= y;\n            }\n        }\n        /**\n         * @private\n         */\n        function repulsiveForceFunction(d, k, node, repNode) {\n            return Math.min(d, (node.marker.radius +\n                repNode.marker.radius) / 2);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PackedBubbleIntegration = {\n            barycenter,\n            getK: noop,\n            integrate: VerletIntegration.integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return PackedBubbleIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/EulerIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2021 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calcualated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         * @param {number} distanceR\n             */\n        function attractive(link, force, distanceXY, distanceR) {\n            const massFactor = link.getMass(), translatedX = (distanceXY.x / distanceR) * force, translatedY = (distanceXY.y / distanceR) * force;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.dispX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.dispY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.dispX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.dispY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force funtion. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return d / k }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            return d * d / k;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         */\n        function barycenter() {\n            const gravitationalConstant = this.options.gravitationalConstant, xFactor = this.barycenter.xFactor, yFactor = this.barycenter.yFactor;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    const degree = node.getDegree(), phi = degree * (1 + degree / 2);\n                    node.dispX += ((xFactor - node.plotX) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                    node.dispY += ((yFactor - node.plotY) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                }\n            });\n        }\n        /**\n         * Estiamte the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.3);\n        }\n        /**\n         * Integration method.\n         *\n         * In Euler integration, force were stored in a node, not changing it's\n         * position. Now, in the integrator method, we apply changes.\n         *\n         * Euler:\n         *\n         * Basic form: `x(n+1) = x(n) + v(n)`\n         *\n         * With Rengoild-Fruchterman we get:\n         * `x(n+1) = x(n) + v(n) / length(v(n)) * min(v(n), temperature(n))`\n         * where:\n         * - `x(n+1)`: next position\n         * - `x(n)`: current position\n         * - `v(n)`: velocity (comes from net force)\n         * - `temperature(n)`: current temperature\n         *\n         * Known issues:\n         * Oscillations when force vector has the same magnitude but opposite\n         * direction in the next step. Potentially solved by decreasing force by\n         * `v * (1 / node.degree)`\n         *\n         * Note:\n         * Actually `min(v(n), temperature(n))` replaces simulated annealing.\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout\n         *        Layout object\n         * @param {Highcharts.Point} node\n         *        Node that should be translated\n         */\n        function integrate(layout, node) {\n            let distanceR;\n            node.dispX +=\n                node.dispX * layout.options.friction;\n            node.dispY +=\n                node.dispY * layout.options.friction;\n            distanceR = node.temperature = layout.vectorLength({\n                x: node.dispX,\n                y: node.dispY\n            });\n            if (distanceR !== 0) {\n                node.plotX += (node.dispX / distanceR *\n                    Math.min(Math.abs(node.dispX), layout.temperature));\n                node.plotY += (node.dispY / distanceR *\n                    Math.min(Math.abs(node.dispY), layout.temperature));\n            }\n        }\n        /**\n         * Repulsive force.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calcualated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY, distanceR) {\n            node.dispX +=\n                (distanceXY.x / distanceR) * force / node.degree;\n            node.dispY +=\n                (distanceXY.y / distanceR) * force / node.degree;\n        }\n        /**\n         * Repulsive force funtion. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`.\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return k / d }`\n         *\n         * standard:\n         *    `function (d, k) { return k * k / d }`\n         *\n         * grid-variant:\n         *    `function (d, k) { return k * k / d * (2 * k - d > 0 ? 1 : 0) }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            return k * k / d;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const EulerIntegration = {\n            attractive,\n            attractiveForceFunction,\n            barycenter,\n            getK,\n            integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return EulerIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTreeNode.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2021 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree node class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTreeNode\n         *\n         * @param {Highcharts.Dictionary<number>} box\n         *        Available space for the node\n         */\n        class QuadTreeNode {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(box) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * Read only. If QuadTreeNode is an external node, Point is stored in\n                 * `this.body`.\n                 *\n                 * @name Highcharts.QuadTreeNode#body\n                 * @type {boolean|Highcharts.Point}\n                 */\n                this.body = false;\n                /**\n                 * Read only. Internal nodes when created are empty to reserve the\n                 * space. If Point is added to this QuadTreeNode, QuadTreeNode is no\n                 * longer empty.\n                 *\n                 * @name Highcharts.QuadTreeNode#isEmpty\n                 * @type {boolean}\n                 */\n                this.isEmpty = false;\n                /**\n                 * Read only. Flag to determine if QuadTreeNode is internal (and has\n                 * subnodes with mass and central position) or external (bound to\n                 * Point).\n                 *\n                 * @name Highcharts.QuadTreeNode#isInternal\n                 * @type {boolean}\n                 */\n                this.isInternal = false;\n                /**\n                 * Read only. Array of subnodes. Empty if QuadTreeNode has just one\n                 * Point. When added another Point to this QuadTreeNode, array is\n                 * filled with four subnodes.\n                 *\n                 * @name Highcharts.QuadTreeNode#nodes\n                 * @type {Array<Highcharts.QuadTreeNode>}\n                 */\n                this.nodes = [];\n                /**\n                 * Read only. The available space for node.\n                 *\n                 * @name Highcharts.QuadTreeNode#box\n                 * @type {Highcharts.Dictionary<number>}\n                 */\n                this.box = box;\n                /**\n                 * Read only. The minium of width and height values.\n                 *\n                 * @name Highcharts.QuadTreeNode#boxSize\n                 * @type {number}\n                 */\n                this.boxSize = Math.min(box.width, box.height);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * When inserting another node into the box, that already hove one node,\n             * divide the available space into another four quadrants.\n             *\n             * Indexes of quadrants are:\n             * ```\n             * -------------               -------------\n             * |           |               |     |     |\n             * |           |               |  0  |  1  |\n             * |           |   divide()    |     |     |\n             * |     1     | ----------->  -------------\n             * |           |               |     |     |\n             * |           |               |  3  |  2  |\n             * |           |               |     |     |\n             * -------------               -------------\n             * ```\n             */\n            divideBox() {\n                const halfWidth = this.box.width / 2, halfHeight = this.box.height / 2;\n                // Top left\n                this.nodes[0] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Top right\n                this.nodes[1] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom right\n                this.nodes[2] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom left\n                this.nodes[3] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n            }\n            /**\n             * Determine which of the quadrants should be used when placing node in\n             * the QuadTree. Returned index is always in range `< 0 , 3 >`.\n             * @private\n             */\n            getBoxPosition(point) {\n                const left = point.plotX < this.box.left + this.box.width / 2, top = point.plotY < this.box.top + this.box.height / 2;\n                let index;\n                if (left) {\n                    if (top) {\n                        // Top left\n                        index = 0;\n                    }\n                    else {\n                        // Bottom left\n                        index = 3;\n                    }\n                }\n                else {\n                    if (top) {\n                        // Top right\n                        index = 1;\n                    }\n                    else {\n                        // Bottom right\n                        index = 2;\n                    }\n                }\n                return index;\n            }\n            /**\n             * Insert recursively point(node) into the QuadTree. If the given\n             * quadrant is already occupied, divide it into smaller quadrants.\n             *\n             * @param {Highcharts.Point} point\n             *        Point/node to be inserted\n             * @param {number} depth\n             *        Max depth of the QuadTree\n             */\n            insert(point, depth) {\n                let newQuadTreeNode;\n                if (this.isInternal) {\n                    // Internal node:\n                    this.nodes[this.getBoxPosition(point)].insert(point, depth - 1);\n                }\n                else {\n                    this.isEmpty = false;\n                    if (!this.body) {\n                        // First body in a quadrant:\n                        this.isInternal = false;\n                        this.body = point;\n                    }\n                    else {\n                        if (depth) {\n                            // Every other body in a quadrant:\n                            this.isInternal = true;\n                            this.divideBox();\n                            // Reinsert main body only once:\n                            if (this.body !== true) {\n                                this.nodes[this.getBoxPosition(this.body)]\n                                    .insert(this.body, depth - 1);\n                                this.body = true;\n                            }\n                            // Add second body:\n                            this.nodes[this.getBoxPosition(point)]\n                                .insert(point, depth - 1);\n                        }\n                        else {\n                            // We are below max allowed depth. That means either:\n                            // - really huge number of points\n                            // - falling two points into exactly the same position\n                            // In this case, create another node in the QuadTree.\n                            //\n                            // Alternatively we could add some noise to the\n                            // position, but that could result in different\n                            // rendered chart in exporting.\n                            newQuadTreeNode = new QuadTreeNode({\n                                top: point.plotX || NaN,\n                                left: point.plotY || NaN,\n                                // Width/height below 1px\n                                width: 0.1,\n                                height: 0.1\n                            });\n                            newQuadTreeNode.body = point;\n                            newQuadTreeNode.isInternal = false;\n                            this.nodes.push(newQuadTreeNode);\n                        }\n                    }\n                }\n            }\n            /**\n             * Each quad node requires it's mass and center position. That mass and\n             * position is used to imitate real node in the layout by approximation.\n             */\n            updateMassAndCenter() {\n                let mass = 0, plotX = 0, plotY = 0;\n                if (this.isInternal) {\n                    // Calcualte weightened mass of the quad node:\n                    for (const pointMass of this.nodes) {\n                        if (!pointMass.isEmpty) {\n                            mass += pointMass.mass;\n                            plotX += pointMass.plotX * pointMass.mass;\n                            plotY += pointMass.plotY * pointMass.mass;\n                        }\n                    }\n                    plotX /= mass;\n                    plotY /= mass;\n                }\n                else if (this.body) {\n                    // Just one node, use coordinates directly:\n                    mass = this.body.mass;\n                    plotX = this.body.plotX;\n                    plotY = this.body.plotY;\n                }\n                // Store details:\n                this.mass = mass;\n                this.plotX = plotX;\n                this.plotY = plotY;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTreeNode;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTree.js', [_modules['Series/Networkgraph/QuadTreeNode.js']], function (QuadTreeNode) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2021 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTree\n         *\n         * @param {number} x\n         *        Left position of the plotting area\n         * @param {number} y\n         *        Top position of the plotting area\n         * @param {number} width\n         *        Width of the plotting area\n         * @param {number} height\n         *        Height of the plotting area\n         */\n        class QuadTree {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(x, y, width, height) {\n                // Boundary rectangle:\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: width,\n                    height: height\n                };\n                this.maxDepth = 25;\n                this.root = new QuadTreeNode(this.box);\n                this.root.isInternal = true;\n                this.root.isRoot = true;\n                this.root.divideBox();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Calculate mass of the each QuadNode in the tree.\n             */\n            calculateMassAndCenter() {\n                this.visitNodeRecursive(null, null, function (node) {\n                    node.updateMassAndCenter();\n                });\n            }\n            /**\n             * Insert nodes into the QuadTree\n             *\n             * @param {Array<Highcharts.Point>} points\n             *        Points as nodes\n             */\n            insertNodes(points) {\n                for (const point of points) {\n                    this.root.insert(point, this.maxDepth);\n                }\n            }\n            /**\n             * Depfth first treversal (DFS). Using `before` and `after` callbacks,\n             * we can get two results: preorder and postorder traversals, reminder:\n             *\n             * ```\n             *     (a)\n             *     / \\\n             *   (b) (c)\n             *   / \\\n             * (d) (e)\n             * ```\n             *\n             * DFS (preorder): `a -> b -> d -> e -> c`\n             *\n             * DFS (postorder): `d -> e -> b -> c -> a`\n             *\n             * @param {Highcharts.QuadTreeNode|null} node\n             *        QuadTree node\n             * @param {Function} [beforeCallback]\n             *        Function to be called before visiting children nodes.\n             * @param {Function} [afterCallback]\n             *        Function to be called after visiting children nodes.\n             */\n            visitNodeRecursive(node, beforeCallback, afterCallback) {\n                let goFurther;\n                if (!node) {\n                    node = this.root;\n                }\n                if (node === this.root && beforeCallback) {\n                    goFurther = beforeCallback(node);\n                }\n                if (goFurther === false) {\n                    return;\n                }\n                for (const qtNode of node.nodes) {\n                    if (qtNode.isInternal) {\n                        if (beforeCallback) {\n                            goFurther = beforeCallback(qtNode);\n                        }\n                        if (goFurther === false) {\n                            continue;\n                        }\n                        this.visitNodeRecursive(qtNode, beforeCallback, afterCallback);\n                    }\n                    else if (qtNode.body) {\n                        if (beforeCallback) {\n                            beforeCallback(qtNode.body);\n                        }\n                    }\n                    if (afterCallback) {\n                        afterCallback(qtNode);\n                    }\n                }\n                if (node === this.root && afterCallback) {\n                    afterCallback(node);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTree;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/ReingoldFruchtermanLayout.js', [_modules['Series/Networkgraph/EulerIntegration.js'], _modules['Core/Globals.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Series/Networkgraph/QuadTree.js'], _modules['Core/Utilities.js'], _modules['Series/Networkgraph/VerletIntegration.js']], function (EulerIntegration, H, GraphLayout, QuadTree, U, VerletIntegration) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2021 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { clamp, defined, isFunction, fireEvent, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Reingold-Fruchterman algorithm from\n         * \"Graph Drawing by Force-directed Placement\" paper.\n         * @private\n         */\n        class ReingoldFruchtermanLayout {\n            constructor() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                this.attractiveForce = void 0;\n                this.box = {};\n                this.currentStep = 0;\n                this.initialRendering = true;\n                this.integration = void 0;\n                this.links = [];\n                this.nodes = [];\n                this.options = void 0;\n                this.quadTree = void 0;\n                this.repulsiveForce = void 0;\n                this.series = [];\n                this.simulation = false;\n            }\n            static compose(ChartClass) {\n                GraphLayout.compose(ChartClass);\n                GraphLayout.integrations.euler = EulerIntegration;\n                GraphLayout.integrations.verlet = VerletIntegration;\n                GraphLayout.layouts['reingold-fruchterman'] =\n                    ReingoldFruchtermanLayout;\n            }\n            init(options) {\n                this.options = options;\n                this.nodes = [];\n                this.links = [];\n                this.series = [];\n                this.box = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n                this.setInitialRendering(true);\n                this.integration =\n                    GraphLayout.integrations[options.integration];\n                this.enableSimulation = options.enableSimulation;\n                this.attractiveForce = pick(options.attractiveForce, this.integration.attractiveForceFunction);\n                this.repulsiveForce = pick(options.repulsiveForce, this.integration.repulsiveForceFunction);\n                this.approximation = options.approximation;\n            }\n            updateSimulation(enable) {\n                this.enableSimulation = pick(enable, this.options.enableSimulation);\n            }\n            start() {\n                const layout = this, series = this.series, options = this.options;\n                layout.currentStep = 0;\n                layout.forces = series[0] && series[0].forces || [];\n                layout.chart = series[0] && series[0].chart;\n                if (layout.initialRendering) {\n                    layout.initPositions();\n                    // Render elements in initial positions:\n                    series.forEach(function (s) {\n                        s.finishedAnimating = true; // #13169\n                        s.render();\n                    });\n                }\n                layout.setK();\n                layout.resetSimulation(options);\n                if (layout.enableSimulation) {\n                    layout.step();\n                }\n            }\n            step() {\n                const anyLayout = this, allSeries = this.series;\n                // Algorithm:\n                this.currentStep++;\n                if (this.approximation === 'barnes-hut') {\n                    this.createQuadTree();\n                    this.quadTree.calculateMassAndCenter();\n                }\n                for (const forceName of this.forces || []) {\n                    anyLayout[forceName + 'Forces'](this.temperature);\n                }\n                // Limit to the plotting area and cool down:\n                this.applyLimits();\n                // Cool down the system:\n                this.temperature = this.coolDown(this.startTemperature, this.diffTemperature, this.currentStep);\n                this.prevSystemTemperature = this.systemTemperature;\n                this.systemTemperature = this.getSystemTemperature();\n                if (this.enableSimulation) {\n                    for (const series of allSeries) {\n                        // Chart could be destroyed during the simulation\n                        if (series.chart) {\n                            series.render();\n                        }\n                    }\n                    if (this.maxIterations-- &&\n                        isFinite(this.temperature) &&\n                        !this.isStable()) {\n                        if (this.simulation) {\n                            win.cancelAnimationFrame(this.simulation);\n                        }\n                        this.simulation = win.requestAnimationFrame(() => this.step());\n                    }\n                    else {\n                        this.simulation = false;\n                        this.series.forEach((s) => {\n                            fireEvent(s, 'afterSimulation');\n                        });\n                    }\n                }\n            }\n            stop() {\n                if (this.simulation) {\n                    win.cancelAnimationFrame(this.simulation);\n                }\n            }\n            setArea(x, y, w, h) {\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: w,\n                    height: h\n                };\n            }\n            setK() {\n                // Optimal distance between nodes,\n                // available space around the node:\n                this.k = this.options.linkLength || this.integration.getK(this);\n            }\n            addElementsToCollection(elements, collection) {\n                for (const element of elements) {\n                    if (collection.indexOf(element) === -1) {\n                        collection.push(element);\n                    }\n                }\n            }\n            removeElementFromCollection(element, collection) {\n                const index = collection.indexOf(element);\n                if (index !== -1) {\n                    collection.splice(index, 1);\n                }\n            }\n            clear() {\n                this.nodes.length = 0;\n                this.links.length = 0;\n                this.series.length = 0;\n                this.resetSimulation();\n            }\n            resetSimulation() {\n                this.forcedStop = false;\n                this.systemTemperature = 0;\n                this.setMaxIterations();\n                this.setTemperature();\n                this.setDiffTemperature();\n            }\n            restartSimulation() {\n                if (!this.simulation) {\n                    // When dragging nodes, we don't need to calculate\n                    // initial positions and rendering nodes:\n                    this.setInitialRendering(false);\n                    // Start new simulation:\n                    if (!this.enableSimulation) {\n                        // Run only one iteration to speed things up:\n                        this.setMaxIterations(1);\n                    }\n                    else {\n                        this.start();\n                    }\n                    if (this.chart) {\n                        this.chart.redraw();\n                    }\n                    // Restore defaults:\n                    this.setInitialRendering(true);\n                }\n                else {\n                    // Extend current simulation:\n                    this.resetSimulation();\n                }\n            }\n            setMaxIterations(maxIterations) {\n                this.maxIterations = pick(maxIterations, this.options.maxIterations);\n            }\n            setTemperature() {\n                this.temperature = this.startTemperature =\n                    Math.sqrt(this.nodes.length);\n            }\n            setDiffTemperature() {\n                this.diffTemperature = this.startTemperature /\n                    (this.options.maxIterations + 1);\n            }\n            setInitialRendering(enable) {\n                this.initialRendering = enable;\n            }\n            createQuadTree() {\n                this.quadTree = new QuadTree(this.box.left, this.box.top, this.box.width, this.box.height);\n                this.quadTree.insertNodes(this.nodes);\n            }\n            initPositions() {\n                const initialPositions = this.options.initialPositions;\n                if (isFunction(initialPositions)) {\n                    initialPositions.call(this);\n                    for (const node of this.nodes) {\n                        if (!defined(node.prevX)) {\n                            node.prevX = node.plotX;\n                        }\n                        if (!defined(node.prevY)) {\n                            node.prevY = node.plotY;\n                        }\n                        node.dispX = 0;\n                        node.dispY = 0;\n                    }\n                }\n                else if (initialPositions === 'circle') {\n                    this.setCircularPositions();\n                }\n                else {\n                    this.setRandomPositions();\n                }\n            }\n            setCircularPositions() {\n                const box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, angle = 2 * Math.PI / nodesLength, rootNodes = nodes.filter(function (node) {\n                    return node.linksTo.length === 0;\n                }), visitedNodes = {}, radius = this.options.initialPositionRadius, addToNodes = (node) => {\n                    for (const link of node.linksFrom || []) {\n                        if (!visitedNodes[link.toNode.id]) {\n                            visitedNodes[link.toNode.id] = true;\n                            sortedNodes.push(link.toNode);\n                            addToNodes(link.toNode);\n                        }\n                    }\n                };\n                let sortedNodes = [];\n                // Start with identified root nodes an sort the nodes by their\n                // hierarchy. In trees, this ensures that branches don't cross\n                // eachother.\n                for (const rootNode of rootNodes) {\n                    sortedNodes.push(rootNode);\n                    addToNodes(rootNode);\n                }\n                // Cyclic tree, no root node found\n                if (!sortedNodes.length) {\n                    sortedNodes = nodes;\n                    // Dangling, cyclic trees\n                }\n                else {\n                    for (const node of nodes) {\n                        if (sortedNodes.indexOf(node) === -1) {\n                            sortedNodes.push(node);\n                        }\n                    }\n                }\n                let node;\n                // Initial positions are laid out along a small circle, appearing\n                // as a cluster in the middle\n                for (let i = 0, iEnd = sortedNodes.length; i < iEnd; ++i) {\n                    node = sortedNodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width / 2 + radius * Math.cos(i * angle));\n                    node.plotY = node.prevY = pick(node.plotY, box.height / 2 + radius * Math.sin(i * angle));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            setRandomPositions() {\n                const box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, \n                /**\n                 * Return a repeatable, quasi-random number based on an integer\n                 * input. For the initial positions\n                 * @private\n                 */\n                unrandom = (n) => {\n                    let rand = n * n / Math.PI;\n                    rand = rand - Math.floor(rand);\n                    return rand;\n                };\n                let node;\n                // Initial positions:\n                for (let i = 0, iEnd = nodes.length; i < iEnd; ++i) {\n                    node = nodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width * unrandom(i));\n                    node.plotY = node.prevY = pick(node.plotY, box.height * unrandom(nodesLength + i));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            force(name, ...args) {\n                this.integration[name].apply(this, args);\n            }\n            barycenterForces() {\n                this.getBarycenter();\n                this.force('barycenter');\n            }\n            getBarycenter() {\n                let systemMass = 0, cx = 0, cy = 0;\n                for (const node of this.nodes) {\n                    cx += node.plotX * node.mass;\n                    cy += node.plotY * node.mass;\n                    systemMass += node.mass;\n                }\n                this.barycenter = {\n                    x: cx,\n                    y: cy,\n                    xFactor: cx / systemMass,\n                    yFactor: cy / systemMass\n                };\n                return this.barycenter;\n            }\n            barnesHutApproximation(node, quadNode) {\n                const distanceXY = this.getDistXY(node, quadNode), distanceR = this.vectorLength(distanceXY);\n                let goDeeper, force;\n                if (node !== quadNode && distanceR !== 0) {\n                    if (quadNode.isInternal) {\n                        // Internal node:\n                        if (quadNode.boxSize / distanceR <\n                            this.options.theta &&\n                            distanceR !== 0) {\n                            // Treat as an external node:\n                            force = this.repulsiveForce(distanceR, this.k);\n                            this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                            goDeeper = false;\n                        }\n                        else {\n                            // Go deeper:\n                            goDeeper = true;\n                        }\n                    }\n                    else {\n                        // External node, direct force:\n                        force = this.repulsiveForce(distanceR, this.k);\n                        this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                    }\n                }\n                return goDeeper;\n            }\n            repulsiveForces() {\n                if (this.approximation === 'barnes-hut') {\n                    for (const node of this.nodes) {\n                        this.quadTree.visitNodeRecursive(null, (quadNode) => (this.barnesHutApproximation(node, quadNode)));\n                    }\n                }\n                else {\n                    let force, distanceR, distanceXY;\n                    for (const node of this.nodes) {\n                        for (const repNode of this.nodes) {\n                            if (\n                            // Node cannot repulse itself:\n                            node !== repNode &&\n                                // Only close nodes affect each other:\n                                // layout.getDistR(node, repNode) < 2 * k &&\n                                // Not dragged:\n                                !node.fixedPosition) {\n                                distanceXY = this.getDistXY(node, repNode);\n                                distanceR = this.vectorLength(distanceXY);\n                                if (distanceR !== 0) {\n                                    force = this.repulsiveForce(distanceR, this.k);\n                                    this.force('repulsive', node, force * repNode.mass, distanceXY, distanceR);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            attractiveForces() {\n                let distanceXY, distanceR, force;\n                for (const link of this.links) {\n                    if (link.fromNode && link.toNode) {\n                        distanceXY = this.getDistXY(link.fromNode, link.toNode);\n                        distanceR = this.vectorLength(distanceXY);\n                        if (distanceR !== 0) {\n                            force = this.attractiveForce(distanceR, this.k);\n                            this.force('attractive', link, force, distanceXY, distanceR);\n                        }\n                    }\n                }\n            }\n            applyLimits() {\n                const nodes = this.nodes;\n                for (const node of nodes) {\n                    if (node.fixedPosition) {\n                        return;\n                    }\n                    this.integration.integrate(this, node);\n                    this.applyLimitBox(node, this.box);\n                    // Reset displacement:\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            /**\n             * External box that nodes should fall. When hitting an edge, node\n             * should stop or bounce.\n             * @private\n             */\n            applyLimitBox(node, box) {\n                const radius = node.radius;\n                /*\n                TO DO: Consider elastic collision instead of stopping.\n                o' means end position when hitting plotting area edge:\n\n                - \"inelastic\":\n                o\n                    \\\n                ______\n                |  o'\n                |   \\\n                |    \\\n\n                - \"elastic\"/\"bounced\":\n                o\n                    \\\n                ______\n                |  ^\n                | / \\\n                |o'  \\\n\n                Euler sample:\n                if (plotX < 0) {\n                    plotX = 0;\n                    dispX *= -1;\n                }\n\n                if (plotX > box.width) {\n                    plotX = box.width;\n                    dispX *= -1;\n                }\n\n                */\n                // Limit X-coordinates:\n                node.plotX = clamp(node.plotX, box.left + radius, box.width - radius);\n                // Limit Y-coordinates:\n                node.plotY = clamp(node.plotY, box.top + radius, box.height - radius);\n            }\n            /**\n             * From \"A comparison of simulated annealing cooling strategies\" by\n             * Nourani and Andresen work.\n             * @private\n             */\n            coolDown(temperature, temperatureStep, currentStep) {\n                // Logarithmic:\n                /*\n                return Math.sqrt(this.nodes.length) -\n                    Math.log(\n                        currentStep * layout.diffTemperature\n                    );\n                */\n                // Exponential:\n                /*\n                let alpha = 0.1;\n                layout.temperature = Math.sqrt(layout.nodes.length) *\n                    Math.pow(alpha, layout.diffTemperature);\n                */\n                // Linear:\n                return temperature - temperatureStep * currentStep;\n            }\n            isStable() {\n                return Math.abs(this.systemTemperature -\n                    this.prevSystemTemperature) < 0.00001 || this.temperature <= 0;\n            }\n            getSystemTemperature() {\n                let value = 0;\n                for (const node of this.nodes) {\n                    value += node.temperature;\n                }\n                return value;\n            }\n            vectorLength(vector) {\n                return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n            }\n            getDistR(nodeA, nodeB) {\n                const distance = this.getDistXY(nodeA, nodeB);\n                return this.vectorLength(distance);\n            }\n            getDistXY(nodeA, nodeB) {\n                const xDist = nodeA.plotX - nodeB.plotX, yDist = nodeA.plotY - nodeB.plotY;\n                return {\n                    x: xDist,\n                    y: yDist,\n                    absX: Math.abs(xDist),\n                    absY: Math.abs(yDist)\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ReingoldFruchtermanLayout;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleLayout.js', [_modules['Series/GraphLayoutComposition.js'], _modules['Series/PackedBubble/PackedBubbleIntegration.js'], _modules['Series/Networkgraph/ReingoldFruchtermanLayout.js'], _modules['Core/Utilities.js']], function (GraphLayout, PackedBubbleIntegration, ReingoldFruchtermanLayout, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function chartGetSelectedParentNodes() {\n            const allSeries = this.series, selectedParentsNodes = [];\n            allSeries.forEach((series) => {\n                if (series.parentNode && series.parentNode.selected) {\n                    selectedParentsNodes.push(series.parentNode);\n                }\n            });\n            return selectedParentsNodes;\n        }\n        /**\n         * Remove accumulated data points to redistribute all of them again\n         * (i.e after hiding series by legend)\n         * @private\n         */\n        function onChartBeforeRedraw() {\n            if (this.allDataPoints) {\n                delete this.allDataPoints;\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PackedBubbleLayout extends ReingoldFruchtermanLayout {\n            constructor() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                super(...arguments);\n                this.index = NaN;\n                this.nodes = [];\n                this.options = void 0;\n                this.series = [];\n            }\n            static compose(ChartClass) {\n                ReingoldFruchtermanLayout.compose(ChartClass);\n                GraphLayout.integrations.packedbubble = PackedBubbleIntegration;\n                GraphLayout.layouts.packedbubble = PackedBubbleLayout;\n                if (U.pushUnique(composedMembers, ChartClass)) {\n                    addEvent(ChartClass, 'beforeRedraw', onChartBeforeRedraw);\n                    const chartProto = ChartClass.prototype;\n                    chartProto.getSelectedParentNodes = chartGetSelectedParentNodes;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            beforeStep() {\n                if (this.options.marker) {\n                    this.series.forEach((series) => {\n                        if (series) {\n                            series.calculateParentRadius();\n                        }\n                    });\n                }\n            }\n            // #14439, new stable check.\n            isStable() {\n                const tempDiff = Math.abs(this.prevSystemTemperature -\n                    this.systemTemperature);\n                const upScaledTemperature = 10 * this.systemTemperature /\n                    Math.sqrt(this.nodes.length);\n                return Math.abs(upScaledTemperature) < 1 &&\n                    tempDiff < 0.00001 ||\n                    this.temperature <= 0;\n            }\n            setCircularPositions() {\n                const layout = this, box = layout.box, nodes = layout.nodes, nodesLength = nodes.length + 1, angle = 2 * Math.PI / nodesLength, radius = layout.options.initialPositionRadius;\n                let centerX, centerY, index = 0;\n                for (const node of nodes) {\n                    if (layout.options.splitSeries &&\n                        !node.isParentNode) {\n                        centerX = node.series.parentNode.plotX;\n                        centerY = node.series.parentNode.plotY;\n                    }\n                    else {\n                        centerX = box.width / 2;\n                        centerY = box.height / 2;\n                    }\n                    node.plotX = node.prevX = pick(node.plotX, centerX +\n                        radius * Math.cos(node.index || index * angle));\n                    node.plotY = node.prevY = pick(node.plotY, centerY +\n                        radius * Math.sin(node.index || index * angle));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                    index++;\n                }\n            }\n            repulsiveForces() {\n                const layout = this, bubblePadding = layout.options.bubblePadding;\n                let force, distanceR, distanceXY;\n                layout.nodes.forEach((node) => {\n                    node.degree = node.mass;\n                    node.neighbours = 0;\n                    layout.nodes.forEach((repNode) => {\n                        force = 0;\n                        if (\n                        // Node cannot repulse itself:\n                        node !== repNode &&\n                            // Only close nodes affect each other:\n                            // Not dragged:\n                            !node.fixedPosition &&\n                            (layout.options.seriesInteraction ||\n                                node.series === repNode.series)) {\n                            distanceXY = layout.getDistXY(node, repNode);\n                            distanceR = (layout.vectorLength(distanceXY) -\n                                (node.marker.radius +\n                                    repNode.marker.radius +\n                                    bubblePadding));\n                            // TODO padding configurable\n                            if (distanceR < 0) {\n                                node.degree += 0.01;\n                                node.neighbours++;\n                                force = layout.repulsiveForce(-distanceR / Math.sqrt(node.neighbours), layout.k, node, repNode);\n                            }\n                            layout.force('repulsive', node, force * repNode.mass, distanceXY, repNode, distanceR);\n                        }\n                    });\n                });\n            }\n            applyLimitBox(node, box) {\n                const layout = this, factor = 0.01;\n                let distanceXY, distanceR;\n                // parentNodeLimit should be used together\n                // with seriesInteraction: false\n                if (layout.options.splitSeries &&\n                    !node.isParentNode &&\n                    layout.options.parentNodeLimit) {\n                    distanceXY = layout.getDistXY(node, node.series.parentNode);\n                    distanceR = (node.series.parentNodeRadius -\n                        node.marker.radius -\n                        layout.vectorLength(distanceXY));\n                    if (distanceR < 0 &&\n                        distanceR > -2 * node.marker.radius) {\n                        node.plotX -= distanceXY.x * factor;\n                        node.plotY -= distanceXY.y * factor;\n                    }\n                }\n                super.applyLimitBox(node, box);\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        GraphLayout.layouts.packedbubble = PackedBubbleLayout;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PackedBubbleLayout;\n    });\n    _registerModule(_modules, 'Series/SimulationSeriesUtilities.js', [_modules['Core/Utilities.js'], _modules['Core/Animation/AnimationUtilities.js']], function (U, A) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { syncTimeout } = U;\n        const { animObject } = A;\n        /**\n         * Create a setTimeout for the first drawDataLabels()\n         * based on the dataLabels.animation.defer value\n         * for series which have enabled simulation.\n         * @private\n         */\n        function initDataLabelsDefer() {\n            const dlOptions = this.options.dataLabels;\n            // drawDataLabels() fires for the first time after\n            // dataLabels.animation.defer time unless\n            // the dataLabels.animation = false or dataLabels.defer = false\n            // or if the simulation is disabled\n            if (!dlOptions?.defer ||\n                !this.options.layoutAlgorithm?.enableSimulation) {\n                this.deferDataLabels = false;\n            }\n            else {\n                syncTimeout(() => {\n                    this.deferDataLabels = false;\n                }, dlOptions ? animObject(dlOptions.animation).defer : 0);\n            }\n        }\n        /**\n         * Initialize the SVG group for the DataLabels with correct opacities\n         * and correct styles so that the animation for the series that have\n         * simulation enabled works fine.\n         * @private\n         */\n        function initDataLabels() {\n            const series = this, dlOptions = series.options.dataLabels;\n            if (!series.dataLabelsGroup) {\n                const dataLabelsGroup = this.initDataLabelsGroup();\n                // Apply the dataLabels.style not only to the\n                // individual dataLabels but also to the entire group\n                if (!series.chart.styledMode && dlOptions?.style) {\n                    dataLabelsGroup.css(dlOptions.style);\n                }\n                // Initialize the opacity of the group to 0 (start of animation)\n                dataLabelsGroup.attr({ opacity: 0 });\n                if (series.visible) { // #2597, #3023, #3024\n                    dataLabelsGroup.show();\n                }\n                return dataLabelsGroup;\n            }\n            series.dataLabelsGroup.attr({ opacity: 1 });\n            return series.dataLabelsGroup;\n        }\n        const DataLabelsDeferUtils = {\n            initDataLabels,\n            initDataLabelsDefer\n        };\n\n        return DataLabelsDeferUtils;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleSeries.js', [_modules['Core/Color/Color.js'], _modules['Series/DragNodesComposition.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Core/Globals.js'], _modules['Series/PackedBubble/PackedBubblePoint.js'], _modules['Series/PackedBubble/PackedBubbleSeriesDefaults.js'], _modules['Series/PackedBubble/PackedBubbleLayout.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/SimulationSeriesUtilities.js'], _modules['Core/Utilities.js'], _modules['Core/Animation/AnimationUtilities.js']], function (Color, DragNodesComposition, GraphLayout, H, PackedBubblePoint, PackedBubbleSeriesDefaults, PackedBubbleLayout, SeriesRegistry, D, U, A) {\n        /* *\n         *\n         *  (c) 2010-2021 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { noop } = H;\n        const { series: { prototype: seriesProto }, seriesTypes: { bubble: BubbleSeries } } = SeriesRegistry;\n        const { initDataLabels, initDataLabelsDefer } = D;\n        const { addEvent, clamp, defined, extend, fireEvent, isArray, isNumber, merge, pick, syncTimeout } = U;\n        const { animObject } = A;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.packedbubble\n         *\n         * @extends Highcharts.Series\n         */\n        class PackedBubbleSeries extends BubbleSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.chart = void 0;\n                this.data = void 0;\n                this.layout = void 0;\n                this.options = void 0;\n                this.parentNodeMass = 0;\n                this.points = void 0;\n                this.xData = void 0;\n                this.deferDataLabels = true;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, LegendClass, SeriesClass) {\n                BubbleSeries.compose(AxisClass, ChartClass, LegendClass, SeriesClass);\n                DragNodesComposition.compose(ChartClass);\n                PackedBubbleLayout.compose(ChartClass);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Create a single array of all points from all series\n             * @private\n             */\n            accumulateAllPoints() {\n                const chart = this.chart, allDataPoints = [];\n                let yData;\n                for (const series of chart.series) {\n                    if (series.is('packedbubble') && // #13574\n                        series.reserveSpace()) {\n                        yData = series.yData || [];\n                        // add data to array only if series is visible\n                        for (let j = 0; j < yData.length; j++) {\n                            allDataPoints.push([\n                                null, null,\n                                yData[j],\n                                series.index,\n                                j,\n                                {\n                                    id: j,\n                                    marker: {\n                                        radius: 0\n                                    }\n                                }\n                            ]);\n                        }\n                    }\n                }\n                return allDataPoints;\n            }\n            /**\n             * Adding the basic layout to series points.\n             * @private\n             */\n            addLayout() {\n                const layoutOptions = this.options.layoutAlgorithm =\n                    this.options.layoutAlgorithm || {}, layoutType = layoutOptions.type || 'packedbubble', chartOptions = this.chart.options.chart;\n                let graphLayoutsStorage = this.chart.graphLayoutsStorage, graphLayoutsLookup = this.chart.graphLayoutsLookup, layout;\n                if (!graphLayoutsStorage) {\n                    this.chart.graphLayoutsStorage = graphLayoutsStorage = {};\n                    this.chart.graphLayoutsLookup = graphLayoutsLookup = [];\n                }\n                layout = graphLayoutsStorage[layoutType];\n                if (!layout) {\n                    layoutOptions.enableSimulation =\n                        !defined(chartOptions.forExport) ?\n                            layoutOptions.enableSimulation :\n                            !chartOptions.forExport;\n                    graphLayoutsStorage[layoutType] = layout =\n                        new GraphLayout.layouts[layoutType]();\n                    layout.init(layoutOptions);\n                    graphLayoutsLookup.splice(layout.index, 0, layout);\n                }\n                this.layout = layout;\n                this.points.forEach((node) => {\n                    node.mass = 2;\n                    node.degree = 1;\n                    node.collisionNmb = 1;\n                });\n                layout.setArea(0, 0, this.chart.plotWidth, this.chart.plotHeight);\n                layout.addElementsToCollection([this], layout.series);\n                layout.addElementsToCollection(this.points, layout.nodes);\n            }\n            /**\n             * Function responsible for adding series layout, used for parent nodes.\n             * @private\n             */\n            addSeriesLayout() {\n                const layoutOptions = this.options.layoutAlgorithm =\n                    this.options.layoutAlgorithm || {}, layoutType = (layoutOptions.type || 'packedbubble'), graphLayoutsStorage = this.chart.graphLayoutsStorage, graphLayoutsLookup = this.chart.graphLayoutsLookup, parentNodeOptions = merge(layoutOptions, layoutOptions.parentNodeOptions, {\n                    enableSimulation: this.layout.options.enableSimulation\n                });\n                let seriesLayout = graphLayoutsStorage[layoutType + '-series'];\n                if (!seriesLayout) {\n                    graphLayoutsStorage[layoutType + '-series'] = seriesLayout =\n                        new GraphLayout.layouts[layoutType]();\n                    seriesLayout.init(parentNodeOptions);\n                    graphLayoutsLookup.splice(seriesLayout.index, 0, seriesLayout);\n                }\n                this.parentNodeLayout = seriesLayout;\n                this.createParentNodes();\n            }\n            /**\n             * The function responsible for calculating the parent node radius\n             * based on the total surface of iniside-bubbles and the group BBox\n             * @private\n             */\n            calculateParentRadius() {\n                const bBox = this.seriesBox(), parentPadding = 20, minParentRadius = 20;\n                this.parentNodeRadius = clamp(Math.sqrt(2 * this.parentNodeMass / Math.PI) + parentPadding, minParentRadius, bBox ?\n                    Math.max(Math.sqrt(Math.pow(bBox.width, 2) +\n                        Math.pow(bBox.height, 2)) / 2 + parentPadding, minParentRadius) :\n                    Math.sqrt(2 * this.parentNodeMass / Math.PI) + parentPadding);\n                if (this.parentNode) {\n                    this.parentNode.marker.radius =\n                        this.parentNode.radius = this.parentNodeRadius;\n                }\n            }\n            /**\n             * Calculate min and max bubble value for radius calculation.\n             * @private\n             */\n            calculateZExtremes() {\n                const chart = this.chart, allSeries = chart.series;\n                let zMin = this.options.zMin, zMax = this.options.zMax, valMin = Infinity, valMax = -Infinity;\n                if (zMin && zMax) {\n                    return [zMin, zMax];\n                }\n                // it is needed to deal with null\n                // and undefined values\n                allSeries.forEach((series) => {\n                    series.yData.forEach((y) => {\n                        if (defined(y)) {\n                            if (y > valMax) {\n                                valMax = y;\n                            }\n                            if (y < valMin) {\n                                valMin = y;\n                            }\n                        }\n                    });\n                });\n                zMin = pick(zMin, valMin);\n                zMax = pick(zMax, valMax);\n                return [zMin, zMax];\n            }\n            /**\n             * Check if two bubbles overlaps.\n             * @private\n             */\n            checkOverlap(bubble1, bubble2) {\n                const diffX = bubble1[0] - bubble2[0], // diff of X center values\n                diffY = bubble1[1] - bubble2[1], // diff of Y center values\n                sumRad = bubble1[2] + bubble2[2]; // sum of bubble radius\n                return (Math.sqrt(diffX * diffX + diffY * diffY) -\n                    Math.abs(sumRad)) < -0.001;\n            }\n            /**\n             * Creating parent nodes for split series, in which all the bubbles\n             * are rendered.\n             * @private\n             */\n            createParentNodes() {\n                const PackedBubblePoint = this.pointClass, chart = this.chart, parentNodeLayout = this.parentNodeLayout, layoutOptions = this.layout.options;\n                let nodeAdded, parentNode = this.parentNode, parentMarkerOptions = {\n                    radius: this.parentNodeRadius,\n                    lineColor: this.color,\n                    fillColor: color(this.color).brighten(0.4).get()\n                };\n                if (layoutOptions.parentNodeOptions) {\n                    parentMarkerOptions = merge(layoutOptions.parentNodeOptions.marker || {}, parentMarkerOptions);\n                }\n                this.parentNodeMass = 0;\n                this.points.forEach((p) => {\n                    this.parentNodeMass +=\n                        Math.PI * Math.pow(p.marker.radius, 2);\n                });\n                this.calculateParentRadius();\n                parentNodeLayout.nodes.forEach((node) => {\n                    if (node.seriesIndex === this.index) {\n                        nodeAdded = true;\n                    }\n                });\n                parentNodeLayout.setArea(0, 0, chart.plotWidth, chart.plotHeight);\n                if (!nodeAdded) {\n                    if (!parentNode) {\n                        parentNode = (new PackedBubblePoint()).init(this, {\n                            mass: this.parentNodeRadius / 2,\n                            marker: parentMarkerOptions,\n                            dataLabels: {\n                                inside: false\n                            },\n                            states: {\n                                normal: {\n                                    marker: parentMarkerOptions\n                                },\n                                hover: {\n                                    marker: parentMarkerOptions\n                                }\n                            },\n                            dataLabelOnNull: true,\n                            degree: this.parentNodeRadius,\n                            isParentNode: true,\n                            seriesIndex: this.index\n                        });\n                    }\n                    if (this.parentNode) {\n                        parentNode.plotX = this.parentNode.plotX;\n                        parentNode.plotY = this.parentNode.plotY;\n                    }\n                    this.parentNode = parentNode;\n                    parentNodeLayout.addElementsToCollection([this], parentNodeLayout.series);\n                    parentNodeLayout.addElementsToCollection([parentNode], parentNodeLayout.nodes);\n                }\n            }\n            /**\n             * Function responsible for adding all the layouts to the chart.\n             * @private\n             */\n            deferLayout() {\n                // TODO split layouts to independent methods\n                const layoutOptions = this.options.layoutAlgorithm;\n                if (!this.visible) {\n                    return;\n                }\n                // layout is using nodes for position calculation\n                this.addLayout();\n                if (layoutOptions.splitSeries) {\n                    this.addSeriesLayout();\n                }\n            }\n            destroy() {\n                // Remove the series from all layouts series collections #11469\n                if (this.chart.graphLayoutsLookup) {\n                    this.chart.graphLayoutsLookup.forEach((layout) => {\n                        layout.removeElementFromCollection(this, layout.series);\n                    }, this);\n                }\n                if (this.parentNode &&\n                    this.parentNodeLayout) {\n                    this.parentNodeLayout.removeElementFromCollection(this.parentNode, this.parentNodeLayout.nodes);\n                    if (this.parentNode.dataLabel) {\n                        this.parentNode.dataLabel =\n                            this.parentNode.dataLabel.destroy();\n                    }\n                }\n                seriesProto.destroy.apply(this, arguments);\n            }\n            /**\n             * Packedbubble has two separate collecions of nodes if split, render\n             * dataLabels for both sets:\n             * @private\n             */\n            drawDataLabels() {\n                // We defer drawing the dataLabels\n                // until dataLabels.animation.defer time passes\n                if (this.deferDataLabels) {\n                    return;\n                }\n                seriesProto.drawDataLabels.call(this, this.points);\n                // Render parentNode labels:\n                if (this.parentNode) {\n                    this.parentNode.formatPrefix = 'parentNode';\n                    seriesProto.drawDataLabels.call(this, [this.parentNode]);\n                }\n            }\n            /**\n             * Create Background/Parent Nodes for split series.\n             * @private\n             */\n            drawGraph() {\n                // if the series is not using layout, don't add parent nodes\n                if (!this.layout || !this.layout.options.splitSeries) {\n                    return;\n                }\n                const chart = this.chart, nodeMarker = this.layout.options.parentNodeOptions.marker, parentOptions = {\n                    fill: (nodeMarker.fillColor ||\n                        color(this.color).brighten(0.4).get()),\n                    opacity: nodeMarker.fillOpacity,\n                    stroke: nodeMarker.lineColor || this.color,\n                    'stroke-width': pick(nodeMarker.lineWidth, this.options.lineWidth)\n                };\n                let parentAttribs = {};\n                // Create the group for parent Nodes if doesn't exist\n                // If exists it will only be adjusted to the updated plot size (#12063)\n                this.parentNodesGroup = this.plotGroup('parentNodesGroup', 'parentNode', this.visible ? 'inherit' : 'hidden', 0.1, chart.seriesGroup);\n                this.group?.attr({\n                    zIndex: 2\n                });\n                this.calculateParentRadius();\n                if (this.parentNode &&\n                    defined(this.parentNode.plotX) &&\n                    defined(this.parentNode.plotY) &&\n                    defined(this.parentNodeRadius)) {\n                    parentAttribs = merge({\n                        x: this.parentNode.plotX -\n                            this.parentNodeRadius,\n                        y: this.parentNode.plotY -\n                            this.parentNodeRadius,\n                        width: this.parentNodeRadius * 2,\n                        height: this.parentNodeRadius * 2\n                    }, parentOptions);\n                    if (!this.parentNode.graphic) {\n                        this.graph = this.parentNode.graphic =\n                            chart.renderer.symbol(parentOptions.symbol)\n                                .add(this.parentNodesGroup);\n                    }\n                    this.parentNode.graphic.attr(parentAttribs);\n                }\n            }\n            drawTracker() {\n                const parentNode = this.parentNode;\n                // chart = series.chart,\n                // pointer = chart.pointer,\n                // onMouseOver = function (e: PointerEvent): void {\n                //     const point = pointer.getPointFromEvent(e);\n                //     // undefined on graph in scatterchart\n                //     if (typeof point !== 'undefined') {\n                //         pointer.isDirectTouch = true;\n                //         point.onMouseOver(e);\n                //     }\n                // };\n                let dataLabels;\n                super.drawTracker();\n                // Add reference to the point\n                if (parentNode) {\n                    dataLabels = (isArray(parentNode.dataLabels) ?\n                        parentNode.dataLabels :\n                        (parentNode.dataLabel ? [parentNode.dataLabel] : []));\n                    if (parentNode.graphic) {\n                        parentNode.graphic.element.point = parentNode;\n                    }\n                    dataLabels.forEach((dataLabel) => {\n                        if (dataLabel.div) {\n                            dataLabel.div.point = parentNode;\n                        }\n                        else {\n                            dataLabel.element.point = parentNode;\n                        }\n                    });\n                }\n            }\n            /**\n             * Calculate radius of bubbles in series.\n             * @private\n             */\n            getPointRadius() {\n                const chart = this.chart, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, seriesOptions = this.options, useSimulation = seriesOptions.useSimulation, smallestSize = Math.min(plotWidth, plotHeight), extremes = {}, radii = [], allDataPoints = chart.allDataPoints || [], allDataPointsLength = allDataPoints.length;\n                let minSize, maxSize, value, radius;\n                ['minSize', 'maxSize'].forEach((prop) => {\n                    const length = parseInt(seriesOptions[prop], 10), isPercent = /%$/.test(seriesOptions[prop]);\n                    extremes[prop] = isPercent ?\n                        smallestSize * length / 100 :\n                        length * Math.sqrt(allDataPointsLength);\n                });\n                chart.minRadius = minSize = extremes.minSize /\n                    Math.sqrt(allDataPointsLength);\n                chart.maxRadius = maxSize = extremes.maxSize /\n                    Math.sqrt(allDataPointsLength);\n                const zExtremes = useSimulation ?\n                    this.calculateZExtremes() :\n                    [minSize, maxSize];\n                allDataPoints.forEach((point, i) => {\n                    value = useSimulation ?\n                        clamp(point[2], zExtremes[0], zExtremes[1]) :\n                        point[2];\n                    radius = this.getRadius(zExtremes[0], zExtremes[1], minSize, maxSize, value);\n                    if (radius === 0) {\n                        radius = null;\n                    }\n                    allDataPoints[i][2] = radius;\n                    radii.push(radius);\n                });\n                this.radii = radii;\n            }\n            init() {\n                seriesProto.init.apply(this, arguments);\n                initDataLabelsDefer.call(this);\n                /* eslint-disable no-invalid-this */\n                // When one series is modified, the others need to be recomputed\n                this.eventsToUnbind.push(addEvent(this, 'updatedData', function () {\n                    this.chart.series.forEach((s) => {\n                        if (s.type === this.type) {\n                            s.isDirty = true;\n                        }\n                    }, this);\n                }));\n                /* eslint-enable no-invalid-this */\n                return this;\n            }\n            /**\n             * Mouse up action, finalizing drag&drop.\n             * @private\n             * @param {Highcharts.Point} point The point that event occured.\n             */\n            onMouseUp(dnPoint) {\n                const point = dnPoint;\n                if (point.fixedPosition && !point.removed) {\n                    const layout = this.layout, parentNodeLayout = this.parentNodeLayout;\n                    let distanceXY, distanceR;\n                    if (parentNodeLayout && layout.options.dragBetweenSeries) {\n                        parentNodeLayout.nodes.forEach((node) => {\n                            if (point && point.marker &&\n                                node !== point.series.parentNode) {\n                                distanceXY = layout.getDistXY(point, node);\n                                distanceR = (layout.vectorLength(distanceXY) -\n                                    node.marker.radius -\n                                    point.marker.radius);\n                                if (distanceR < 0) {\n                                    node.series.addPoint(merge(point.options, {\n                                        plotX: point.plotX,\n                                        plotY: point.plotY\n                                    }), false);\n                                    layout.removeElementFromCollection(point, layout.nodes);\n                                    point.remove();\n                                }\n                            }\n                        });\n                    }\n                    DragNodesComposition.onMouseUp.apply(this, arguments);\n                }\n            }\n            /**\n             * This is the main function responsible\n             * for positioning all of the bubbles\n             * allDataPoints - bubble array, in format [pixel x value,\n             * pixel y value, radius,\n             * related series index, related point index]\n             * @private\n             * @param {Array<Highcharts.PackedBubbleData>} allDataPoints All points from all series\n             * @return {Array<Highcharts.PackedBubbleData>} Positions of all bubbles\n             */\n            placeBubbles(allDataPoints) {\n                const checkOverlap = this.checkOverlap, positionBubble = this.positionBubble, bubblePos = [];\n                let stage = 1, j = 0, k = 0, calculatedBubble, arr = [], i;\n                // sort all points\n                const sortedArr = allDataPoints.sort((a, b) => b[2] - a[2]);\n                if (sortedArr.length) {\n                    // create first bubble in the middle of the chart\n                    bubblePos.push([\n                        [\n                            0,\n                            0,\n                            sortedArr[0][2],\n                            sortedArr[0][3],\n                            sortedArr[0][4]\n                        ] // point index\n                    ]); // 0 level bubble\n                    if (sortedArr.length > 1) {\n                        bubblePos.push([\n                            [\n                                0,\n                                (0 - sortedArr[1][2] -\n                                    sortedArr[0][2]),\n                                // move bubble above first one\n                                sortedArr[1][2],\n                                sortedArr[1][3],\n                                sortedArr[1][4]\n                            ]\n                        ]); // 1 level 1st bubble\n                        // first two already positioned so starting from 2\n                        for (i = 2; i < sortedArr.length; i++) {\n                            sortedArr[i][2] = sortedArr[i][2] || 1;\n                            // in case if radius is calculated as 0.\n                            calculatedBubble = positionBubble(bubblePos[stage][j], bubblePos[stage - 1][k], sortedArr[i]); // calculate initial bubble position\n                            if (checkOverlap(calculatedBubble, bubblePos[stage][0])) {\n                                /* if new bubble is overlapping with first bubble\n                                    * in current level (stage)\n                                    */\n                                bubblePos.push([]);\n                                k = 0;\n                                /* reset index of bubble, used for\n                                    * positioning the bubbles around it,\n                                    * we are starting from first bubble in next\n                                    * stage because we are changing level to higher\n                                    */\n                                bubblePos[stage + 1].push(positionBubble(bubblePos[stage][j], bubblePos[stage][0], sortedArr[i]));\n                                // (last bubble, 1. from curr stage, new bubble)\n                                stage++; // the new level is created, above current\n                                j = 0; // set the index of bubble in curr level to 0\n                            }\n                            else if (stage > 1 &&\n                                bubblePos[stage - 1][k + 1] &&\n                                checkOverlap(calculatedBubble, bubblePos[stage - 1][k + 1])) {\n                                /* if new bubble is overlapping with one of the prev\n                                    * stage bubbles, it means that - bubble, used for\n                                    * positioning the bubbles around it has changed\n                                    * so we need to recalculate it\n                                    */\n                                k++;\n                                bubblePos[stage].push(positionBubble(bubblePos[stage][j], bubblePos[stage - 1][k], sortedArr[i]));\n                                // (last bubble, prev stage bubble, new bubble)\n                                j++;\n                            }\n                            else { // simply add calculated bubble\n                                j++;\n                                bubblePos[stage].push(calculatedBubble);\n                            }\n                        }\n                    }\n                    this.chart.stages = bubblePos;\n                    // it may not be necessary but adding it just in case -\n                    // it is containing all of the bubble levels\n                    this.chart.rawPositions =\n                        []\n                            .concat.apply([], bubblePos);\n                    // bubble positions merged into one array\n                    this.resizeRadius();\n                    arr = this.chart.rawPositions;\n                }\n                return arr;\n            }\n            /**\n             * Function that checks for a parentMarker and sets the correct opacity.\n             * @private\n             * @param {Highcharts.Pack} point\n             * Candidate point for opacity correction.\n             * @param {string} [state]\n             * The point state, can be either `hover`, `select` or 'normal'. If\n             * undefined, normal state is assumed.\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The presentational attributes to be set on the point.\n             */\n            pointAttribs(point, state) {\n                const options = this.options, hasParentMarker = point && point.isParentNode;\n                let markerOptions = options.marker;\n                if (hasParentMarker &&\n                    options.layoutAlgorithm &&\n                    options.layoutAlgorithm.parentNodeOptions) {\n                    markerOptions = options.layoutAlgorithm.parentNodeOptions.marker;\n                }\n                const fillOpacity = markerOptions.fillOpacity, attr = seriesProto.pointAttribs.call(this, point, state);\n                if (fillOpacity !== 1) {\n                    attr['fill-opacity'] = fillOpacity;\n                }\n                return attr;\n            }\n            /**\n             * Function that is adding one bubble based on positions and sizes of\n             * two other bubbles, lastBubble is the last added bubble, newOrigin is\n             * the bubble for positioning new bubbles. nextBubble is the curently\n             * added bubble for which we are calculating positions\n             * @private\n             * @param {Array<number>} lastBubble The closest last bubble\n             * @param {Array<number>} newOrigin New bubble\n             * @param {Array<number>} nextBubble The closest next bubble\n             * @return {Array<number>} Bubble with correct positions\n             */\n            positionBubble(lastBubble, newOrigin, nextBubble) {\n                const sqrt = Math.sqrt, asin = Math.asin, acos = Math.acos, pow = Math.pow, abs = Math.abs, distance = sqrt(// dist between lastBubble and newOrigin\n                pow((lastBubble[0] - newOrigin[0]), 2) +\n                    pow((lastBubble[1] - newOrigin[1]), 2)), alfa = acos(\n                // from cosinus theorem: alfa is an angle used for\n                // calculating correct position\n                (pow(distance, 2) +\n                    pow(nextBubble[2] + newOrigin[2], 2) -\n                    pow(nextBubble[2] + lastBubble[2], 2)) / (2 * (nextBubble[2] + newOrigin[2]) * distance)), beta = asin(// from sinus theorem.\n                abs(lastBubble[0] - newOrigin[0]) /\n                    distance), \n                // providing helping variables, related to angle between\n                // lastBubble and newOrigin\n                gamma = (lastBubble[1] - newOrigin[1]) < 0 ? 0 : Math.PI, \n                // if new origin y is smaller than last bubble y value\n                // (2 and 3 quarter),\n                // add Math.PI to final angle\n                delta = (lastBubble[0] - newOrigin[0]) *\n                    (lastBubble[1] - newOrigin[1]) < 0 ?\n                    1 : -1, // (1st and 3rd quarter)\n                finalAngle = gamma + alfa + beta * delta, cosA = Math.cos(finalAngle), sinA = Math.sin(finalAngle), posX = newOrigin[0] + (newOrigin[2] + nextBubble[2]) * sinA, \n                // center of new origin + (radius1 + radius2) * sinus A\n                posY = newOrigin[1] - (newOrigin[2] + nextBubble[2]) * cosA;\n                return [\n                    posX,\n                    posY,\n                    nextBubble[2],\n                    nextBubble[3],\n                    nextBubble[4]\n                ]; // the same as described before\n            }\n            render() {\n                const dataLabels = [];\n                seriesProto.render.apply(this, arguments);\n                // #10823 - dataLabels should stay visible\n                // when enabled allowOverlap.\n                if (!this.options.dataLabels.allowOverlap) {\n                    this.data.forEach((point) => {\n                        if (isArray(point.dataLabels)) {\n                            point.dataLabels.forEach((dataLabel) => {\n                                dataLabels.push(dataLabel);\n                            });\n                        }\n                    });\n                    // Only hide overlapping dataLabels for layouts that\n                    // use simulation. Spiral packedbubble don't need\n                    // additional dataLabel hiding on every simulation step\n                    if (this.options.useSimulation) {\n                        this.chart.hideOverlappingLabels(dataLabels);\n                    }\n                }\n            }\n            /**\n             * The function responsible for resizing the bubble radius.\n             * In shortcut: it is taking the initially\n             * calculated positions of bubbles. Then it is calculating the min max\n             * of both dimensions, creating something in shape of bBox.\n             * The comparison of bBox and the size of plotArea\n             * (later it may be also the size set by customer) is giving the\n             * value how to recalculate the radius so it will match the size\n             * @private\n             */\n            resizeRadius() {\n                const chart = this.chart, positions = chart.rawPositions, min = Math.min, max = Math.max, plotLeft = chart.plotLeft, plotTop = chart.plotTop, chartHeight = chart.plotHeight, chartWidth = chart.plotWidth;\n                let minX, maxX, minY, maxY, radius;\n                minX = minY = Number.POSITIVE_INFINITY; // set initial values\n                maxX = maxY = Number.NEGATIVE_INFINITY;\n                for (const position of positions) {\n                    radius = position[2];\n                    minX = min(minX, position[0] - radius);\n                    // (x center-radius) is the min x value used by specific bubble\n                    maxX = max(maxX, position[0] + radius);\n                    minY = min(minY, position[1] - radius);\n                    maxY = max(maxY, position[1] + radius);\n                }\n                const bBox = [maxX - minX, maxY - minY], spaceRatio = [\n                    (chartWidth - plotLeft) / bBox[0],\n                    (chartHeight - plotTop) / bBox[1]\n                ], smallerDimension = min.apply([], spaceRatio);\n                if (Math.abs(smallerDimension - 1) > 1e-10) {\n                    // if bBox is considered not the same width as possible size\n                    for (const position of positions) {\n                        position[2] *= smallerDimension;\n                    }\n                    this.placeBubbles(positions);\n                }\n                else {\n                    /** if no radius recalculation is needed, we need to position\n                     * the whole bubbles in center of chart plotarea\n                     * for this, we are adding two parameters,\n                     * diffY and diffX, that are related to differences\n                     * between the initial center and the bounding box\n                     */\n                    chart.diffY = chartHeight / 2 +\n                        plotTop - minY - (maxY - minY) / 2;\n                    chart.diffX = chartWidth / 2 +\n                        plotLeft - minX - (maxX - minX) / 2;\n                }\n            }\n            /**\n             * The function responsible for calculating series bubble' s bBox.\n             * Needed because of exporting failure when useSimulation\n             * is set to false\n             * @private\n             */\n            seriesBox() {\n                const chart = this.chart, data = this.data, max = Math.max, min = Math.min, \n                // bBox = [xMin, xMax, yMin, yMax]\n                bBox = [\n                    chart.plotLeft,\n                    chart.plotLeft + chart.plotWidth,\n                    chart.plotTop,\n                    chart.plotTop + chart.plotHeight\n                ];\n                let radius;\n                data.forEach((p) => {\n                    if (defined(p.plotX) &&\n                        defined(p.plotY) &&\n                        p.marker.radius) {\n                        radius = p.marker.radius;\n                        bBox[0] = min(bBox[0], p.plotX - radius);\n                        bBox[1] = max(bBox[1], p.plotX + radius);\n                        bBox[2] = min(bBox[2], p.plotY - radius);\n                        bBox[3] = max(bBox[3], p.plotY + radius);\n                    }\n                });\n                return isNumber(bBox.width / bBox.height) ?\n                    bBox :\n                    null;\n            }\n            /**\n             * Needed because of z-indexing issue if point is added in series.group\n             * @private\n             */\n            setVisible() {\n                const series = this;\n                seriesProto.setVisible.apply(series, arguments);\n                if (series.parentNodeLayout && series.graph) {\n                    if (series.visible) {\n                        series.graph.show();\n                        if (series.parentNode.dataLabel) {\n                            series.parentNode.dataLabel.show();\n                        }\n                    }\n                    else {\n                        series.graph.hide();\n                        series.parentNodeLayout\n                            .removeElementFromCollection(series.parentNode, series.parentNodeLayout.nodes);\n                        if (series.parentNode.dataLabel) {\n                            series.parentNode.dataLabel.hide();\n                        }\n                    }\n                }\n                else if (series.layout) {\n                    if (series.visible) {\n                        series.layout.addElementsToCollection(series.points, series.layout.nodes);\n                    }\n                    else {\n                        series.points.forEach((node) => {\n                            series.layout.removeElementFromCollection(node, series.layout.nodes);\n                        });\n                    }\n                }\n            }\n            /**\n             * Extend the base translate method to handle bubble size,\n             * and correct positioning them.\n             * @private\n             */\n            translate() {\n                const chart = this.chart, data = this.data, index = this.index, useSimulation = this.options.useSimulation;\n                let point, radius, positions;\n                this.processedXData = this.xData;\n                this.generatePoints();\n                // merged data is an array with all of the data from all series\n                if (!defined(chart.allDataPoints)) {\n                    chart.allDataPoints = this.accumulateAllPoints();\n                    // calculate radius for all added data\n                    this.getPointRadius();\n                }\n                // after getting initial radius, calculate bubble positions\n                if (useSimulation) {\n                    positions = chart.allDataPoints;\n                }\n                else {\n                    positions = this.placeBubbles(chart.allDataPoints);\n                    this.options.draggable = false;\n                }\n                // Set the shape and arguments to be picked up in drawPoints\n                for (const position of positions) {\n                    if (position[3] === index) {\n                        // update the series points with the val from positions\n                        // array\n                        point = data[position[4]];\n                        radius = pick(position[2], void 0);\n                        if (!useSimulation) {\n                            point.plotX = (position[0] - chart.plotLeft +\n                                chart.diffX);\n                            point.plotY = (position[1] - chart.plotTop +\n                                chart.diffY);\n                        }\n                        if (isNumber(radius)) {\n                            point.marker = extend(point.marker, {\n                                radius,\n                                width: 2 * radius,\n                                height: 2 * radius\n                            });\n                            point.radius = radius;\n                        }\n                    }\n                }\n                if (useSimulation) {\n                    this.deferLayout();\n                }\n                fireEvent(this, 'afterTranslate');\n            }\n        }\n        PackedBubbleSeries.defaultOptions = merge(BubbleSeries.defaultOptions, PackedBubbleSeriesDefaults);\n        extend(PackedBubbleSeries.prototype, {\n            pointClass: PackedBubblePoint,\n            axisTypes: [],\n            directTouch: true,\n            forces: ['barycenter', 'repulsive'],\n            hasDraggableNodes: true,\n            isCartesian: false,\n            noSharedTooltip: true,\n            pointArrayMap: ['value'],\n            pointValKey: 'value',\n            requireSorting: false,\n            trackerGroups: ['group', 'dataLabelsGroup', 'parentNodesGroup'],\n            initDataLabels: initDataLabels,\n            alignDataLabel: seriesProto.alignDataLabel,\n            indexateNodes: noop,\n            onMouseDown: DragNodesComposition.onMouseDown,\n            onMouseMove: DragNodesComposition.onMouseMove,\n            redrawHalo: DragNodesComposition.redrawHalo,\n            searchPoint: noop // solving #12287\n        });\n        SeriesRegistry.registerSeriesType('packedbubble', PackedBubbleSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Formatter callback function.\n         *\n         * @callback Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction\n         *\n         * @param {Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject} this\n         *        Data label context to format\n         *\n         * @return {string}\n         *         Formatted data label text\n         */\n        /**\n         * Context for the formatter function.\n         *\n         * @interface Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject\n         * @extends Highcharts.PointLabelObject\n         * @since 7.0.0\n         */ /**\n        * The color of the node.\n        * @name Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject#color\n        * @type {Highcharts.ColorString}\n        * @since 7.0.0\n        */ /**\n        * The point (node) object. The node name, if defined, is available through\n        * `this.point.name`. Arrays: `this.point.linksFrom` and `this.point.linksTo`\n        * contains all nodes connected to this point.\n        * @name Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject#point\n        * @type {Highcharts.Point}\n        * @since 7.0.0\n        */ /**\n        * The ID of the node.\n        * @name Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject#key\n        * @type {string}\n        * @since 7.0.0\n        */\n        ''; // detach doclets above\n\n        return PackedBubbleSeries;\n    });\n    _registerModule(_modules, 'Series/Polygon/PolygonSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A polygon series can be used to draw any freeform shape in the cartesian\n         * coordinate system. A fill is applied with the `color` option, and\n         * stroke is applied through `lineWidth` and `lineColor` options.\n         *\n         * @sample {highcharts} highcharts/demo/polygon/\n         *         Polygon\n         * @sample {highstock} highcharts/demo/polygon/\n         *         Polygon\n         *\n         * @extends      plotOptions.scatter\n         * @since        4.1.0\n         * @excluding    jitter, softThreshold, threshold, cluster, boostThreshold,\n         *               boostBlending\n         * @product      highcharts highstock\n         * @requires     highcharts-more\n         * @optionparent plotOptions.polygon\n         */\n        const PolygonSeriesDefaults = {\n            marker: {\n                enabled: false,\n                states: {\n                    hover: {\n                        enabled: false\n                    }\n                }\n            },\n            stickyTracking: false,\n            tooltip: {\n                followPointer: true,\n                pointFormat: ''\n            },\n            trackByArea: true,\n            legendSymbol: 'rectangle'\n        };\n        /**\n         * A `polygon` series. If the [type](#series.polygon.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.polygon\n         * @excluding dataParser, dataURL, stack, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.polygon\n         */\n        /**\n         * An array of data points for the series. For the `polygon` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. The `x` values will be automatically\n         *    calculated, either starting at 0 and incremented by 1, or from\n         *    `pointStart` and `pointInterval` given in the series options. If the axis\n         *    has categories, these will be used. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of arrays with 2 values. In this case, the values correspond to\n         *    `x,y`. If the first value is a string, it is applied as the name of the\n         *    point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 10],\n         *        [1, 3],\n         *        [2, 1]\n         *    ]\n         *    ```\n         *\n         * 3. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.polygon.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 1,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 8,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n         * @extends   series.line.data\n         * @product   highcharts highstock\n         * @apioption series.polygon.data\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PolygonSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Polygon/PolygonSeries.js', [_modules['Core/Globals.js'], _modules['Series/Polygon/PolygonSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, PolygonSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { area: AreaSeries, line: LineSeries, scatter: ScatterSeries } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PolygonSeries extends ScatterSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getGraphPath() {\n                const graphPath = LineSeries.prototype.getGraphPath.call(this);\n                let i = graphPath.length + 1;\n                // Close all segments\n                while (i--) {\n                    if ((i === graphPath.length || graphPath[i][0] === 'M') && i > 0) {\n                        graphPath.splice(i, 0, ['Z']);\n                    }\n                }\n                this.areaPath = graphPath;\n                return graphPath;\n            }\n            drawGraph() {\n                // Hack into the fill logic in area.drawGraph\n                this.options.fillColor = this.color;\n                AreaSeries.prototype.drawGraph.call(this);\n            }\n        }\n        PolygonSeries.defaultOptions = merge(ScatterSeries.defaultOptions, PolygonSeriesDefaults);\n        extend(PolygonSeries.prototype, {\n            type: 'polygon',\n            drawTracker: LineSeries.prototype.drawTracker,\n            setStackedPoints: noop // No stacking points on polygons (#5310)\n        });\n        SeriesRegistry.registerSeriesType('polygon', PolygonSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PolygonSeries;\n    });\n    _registerModule(_modules, 'Core/Axis/RadialAxis.js', [_modules['Core/Axis/AxisDefaults.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (AxisDefaults, D, H, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { noop } = H;\n        const { addEvent, correctFloat, defined, extend, fireEvent, merge, pick, relativeLength, wrap } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var RadialAxis;\n        (function (RadialAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            /**\n             * Circular axis around the perimeter of a polar chart.\n             * @private\n             */\n            const defaultCircularOptions = {\n                gridLineWidth: 1,\n                labels: {\n                    align: void 0,\n                    x: 0,\n                    y: void 0,\n                    style: {\n                        textOverflow: 'none' // wrap lines by default (#7248)\n                    }\n                },\n                maxPadding: 0,\n                minPadding: 0,\n                showLastLabel: false,\n                tickLength: 0\n            };\n            /**\n             * The default options extend defaultYAxisOptions.\n             * @private\n             */\n            const defaultRadialGaugeOptions = {\n                labels: {\n                    align: 'center',\n                    distance: -25,\n                    x: 0,\n                    y: void 0 // auto\n                },\n                minorGridLineWidth: 0,\n                minorTickInterval: 'auto',\n                minorTickLength: 10,\n                minorTickPosition: 'inside',\n                minorTickWidth: 1,\n                tickLength: 10,\n                tickPosition: 'inside',\n                tickWidth: 2,\n                title: {\n                    rotation: 0\n                },\n                zIndex: 2 // behind dials, points in the series group\n            };\n            /**\n             * Radial axis, like a spoke in a polar chart.\n             * @private\n             */\n            const defaultRadialOptions = {\n                /**\n                 * In a polar chart, this is the angle of the Y axis in degrees, where\n                 * 0 is up and 90 is right. The angle determines the position of the\n                 * axis line and the labels, though the coordinate system is unaffected.\n                 * Since v8.0.0 this option is also applicable for X axis (inverted\n                 * polar).\n                 *\n                 * @sample {highcharts} highcharts/xaxis/angle/\n                 *         Custom X axis' angle on inverted polar chart\n                 * @sample {highcharts} highcharts/yaxis/angle/\n                 *         Dual axis polar chart\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     4.2.7\n                 * @product   highcharts\n                 * @apioption xAxis.angle\n                 */\n                /**\n                 * Polar charts only. Whether the grid lines should draw as a polygon\n                 * with straight lines between categories, or as circles. Can be either\n                 * `circle` or `polygon`. Since v8.0.0 this option is also applicable\n                 * for X axis (inverted polar).\n                 *\n                 * @sample {highcharts} highcharts/demo/polar-spider/\n                 *         Polygon grid lines\n                 * @sample {highcharts} highcharts/xaxis/gridlineinterpolation/\n                 *         Circle and polygon on inverted polar\n                 * @sample {highcharts} highcharts/yaxis/gridlineinterpolation/\n                 *         Circle and polygon\n                 *\n                 * @type       {string}\n                 * @product    highcharts\n                 * @validvalue [\"circle\", \"polygon\"]\n                 * @apioption  xAxis.gridLineInterpolation\n                 */\n                gridLineInterpolation: 'circle',\n                gridLineWidth: 1,\n                labels: {\n                    align: 'right',\n                    x: -3,\n                    y: -2\n                },\n                showLastLabel: false,\n                title: {\n                    x: 4,\n                    text: null,\n                    rotation: 90\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * In case of auto connect, add one closestPointRange to the max value\n             * right before tickPositions are computed, so that ticks will extend\n             * passed the real max.\n             * @private\n             */\n            function beforeSetTickPositions() {\n                // If autoConnect is true, polygonal grid lines are connected, and\n                // one closestPointRange is added to the X axis to prevent the last\n                // point from overlapping the first.\n                this.autoConnect = (this.isCircular &&\n                    typeof pick(this.userMax, this.options.max) === 'undefined' &&\n                    correctFloat(this.endAngleRad - this.startAngleRad) ===\n                        correctFloat(2 * Math.PI));\n                // This will lead to add an extra tick to xAxis in order to display\n                // a correct range on inverted polar\n                if (!this.isCircular && this.chart.inverted) {\n                    this.max++;\n                }\n                if (this.autoConnect) {\n                    this.max += ((this.categories && 1) ||\n                        this.pointRange ||\n                        this.closestPointRange ||\n                        0); // #1197, #2260\n                }\n            }\n            /**\n             * Augments methods for the value axis.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Tick} TickClass\n             * Tick class to use.\n             *\n             * @return {Highcharts.Axis}\n             * Axis composition.\n             */\n            function compose(AxisClass, TickClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'autoLabelAlign', onAxisAutoLabelAlign);\n                    addEvent(AxisClass, 'destroy', onAxisDestroy);\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                }\n                if (U.pushUnique(composedMembers, TickClass)) {\n                    addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                    addEvent(TickClass, 'afterGetPosition', onTickAfterGetPosition);\n                    wrap(TickClass.prototype, 'getMarkPath', wrapTickGetMarkPath);\n                }\n                return AxisClass;\n            }\n            RadialAxis.compose = compose;\n            /**\n             * Attach and return collecting function for labels in radial axis for\n             * anti-collision.\n             *\n             * @private\n             */\n            function createLabelCollector() {\n                return () => {\n                    if (this.isRadial &&\n                        this.tickPositions &&\n                        // undocumented option for now, but working\n                        this.options.labels &&\n                        this.options.labels.allowOverlap !== true) {\n                        return this.tickPositions\n                            .map((pos) => this.ticks[pos] && this.ticks[pos].label)\n                            .filter((label) => Boolean(label));\n                    }\n                };\n            }\n            /**\n             * Creates an empty collector function.\n             * @private\n             */\n            function createLabelCollectorHidden() {\n                return noop;\n            }\n            /**\n             * Find the correct end values of crosshair in polar.\n             * @private\n             */\n            function getCrosshairPosition(options, x1, y1) {\n                const center = this.pane.center;\n                let value = options.value, shapeArgs, end, x2, y2;\n                if (this.isCircular) {\n                    if (!defined(value)) {\n                        // When the snap is set to false\n                        x2 = options.chartX || 0;\n                        y2 = options.chartY || 0;\n                        value = this.translate(Math.atan2(y2 - y1, x2 - x1) - this.startAngleRad, true);\n                    }\n                    else if (options.point) {\n                        // When the snap is set to true\n                        shapeArgs = options.point.shapeArgs || {};\n                        if (shapeArgs.start) {\n                            // Find a true value of the point based on the\n                            // angle\n                            value = this.chart.inverted ?\n                                this.translate(options.point.rectPlotY, true) :\n                                options.point.x;\n                        }\n                    }\n                    end = this.getPosition(value);\n                    x2 = end.x;\n                    y2 = end.y;\n                }\n                else {\n                    if (!defined(value)) {\n                        x2 = options.chartX;\n                        y2 = options.chartY;\n                    }\n                    if (defined(x2) && defined(y2)) {\n                        // Calculate radius of non-circular axis' crosshair\n                        y1 = center[1] + this.chart.plotTop;\n                        value = this.translate(Math.min(Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), center[2] / 2) - center[3] / 2, true);\n                    }\n                }\n                return [value, x2 || 0, y2 || 0];\n            }\n            /**\n             * Get the path for the axis line. This method is also referenced in the\n             * getPlotLinePath method.\n             *\n             * @private\n             * @param {number} _lineWidth\n             * Line width is not used.\n             * @param {number} [radius]\n             * Radius of radial path.\n             * @param {number} [innerRadius]\n             * Inner radius of radial path.\n             */\n            function getLinePath(_lineWidth, radius, innerRadius) {\n                const center = this.pane.center, chart = this.chart, left = this.left || 0, top = this.top || 0;\n                let end, r = pick(radius, center[2] / 2 - this.offset), path;\n                if (typeof innerRadius === 'undefined') {\n                    innerRadius = this.horiz ? 0 : this.center && -this.center[3] / 2;\n                }\n                // In case when innerSize of pane is set, it must be included\n                if (innerRadius) {\n                    r += innerRadius;\n                }\n                if (this.isCircular || typeof radius !== 'undefined') {\n                    path = this.chart.renderer.symbols.arc(left + center[0], top + center[1], r, r, {\n                        start: this.startAngleRad,\n                        end: this.endAngleRad,\n                        open: true,\n                        innerR: 0\n                    });\n                    // Bounds used to position the plotLine label next to the line\n                    // (#7117)\n                    path.xBounds = [left + center[0]];\n                    path.yBounds = [top + center[1] - r];\n                }\n                else {\n                    end = this.postTranslate(this.angleRad, r);\n                    path = [\n                        [\n                            'M',\n                            this.center[0] + chart.plotLeft,\n                            this.center[1] + chart.plotTop\n                        ],\n                        ['L', end.x, end.y]\n                    ];\n                }\n                return path;\n            }\n            /**\n             * Wrap the getOffset method to return zero offset for title or labels\n             * in a radial axis.\n             */\n            function getOffset() {\n                const axisProto = this.constructor.prototype;\n                // Call the Axis prototype method (the method we're in now is on the\n                // instance)\n                axisProto.getOffset.call(this);\n                // Title or label offsets are not counted\n                this.chart.axisOffset[this.side] = 0;\n            }\n            /**\n             * Find the path for plot bands along the radial axis.\n             *\n             * @private\n             */\n            function getPlotBandPath(from, to, options) {\n                const chart = this.chart, radiusToPixels = (radius) => {\n                    if (typeof radius === 'string') {\n                        let r = parseInt(radius, 10);\n                        if (percentRegex.test(radius)) {\n                            r = (r * fullRadius) / 100;\n                        }\n                        return r;\n                    }\n                    return radius;\n                }, center = this.center, startAngleRad = this.startAngleRad, fullRadius = center[2] / 2, offset = Math.min(this.offset, 0), left = this.left || 0, top = this.top || 0, percentRegex = /%$/, isCircular = this.isCircular; // X axis in a polar chart\n                let start, end, angle, xOnPerimeter, open, path, outerRadius = pick(radiusToPixels(options.outerRadius), fullRadius), innerRadius = radiusToPixels(options.innerRadius), thickness = pick(radiusToPixels(options.thickness), 10);\n                // Polygonal plot bands\n                if (this.options.gridLineInterpolation === 'polygon') {\n                    path = this.getPlotLinePath({ value: from }).concat(this.getPlotLinePath({ value: to, reverse: true }));\n                    // Circular grid bands\n                }\n                else {\n                    // Keep within bounds\n                    from = Math.max(from, this.min);\n                    to = Math.min(to, this.max);\n                    const transFrom = this.translate(from), transTo = this.translate(to);\n                    // Plot bands on Y axis (radial axis) - inner and outer\n                    // radius depend on to and from\n                    if (!isCircular) {\n                        outerRadius = transFrom || 0;\n                        innerRadius = transTo || 0;\n                    }\n                    // Handle full circle\n                    if (options.shape === 'circle' || !isCircular) {\n                        start = -Math.PI / 2;\n                        end = Math.PI * 1.5;\n                        open = true;\n                    }\n                    else {\n                        start = startAngleRad + (transFrom || 0);\n                        end = startAngleRad + (transTo || 0);\n                    }\n                    outerRadius -= offset; // #5283\n                    thickness -= offset; // #5283\n                    path = chart.renderer.symbols.arc(left + center[0], top + center[1], outerRadius, outerRadius, {\n                        // Math is for reversed yAxis (#3606)\n                        start: Math.min(start, end),\n                        end: Math.max(start, end),\n                        innerR: pick(innerRadius, outerRadius - thickness),\n                        open\n                    });\n                    // Provide positioning boxes for the label (#6406)\n                    if (isCircular) {\n                        angle = (end + start) / 2;\n                        xOnPerimeter = (left +\n                            center[0] +\n                            (center[2] / 2) * Math.cos(angle));\n                        path.xBounds = angle > -Math.PI / 2 && angle < Math.PI / 2 ?\n                            // Right hemisphere\n                            [xOnPerimeter, chart.plotWidth] :\n                            // Left hemisphere\n                            [0, xOnPerimeter];\n                        path.yBounds = [\n                            top + center[1] + (center[2] / 2) * Math.sin(angle)\n                        ];\n                        // Shift up or down to get the label clear of the perimeter\n                        path.yBounds[0] += ((angle > -Math.PI && angle < 0) ||\n                            (angle > Math.PI)) ? -10 : 10;\n                    }\n                }\n                return path;\n            }\n            /**\n             * Find the path for plot lines perpendicular to the radial axis.\n             */\n            function getPlotLinePath(options) {\n                const center = this.pane.center, chart = this.chart, inverted = chart.inverted, reverse = options.reverse, background = this.pane.options.background ?\n                    (this.pane.options.background[0] ||\n                        this.pane.options.background) :\n                    {}, innerRadius = background.innerRadius || '0%', outerRadius = background.outerRadius || '100%', x1 = center[0] + chart.plotLeft, y1 = center[1] + chart.plotTop, height = this.height, isCrosshair = options.isCrosshair, paneInnerR = center[3] / 2;\n                let value = options.value, innerRatio, distance, a, b, otherAxis, xy, tickPositions, crossPos, path;\n                const end = this.getPosition(value);\n                let x2 = end.x, y2 = end.y;\n                // Crosshair logic\n                if (isCrosshair) {\n                    // Find crosshair's position and perform destructuring\n                    // assignment\n                    crossPos = this.getCrosshairPosition(options, x1, y1);\n                    value = crossPos[0];\n                    x2 = crossPos[1];\n                    y2 = crossPos[2];\n                }\n                // Spokes\n                if (this.isCircular) {\n                    distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n                    a = (typeof innerRadius === 'string') ?\n                        relativeLength(innerRadius, 1) :\n                        (innerRadius / distance);\n                    b = (typeof outerRadius === 'string') ?\n                        relativeLength(outerRadius, 1) :\n                        (outerRadius / distance);\n                    // To ensure that gridlines won't be displayed in area\n                    // defined by innerSize in case of custom radiuses of pane's\n                    // background\n                    if (center && paneInnerR) {\n                        innerRatio = paneInnerR / distance;\n                        if (a < innerRatio) {\n                            a = innerRatio;\n                        }\n                        if (b < innerRatio) {\n                            b = innerRatio;\n                        }\n                    }\n                    path = [\n                        ['M', x1 + a * (x2 - x1), y1 - a * (y1 - y2)],\n                        ['L', x2 - (1 - b) * (x2 - x1), y2 + (1 - b) * (y1 - y2)]\n                    ];\n                    // Concentric circles\n                }\n                else {\n                    // Pick the right values depending if it is grid line or\n                    // crosshair\n                    value = this.translate(value);\n                    // This is required in case when xAxis is non-circular to\n                    // prevent grid lines (or crosshairs, if enabled) from\n                    // rendering above the center after they supposed to be\n                    // displayed below the center point\n                    if (value) {\n                        if (value < 0 || value > height) {\n                            value = 0;\n                        }\n                    }\n                    if (this.options.gridLineInterpolation === 'circle') {\n                        // A value of 0 is in the center, so it won't be\n                        // visible, but draw it anyway for update and animation\n                        // (#2366)\n                        path = this.getLinePath(0, value, paneInnerR);\n                        // Concentric polygons\n                    }\n                    else {\n                        path = [];\n                        // Find the other axis (a circular one) in the same pane\n                        chart[inverted ? 'yAxis' : 'xAxis'].forEach((a) => {\n                            if (a.pane === this.pane) {\n                                otherAxis = a;\n                            }\n                        });\n                        if (otherAxis) {\n                            tickPositions = otherAxis.tickPositions;\n                            if (otherAxis.autoConnect) {\n                                tickPositions =\n                                    tickPositions.concat([tickPositions[0]]);\n                            }\n                            // Reverse the positions for concatenation of polygonal\n                            // plot bands\n                            if (reverse) {\n                                tickPositions = tickPositions.slice().reverse();\n                            }\n                            if (value) {\n                                value += paneInnerR;\n                            }\n                            for (let i = 0; i < tickPositions.length; i++) {\n                                xy = otherAxis.getPosition(tickPositions[i], value);\n                                path.push(i ? ['L', xy.x, xy.y] : ['M', xy.x, xy.y]);\n                            }\n                        }\n                    }\n                }\n                return path;\n            }\n            /**\n             * Returns the x, y coordinate of a point given by a value and a pixel\n             * distance from center.\n             *\n             * @private\n             * @param {number} value\n             * Point value.\n             * @param {number} [length]\n             * Distance from center.\n             */\n            function getPosition(value, length) {\n                const translatedVal = this.translate(value);\n                return this.postTranslate(this.isCircular ? translatedVal : this.angleRad, // #2848\n                // In case when translatedVal is negative, the 0 value must be\n                // used instead, in order to deal with lines and labels that\n                // fall out of the visible range near the center of a pane\n                pick(this.isCircular ?\n                    length :\n                    (translatedVal < 0 ? 0 : translatedVal), this.center[2] / 2) - this.offset);\n            }\n            /**\n             * Find the position for the axis title, by default inside the gauge.\n             */\n            function getTitlePosition() {\n                const center = this.center, chart = this.chart, titleOptions = this.options.title;\n                return {\n                    x: chart.plotLeft + center[0] + (titleOptions.x || 0),\n                    y: (chart.plotTop +\n                        center[1] -\n                        ({\n                            high: 0.5,\n                            middle: 0.25,\n                            low: 0\n                        }[titleOptions.align] *\n                            center[2]) +\n                        (titleOptions.y || 0))\n                };\n            }\n            /**\n             * Modify radial axis.\n             * @private\n             *\n             * @param {Highcharts.Axis} radialAxis\n             * Radial axis to modify.\n             */\n            function modify(axis) {\n                axis.beforeSetTickPositions = beforeSetTickPositions;\n                axis.createLabelCollector = createLabelCollector;\n                axis.getCrosshairPosition = getCrosshairPosition;\n                axis.getLinePath = getLinePath;\n                axis.getOffset = getOffset;\n                axis.getPlotBandPath = getPlotBandPath;\n                axis.getPlotLinePath = getPlotLinePath;\n                axis.getPosition = getPosition;\n                axis.getTitlePosition = getTitlePosition;\n                axis.postTranslate = postTranslate;\n                axis.setAxisSize = setAxisSize;\n                axis.setAxisTranslation = setAxisTranslation;\n                axis.setOptions = setOptions;\n            }\n            /**\n             * Modify radial axis as hidden.\n             * @private\n             *\n             * @param {Highcharts.Axis} radialAxis\n             * Radial axis to modify.\n             */\n            function modifyAsHidden(radialAxis) {\n                radialAxis.isHidden = true;\n                radialAxis.createLabelCollector = createLabelCollectorHidden;\n                radialAxis.getOffset = noop;\n                radialAxis.redraw = renderHidden;\n                radialAxis.render = renderHidden;\n                radialAxis.setScale = noop;\n                radialAxis.setCategories = noop;\n                radialAxis.setTitle = noop;\n            }\n            /**\n             * Finalize modification of axis instance with radial logic.\n             */\n            function onAxisAfterInit() {\n                const chart = this.chart, options = this.options, isHidden = chart.angular && this.isXAxis, pane = this.pane, paneOptions = pane && pane.options;\n                if (!isHidden && pane && (chart.angular || chart.polar)) {\n                    const fullCircle = Math.PI * 2, \n                    // Start and end angle options are given in degrees relative to\n                    // top, while internal computations are in radians relative to\n                    // right (like SVG).\n                    start = (pick(paneOptions.startAngle, 0) - 90) * Math.PI / 180, end = (pick(paneOptions.endAngle, pick(paneOptions.startAngle, 0) + 360) - 90) * Math.PI / 180;\n                    // Y axis in polar charts\n                    this.angleRad = (options.angle || 0) * Math.PI / 180;\n                    // Gauges\n                    this.startAngleRad = start;\n                    this.endAngleRad = end;\n                    this.offset = options.offset || 0;\n                    // Normalize Start and End to <0, 2*PI> range\n                    // (in degrees: <0,360>)\n                    let normalizedStart = (start % fullCircle + fullCircle) %\n                        fullCircle, normalizedEnd = (end % fullCircle + fullCircle) % fullCircle;\n                    // Move normalized angles to <-PI, PI> range (<-180, 180>)\n                    // to match values returned by Math.atan2()\n                    if (normalizedStart > Math.PI) {\n                        normalizedStart -= fullCircle;\n                    }\n                    if (normalizedEnd > Math.PI) {\n                        normalizedEnd -= fullCircle;\n                    }\n                    this.normalizedStartAngleRad = normalizedStart;\n                    this.normalizedEndAngleRad = normalizedEnd;\n                }\n            }\n            /**\n             * Wrap auto label align to avoid setting axis-wide rotation on radial axes.\n             * (#4920)\n             */\n            function onAxisAutoLabelAlign(e) {\n                if (this.isRadial) {\n                    e.align = void 0;\n                    e.preventDefault();\n                }\n            }\n            /**\n             * Remove label collector function on axis remove/update.\n             */\n            function onAxisDestroy() {\n                if (this.chart &&\n                    this.chart.labelCollectors) {\n                    const index = (this.labelCollector ?\n                        this.chart.labelCollectors.indexOf(this.labelCollector) :\n                        -1);\n                    if (index >= 0) {\n                        this.chart.labelCollectors.splice(index, 1);\n                    }\n                }\n            }\n            /**\n             * Modify axis instance with radial logic before common axis init.\n             */\n            function onAxisInit(e) {\n                const chart = this.chart, inverted = chart.inverted, angular = chart.angular, polar = chart.polar, isX = this.isXAxis, coll = this.coll, isHidden = angular && isX, paneIndex = e.userOptions.pane || 0, pane = this.pane = chart.pane && chart.pane[paneIndex];\n                let isCircular;\n                // Prevent changes for colorAxis\n                if (coll === 'colorAxis') {\n                    this.isRadial = false;\n                    return;\n                }\n                // Before prototype.init\n                if (angular) {\n                    if (isHidden) {\n                        modifyAsHidden(this);\n                    }\n                    else {\n                        modify(this);\n                    }\n                    isCircular = !isX;\n                    if (isCircular) {\n                        this.defaultPolarOptions = defaultRadialGaugeOptions;\n                    }\n                }\n                else if (polar) {\n                    modify(this);\n                    // Check which axis is circular\n                    isCircular = this.horiz;\n                    this.defaultPolarOptions = isCircular ?\n                        defaultCircularOptions :\n                        merge(coll === 'xAxis' ?\n                            AxisDefaults.defaultXAxisOptions :\n                            AxisDefaults.defaultYAxisOptions, defaultRadialOptions);\n                    // Apply the stack labels for yAxis in case of inverted chart\n                    if (inverted && coll === 'yAxis') {\n                        this.defaultPolarOptions.stackLabels = AxisDefaults\n                            .defaultYAxisOptions.stackLabels;\n                        this.defaultPolarOptions.reversedStacks = true;\n                    }\n                }\n                // Disable certain features on angular and polar axes\n                if (angular || polar) {\n                    this.isRadial = true;\n                    if (!this.labelCollector) {\n                        this.labelCollector = this.createLabelCollector();\n                    }\n                    if (this.labelCollector) {\n                        // Prevent overlapping axis labels (#9761)\n                        chart.labelCollectors.push(this.labelCollector);\n                    }\n                }\n                else {\n                    this.isRadial = false;\n                }\n                // A pointer back to this axis to borrow geometry\n                if (pane && isCircular) {\n                    pane.axis = this;\n                }\n                this.isCircular = isCircular;\n            }\n            /**\n             * Prepare axis translation.\n             */\n            function onAxisInitialAxisTranslation() {\n                if (this.isRadial) {\n                    this.beforeSetTickPositions();\n                }\n            }\n            /**\n             * Find the center position of the label based on the distance option.\n             */\n            function onTickAfterGetLabelPosition(e) {\n                const label = this.label;\n                if (!label) {\n                    return;\n                }\n                const axis = this.axis, labelBBox = label.getBBox(), labelOptions = axis.options.labels, angle = ((axis.translate(this.pos) + axis.startAngleRad +\n                    Math.PI / 2) / Math.PI * 180) % 360, correctAngle = Math.round(angle), labelYPosCorrection = !defined(labelOptions.y) ? -labelBBox.height * 0.3 : 0;\n                let optionsY = labelOptions.y, ret, centerSlot = 20, // 20 degrees to each side at the top and bottom\n                align = labelOptions.align, labelDir = 'end', // Direction of the label 'start' or 'end'\n                reducedAngle1 = correctAngle < 0 ?\n                    correctAngle + 360 : correctAngle, reducedAngle2 = reducedAngle1, translateY = 0, translateX = 0;\n                if (axis.isRadial) { // Both X and Y axes in a polar chart\n                    ret = axis.getPosition(this.pos, (axis.center[2] / 2) +\n                        relativeLength(pick(labelOptions.distance, -25), axis.center[2] / 2, -axis.center[2] / 2));\n                    // Automatically rotated\n                    if (labelOptions.rotation === 'auto') {\n                        label.attr({\n                            rotation: angle\n                        });\n                        // Vertically centered\n                    }\n                    else if (!defined(optionsY)) {\n                        optionsY = (axis.chart.renderer.fontMetrics(label).b -\n                            labelBBox.height / 2);\n                    }\n                    // Automatic alignment\n                    if (!defined(align)) {\n                        if (axis.isCircular) { // Y axis\n                            if (labelBBox.width >\n                                axis.len * axis.tickInterval / (axis.max - axis.min)) { // #3506\n                                centerSlot = 0;\n                            }\n                            if (angle > centerSlot && angle < 180 - centerSlot) {\n                                align = 'left'; // right hemisphere\n                            }\n                            else if (angle > 180 + centerSlot &&\n                                angle < 360 - centerSlot) {\n                                align = 'right'; // left hemisphere\n                            }\n                            else {\n                                align = 'center'; // top or bottom\n                            }\n                        }\n                        else {\n                            align = 'center';\n                        }\n                        label.attr({\n                            align: align\n                        });\n                    }\n                    // Auto alignment for solid-gauges with two labels (#10635)\n                    if (align === 'auto' &&\n                        axis.tickPositions.length === 2 &&\n                        axis.isCircular) {\n                        // Angles reduced to 0 - 90 or 180 - 270\n                        if (reducedAngle1 > 90 && reducedAngle1 < 180) {\n                            reducedAngle1 = 180 - reducedAngle1;\n                        }\n                        else if (reducedAngle1 > 270 && reducedAngle1 <= 360) {\n                            reducedAngle1 = 540 - reducedAngle1;\n                        }\n                        // Angles reduced to 0 - 180\n                        if (reducedAngle2 > 180 && reducedAngle2 <= 360) {\n                            reducedAngle2 = 360 - reducedAngle2;\n                        }\n                        if ((axis.pane.options.startAngle === correctAngle) ||\n                            (axis.pane.options.startAngle === correctAngle + 360) ||\n                            (axis.pane.options.startAngle === correctAngle - 360)) {\n                            labelDir = 'start';\n                        }\n                        if ((correctAngle >= -90 && correctAngle <= 90) ||\n                            (correctAngle >= -360 && correctAngle <= -270) ||\n                            (correctAngle >= 270 && correctAngle <= 360)) {\n                            align = (labelDir === 'start') ? 'right' : 'left';\n                        }\n                        else {\n                            align = (labelDir === 'start') ? 'left' : 'right';\n                        }\n                        // For angles beetwen (90 + n * 180) +- 20\n                        if (reducedAngle2 > 70 && reducedAngle2 < 110) {\n                            align = 'center';\n                        }\n                        // auto Y translation\n                        if (reducedAngle1 < 15 ||\n                            (reducedAngle1 >= 180 && reducedAngle1 < 195)) {\n                            translateY = labelBBox.height * 0.3;\n                        }\n                        else if (reducedAngle1 >= 15 && reducedAngle1 <= 35) {\n                            translateY = labelDir === 'start' ?\n                                0 : labelBBox.height * 0.75;\n                        }\n                        else if (reducedAngle1 >= 195 && reducedAngle1 <= 215) {\n                            translateY = labelDir === 'start' ?\n                                labelBBox.height * 0.75 : 0;\n                        }\n                        else if (reducedAngle1 > 35 && reducedAngle1 <= 90) {\n                            translateY = labelDir === 'start' ?\n                                -labelBBox.height * 0.25 : labelBBox.height;\n                        }\n                        else if (reducedAngle1 > 215 && reducedAngle1 <= 270) {\n                            translateY = labelDir === 'start' ?\n                                labelBBox.height : -labelBBox.height * 0.25;\n                        }\n                        // auto X translation\n                        if (reducedAngle2 < 15) {\n                            translateX = labelDir === 'start' ?\n                                -labelBBox.height * 0.15 : labelBBox.height * 0.15;\n                        }\n                        else if (reducedAngle2 > 165 && reducedAngle2 <= 180) {\n                            translateX = labelDir === 'start' ?\n                                labelBBox.height * 0.15 : -labelBBox.height * 0.15;\n                        }\n                        label.attr({ align: align });\n                        label.translate(translateX, translateY + labelYPosCorrection);\n                    }\n                    e.pos.x = ret.x + (labelOptions.x || 0);\n                    e.pos.y = ret.y + (optionsY || 0);\n                }\n            }\n            /**\n             * Add special cases within the Tick class' methods for radial axes.\n             */\n            function onTickAfterGetPosition(e) {\n                if (this.axis.getPosition) {\n                    extend(e.pos, this.axis.getPosition(this.pos));\n                }\n            }\n            /**\n             * Translate from intermediate plotX (angle), plotY (axis.len - radius)\n             * to final chart coordinates.\n             *\n             * @private\n             * @param {number} angle\n             * Translation angle.\n             * @param {number} radius\n             * Translation radius.\n             */\n            function postTranslate(angle, radius) {\n                const chart = this.chart, center = this.center;\n                angle = this.startAngleRad + angle;\n                return {\n                    x: chart.plotLeft + center[0] + Math.cos(angle) * radius,\n                    y: chart.plotTop + center[1] + Math.sin(angle) * radius\n                };\n            }\n            /**\n             * Prevent setting Y axis dirty.\n             */\n            function renderHidden() {\n                this.isDirty = false;\n            }\n            /**\n             * Override the setAxisSize method to use the arc's circumference as\n             * length. This allows tickPixelInterval to apply to pixel lengths along\n             * the perimeter.\n             * @private\n             */\n            function setAxisSize() {\n                const axisProto = this.constructor.prototype;\n                let center, start;\n                axisProto.setAxisSize.call(this);\n                if (this.isRadial) {\n                    // Set the center array\n                    this.pane.updateCenter(this);\n                    // In case when the innerSize is set in a polar chart, the axis'\n                    // center cannot be a reference to pane's center\n                    center = this.center = this.pane.center.slice();\n                    // The sector is used in Axis.translate to compute the\n                    // translation of reversed axis points (#2570)\n                    if (this.isCircular) {\n                        this.sector = this.endAngleRad - this.startAngleRad;\n                    }\n                    else {\n                        // When the pane's startAngle or the axis' angle is set then\n                        // new x and y values for vertical axis' center must be\n                        // calulated\n                        start = this.postTranslate(this.angleRad, center[3] / 2);\n                        center[0] = start.x - this.chart.plotLeft;\n                        center[1] = start.y - this.chart.plotTop;\n                    }\n                    // Axis len is used to lay out the ticks\n                    this.len = this.width = this.height =\n                        (center[2] - center[3]) * pick(this.sector, 1) / 2;\n                }\n            }\n            /**\n             * Override setAxisTranslation by setting the translation to the\n             * difference in rotation. This allows the translate method to return\n             * angle for any given value.\n             *\n             * @private\n             */\n            function setAxisTranslation() {\n                const axisProto = this.constructor.prototype;\n                // Call uber method\n                axisProto.setAxisTranslation.call(this);\n                // Set transA and minPixelPadding\n                if (this.center) { // it's not defined the first time\n                    if (this.isCircular) {\n                        this.transA = (this.endAngleRad - this.startAngleRad) /\n                            ((this.max - this.min) || 1);\n                    }\n                    else {\n                        // The transA here is the length of the axis, so in case\n                        // of inner radius, the length must be decreased by it\n                        this.transA = ((this.center[2] - this.center[3]) / 2) /\n                            ((this.max - this.min) || 1);\n                    }\n                    if (this.isXAxis) {\n                        this.minPixelPadding = this.transA * this.minPointOffset;\n                    }\n                    else {\n                        // This is a workaround for regression #2593, but categories\n                        // still don't position correctly.\n                        this.minPixelPadding = 0;\n                    }\n                }\n            }\n            /**\n             * Merge and set options.\n             */\n            function setOptions(userOptions) {\n                const options = this.options = merge(this.constructor.defaultOptions, this.defaultPolarOptions, defaultOptions[this.coll], // #16112\n                userOptions);\n                // Make sure the plotBands array is instanciated for each Axis\n                // (#2649)\n                if (!options.plotBands) {\n                    options.plotBands = [];\n                }\n                fireEvent(this, 'afterSetOptions');\n            }\n            /**\n             * Wrap the getMarkPath function to return the path of the radial marker.\n             */\n            function wrapTickGetMarkPath(proceed, x, y, tickLength, tickWidth, horiz, renderer) {\n                const axis = this.axis;\n                let endPoint, ret;\n                if (axis.isRadial) {\n                    endPoint = axis.getPosition(this.pos, axis.center[2] / 2 + tickLength);\n                    ret = [\n                        'M',\n                        x,\n                        y,\n                        'L',\n                        endPoint.x,\n                        endPoint.y\n                    ];\n                }\n                else {\n                    ret = proceed.call(this, x, y, tickLength, tickWidth, horiz, renderer);\n                }\n                return ret;\n            }\n            /* eslint-enable valid-jsdoc */\n        })(RadialAxis || (RadialAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RadialAxis;\n    });\n    _registerModule(_modules, 'Series/PolarComposition.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Extensions/Pane.js'], _modules['Core/Axis/RadialAxis.js'], _modules['Core/Utilities.js']], function (A, H, Series, Pane, RadialAxis, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { animObject } = A;\n        const { addEvent, defined, find, isNumber, merge, pick, relativeLength, splat, uniqueKey, wrap } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function clipCircle(renderer, x, y, r, innerR) {\n            const id = uniqueKey(), clipPath = renderer.createElement('clipPath').attr({\n                id: id\n            }).add(renderer.defs), wrapper = innerR ?\n                renderer.arc(x, y, r, innerR, 0, 2 * Math.PI).add(clipPath) :\n                renderer.circle(x, y, r).add(clipPath);\n            wrapper.id = id;\n            wrapper.clipPath = clipPath;\n            return wrapper;\n        }\n        /**\n         * Find correct align and vertical align based on an angle in polar chart\n         * @private\n         */\n        function findAlignments(angle, options) {\n            let align, verticalAlign;\n            if (options.align === null) {\n                if (angle > 20 && angle < 160) {\n                    align = 'left'; // right hemisphere\n                }\n                else if (angle > 200 && angle < 340) {\n                    align = 'right'; // left hemisphere\n                }\n                else {\n                    align = 'center'; // top or bottom\n                }\n                options.align = align;\n            }\n            if (options.verticalAlign === null) {\n                if (angle < 45 || angle > 315) {\n                    verticalAlign = 'bottom'; // top part\n                }\n                else if (angle > 135 && angle < 225) {\n                    verticalAlign = 'top'; // bottom part\n                }\n                else {\n                    verticalAlign = 'middle'; // left or right\n                }\n                options.verticalAlign = verticalAlign;\n            }\n            return options;\n        }\n        /**\n         * #6212 Calculate connectors for spline series in polar chart.\n         * @private\n         * @param {boolean} calculateNeighbours\n         *        Check if connectors should be calculated for neighbour points as\n         *        well allows short recurence\n         */\n        function getConnectors(segment, index, calculateNeighbours, connectEnds) {\n            const smoothing = 1.5, denom = smoothing + 1, addedNumber = connectEnds ? 1 : 0;\n            let i, leftContX, leftContY, rightContX, rightContY, jointAngle;\n            // Calculate final index of points depending on the initial index value.\n            // Because of calculating neighbours, index may be outisde segment\n            // array.\n            if (index >= 0 && index <= segment.length - 1) {\n                i = index;\n            }\n            else if (index < 0) {\n                i = segment.length - 1 + index;\n            }\n            else {\n                i = 0;\n            }\n            // 1 means control points midway between points, 2 means 1/3 from\n            // the point, 3 is 1/4 etc;\n            const prevPointInd = ((i - 1 < 0) ? segment.length - (1 + addedNumber) : i - 1), nextPointInd = (i + 1 > segment.length - 1) ? addedNumber : i + 1, previousPoint = segment[prevPointInd], nextPoint = segment[nextPointInd], previousX = previousPoint.plotX, previousY = previousPoint.plotY, nextX = nextPoint.plotX, nextY = nextPoint.plotY, plotX = segment[i].plotX, // actual point\n            plotY = segment[i].plotY;\n            leftContX = (smoothing * plotX + previousX) / denom;\n            leftContY = (smoothing * plotY + previousY) / denom;\n            rightContX = (smoothing * plotX + nextX) / denom;\n            rightContY = (smoothing * plotY + nextY) / denom;\n            // distance left control point\n            const dLControlPoint = Math.sqrt(Math.pow(leftContX - plotX, 2) + Math.pow(leftContY - plotY, 2)), dRControlPoint = Math.sqrt(Math.pow(rightContX - plotX, 2) + Math.pow(rightContY - plotY, 2)), leftContAngle = Math.atan2(leftContY - plotY, leftContX - plotX), rightContAngle = Math.atan2(rightContY - plotY, rightContX - plotX);\n            jointAngle = (Math.PI / 2) + ((leftContAngle + rightContAngle) / 2);\n            // Ensure the right direction, jointAngle should be in the same quadrant\n            // as leftContAngle\n            if (Math.abs(leftContAngle - jointAngle) > Math.PI / 2) {\n                jointAngle -= Math.PI;\n            }\n            // Find the corrected control points for a spline straight through the\n            // point\n            leftContX = plotX + Math.cos(jointAngle) * dLControlPoint;\n            leftContY = plotY + Math.sin(jointAngle) * dLControlPoint;\n            rightContX = plotX + Math.cos(Math.PI + jointAngle) * dRControlPoint;\n            rightContY = plotY + Math.sin(Math.PI + jointAngle) * dRControlPoint;\n            // push current point's connectors into returned object\n            const ret = {\n                rightContX: rightContX,\n                rightContY: rightContY,\n                leftContX: leftContX,\n                leftContY: leftContY,\n                plotX: plotX,\n                plotY: plotY\n            };\n            // calculate connectors for previous and next point and push them inside\n            // returned object\n            if (calculateNeighbours) {\n                ret.prevPointCont = getConnectors(segment, prevPointInd, false, connectEnds);\n            }\n            return ret;\n        }\n        function onChartAfterDrawChartBox() {\n            (this.pane || []).forEach((pane) => {\n                pane.render();\n            });\n        }\n        /**\n         * If polar has polygonal grid lines, force start and endOnTick on radial axis\n         * @private\n         */\n        function onChartAfterInit(event) {\n            const xAxis = event.args[0].xAxis, yAxis = event.args[0].yAxis, chart = event.args[0].chart;\n            if (xAxis && yAxis) {\n                if (yAxis.gridLineInterpolation === 'polygon') {\n                    xAxis.startOnTick = true;\n                    xAxis.endOnTick = true;\n                }\n                else if (xAxis.gridLineInterpolation === 'polygon' &&\n                    chart.inverted) {\n                    yAxis.startOnTick = true;\n                    yAxis.endOnTick = true;\n                }\n            }\n        }\n        function onChartGetAxes() {\n            if (!this.pane) {\n                this.pane = [];\n            }\n            this.options.pane = splat(this.options.pane);\n            this.options.pane.forEach((paneOptions) => {\n                new Pane(// eslint-disable-line no-new\n                paneOptions, this);\n            }, this);\n        }\n        /**\n         * Get selection dimensions\n         * @private\n         */\n        function onPointerGetSelectionBox(event) {\n            const marker = event.args.marker, xAxis = this.chart.xAxis[0], yAxis = this.chart.yAxis[0], inverted = this.chart.inverted, radialAxis = inverted ? yAxis : xAxis, linearAxis = inverted ? xAxis : yAxis;\n            if (this.chart.polar) {\n                event.preventDefault();\n                let start = (marker.attr ? marker.attr('start') : marker.start) - radialAxis.startAngleRad;\n                let r = (marker.attr ? marker.attr('r') : marker.r);\n                let end = (marker.attr ? marker.attr('end') : marker.end) - radialAxis.startAngleRad;\n                let innerR = (marker.attr ? marker.attr('innerR') : marker.innerR);\n                event.result.x = start + radialAxis.pos;\n                event.result.width = end - start;\n                // innerR goes from pane's center but toValue computes values from top\n                event.result.y = linearAxis.len + linearAxis.pos - innerR;\n                event.result.height = innerR - r;\n            }\n        }\n        /**\n         * Get attrs for Polar selection marker\n         * @private\n         */\n        function onPointerGetSelectionMarkerAttrs(event) {\n            const chart = this.chart;\n            if (chart.polar && chart.hoverPane && chart.hoverPane.axis) {\n                event.preventDefault();\n                const center = chart.hoverPane.center, mouseDownX = (this.mouseDownX || 0), mouseDownY = (this.mouseDownY || 0), chartY = event.args.chartY, chartX = event.args.chartX, fullCircle = Math.PI * 2, startAngleRad = chart.hoverPane.axis.startAngleRad, endAngleRad = chart.hoverPane.axis.endAngleRad, linearAxis = chart.inverted ? chart.xAxis[0] : chart.yAxis[0], attrs = {};\n                let shapeType = 'arc';\n                attrs.x = center[0] + chart.plotLeft;\n                attrs.y = center[1] + chart.plotTop;\n                // Adjust the width of the selection marker\n                if (this.zoomHor) {\n                    const paneRadRange = startAngleRad > 0 ?\n                        endAngleRad - startAngleRad :\n                        Math.abs(startAngleRad) + Math.abs(endAngleRad);\n                    let startAngle = Math.atan2(mouseDownY - chart.plotTop - center[1], mouseDownX - chart.plotLeft - center[0]) - startAngleRad, endAngle = Math.atan2(chartY - chart.plotTop - center[1], chartX - chart.plotLeft - center[0]) - startAngleRad;\n                    attrs.r = center[2] / 2;\n                    attrs.innerR = center[3] / 2;\n                    if (startAngle <= 0) {\n                        startAngle += fullCircle;\n                    }\n                    if (endAngle <= 0) {\n                        endAngle += fullCircle;\n                    }\n                    if (endAngle < startAngle) {\n                        // Swapping angles\n                        endAngle = [startAngle, startAngle = endAngle][0];\n                    }\n                    // If pane is not a full circle we need to let users zoom to the min\n                    // We do this by swapping angles after pointer crosses\n                    // middle angle (swapAngle) of the missing slice of the pane\n                    if (paneRadRange < fullCircle) {\n                        const swapAngle = endAngleRad + (fullCircle - paneRadRange) / 2;\n                        if (startAngleRad + endAngle > swapAngle) {\n                            endAngle = startAngle;\n                            startAngle = startAngleRad <= 0 ? startAngleRad : 0;\n                        }\n                    }\n                    const start = attrs.start =\n                        Math.max(startAngle + startAngleRad, startAngleRad), end = attrs.end =\n                        Math.min(endAngle + startAngleRad, endAngleRad);\n                    // Adjust the selection shape for polygon grid lines\n                    if (linearAxis.options.gridLineInterpolation === 'polygon') {\n                        const radialAxis = chart.hoverPane.axis, tickInterval = radialAxis.tickInterval, min = start - radialAxis.startAngleRad + radialAxis.pos, max = end - start;\n                        let path = linearAxis.getPlotLinePath({\n                            value: linearAxis.max\n                        }), pathStart = radialAxis.toValue(min), pathEnd = radialAxis.toValue(min + max);\n                        if (pathStart < radialAxis.getExtremes().min) {\n                            const { min, max } = radialAxis.getExtremes();\n                            pathStart = max - (min - pathStart);\n                        }\n                        if (pathEnd < radialAxis.getExtremes().min) {\n                            const { min, max } = radialAxis.getExtremes();\n                            pathEnd = max - (min - pathEnd);\n                        }\n                        if (pathEnd < pathStart) {\n                            // Swapping angles\n                            pathEnd = [pathStart, pathStart = pathEnd][0];\n                        }\n                        // Get trimmed path\n                        path = trimPath(path, pathStart, pathEnd, radialAxis);\n                        // Add center to the path\n                        path.push([\n                            'L', center[0] + chart.plotLeft,\n                            chart.plotTop + center[1]\n                        ]);\n                        attrs.d = path;\n                        shapeType = 'path';\n                    }\n                }\n                // Adjust the height of the selection marker\n                if (this.zoomVert) {\n                    const linearAxis = chart.inverted ? chart.xAxis[0] : chart.yAxis[0];\n                    let innerR = Math.sqrt(Math.pow(mouseDownX - chart.plotLeft - center[0], 2) +\n                        Math.pow(mouseDownY - chart.plotTop - center[1], 2)), r = Math.sqrt(Math.pow(chartX - chart.plotLeft - center[0], 2) +\n                        Math.pow(chartY - chart.plotTop - center[1], 2));\n                    if (r < innerR) {\n                        // Swapping angles\n                        innerR = [r, r = innerR][0];\n                    }\n                    if (r > center[2] / 2) {\n                        r = center[2] / 2;\n                    }\n                    if (innerR < center[3] / 2) {\n                        innerR = center[3] / 2;\n                    }\n                    if (!this.zoomHor) {\n                        attrs.start = startAngleRad;\n                        attrs.end = endAngleRad;\n                    }\n                    attrs.r = r;\n                    attrs.innerR = innerR;\n                    if (linearAxis.options.gridLineInterpolation === 'polygon') {\n                        const end = linearAxis.toValue(linearAxis.len + linearAxis.pos - innerR), start = linearAxis.toValue(linearAxis.len + linearAxis.pos - r), path = linearAxis.getPlotLinePath({\n                            value: start\n                        }).concat(linearAxis.getPlotLinePath({\n                            value: end,\n                            reverse: true\n                        }));\n                        attrs.d = path;\n                        shapeType = 'path';\n                    }\n                }\n                if (this.zoomHor &&\n                    this.zoomVert &&\n                    linearAxis.options.gridLineInterpolation === 'polygon') {\n                    const radialAxis = chart.hoverPane.axis, start = attrs.start || 0, end = attrs.end || 0, min = start - radialAxis.startAngleRad + radialAxis.pos, max = end - start, pathStart = radialAxis.toValue(min), pathEnd = radialAxis.toValue(min + max);\n                    // Trim path\n                    if (attrs.d instanceof Array) {\n                        let innerPath = attrs.d.slice(0, attrs.d.length / 2), outerPath = attrs.d.slice(attrs.d.length / 2, attrs.d.length);\n                        outerPath = [...outerPath].reverse();\n                        const radialAxis = chart.hoverPane.axis;\n                        innerPath = trimPath(innerPath, pathStart, pathEnd, radialAxis);\n                        outerPath = trimPath(outerPath, pathStart, pathEnd, radialAxis);\n                        if (outerPath) {\n                            (outerPath[0][0]) = 'L';\n                        }\n                        outerPath = [...outerPath].reverse();\n                        attrs.d = innerPath.concat(outerPath);\n                        shapeType = 'path';\n                    }\n                }\n                event.attrs = attrs;\n                event.shapeType = shapeType;\n            }\n        }\n        /**\n         * @private\n         */\n        function onSeriesAfterInit() {\n            const chart = this.chart;\n            if (chart.polar) {\n                this.polar = new PolarAdditions(this);\n                // Add flags that identifies radial inverted series\n                if (chart.inverted) {\n                    this.isRadialSeries = true;\n                    if (this.is('column')) {\n                        this.isRadialBar = true;\n                    }\n                }\n            }\n        }\n        /**\n         * Extend translate. The plotX and plotY values are computed as if the polar\n         * chart were a cartesian plane, where plotX denotes the angle in radians\n         * and (yAxis.len - plotY) is the pixel distance from center.\n         * @private\n         */\n        function onSeriesAfterTranslate() {\n            if (this.chart.polar && this.xAxis) {\n                const series = this, { xAxis, yAxis } = series, chart = series.chart;\n                // Prepare k-d-tree handling. It searches by angle (clientX) in\n                // case of shared tooltip, and by two dimensional distance in case\n                // of non-shared.\n                series.kdByAngle = chart.tooltip && chart.tooltip.shared;\n                if (series.kdByAngle) {\n                    series.searchPoint = searchPointByAngle;\n                }\n                else {\n                    series.options.findNearestPointBy = 'xy';\n                }\n                const points = series.points;\n                let i = points.length;\n                while (i--) {\n                    // Translate plotX, plotY from angle and radius to true plot\n                    // coordinates\n                    if (!series.is('column') && !series.is('columnrange')) {\n                        series.polar.toXY(points[i]);\n                    }\n                    // Treat points below Y axis min as null (#10082)\n                    if (!chart.hasParallelCoordinates &&\n                        !series.yAxis.reversed) {\n                        if (pick(points[i].y, Number.MIN_VALUE) < yAxis.min ||\n                            points[i].x < xAxis.min ||\n                            points[i].x > xAxis.max) {\n                            // Destroy markers\n                            points[i].isNull = true;\n                            // Destroy column's graphic\n                            points[i].plotY = NaN;\n                        }\n                        else {\n                            // Restore isNull flag\n                            points[i].isNull =\n                                points[i].isValid && !points[i].isValid();\n                        }\n                    }\n                }\n                // Perform clip after render\n                if (!this.hasClipCircleSetter) {\n                    this.hasClipCircleSetter = !!series.eventsToUnbind.push(addEvent(series, 'afterRender', function () {\n                        let circ;\n                        if (chart.polar && this.options.clip !== false) {\n                            // For clipping purposes there is a need for\n                            // coordinates from the absolute center\n                            circ = this.yAxis.pane.center;\n                            if (!this.clipCircle) {\n                                this.clipCircle = clipCircle(chart.renderer, circ[0], circ[1], circ[2] / 2, circ[3] / 2);\n                            }\n                            else {\n                                this.clipCircle.animate({\n                                    x: circ[0],\n                                    y: circ[1],\n                                    r: circ[2] / 2,\n                                    innerR: circ[3] / 2\n                                });\n                            }\n                            this.group.clip(this.clipCircle);\n                            this.setClip = H.noop;\n                        }\n                    }));\n                }\n            }\n        }\n        /**\n         * Search a k-d tree by the point angle, used for shared tooltips in polar\n         * charts\n         * @private\n         */\n        function searchPointByAngle(e) {\n            const series = this, chart = series.chart, xAxis = series.xAxis, center = xAxis.pane && xAxis.pane.center, plotX = e.chartX - (center && center[0] || 0) - chart.plotLeft, plotY = e.chartY - (center && center[1] || 0) - chart.plotTop;\n            return series.searchKDTree({\n                clientX: 180 + (Math.atan2(plotX, plotY) * (-180 / Math.PI))\n            });\n        }\n        /**\n         * Trim polygonal path\n         * @private\n         */\n        function trimPath(path, start, end, radialAxis) {\n            const tickInterval = radialAxis.tickInterval, ticks = radialAxis.tickPositions;\n            let lastTick = find(ticks, (tick) => tick >= end), firstTick = find([...ticks].reverse(), (tick) => tick <= start);\n            if (!defined(lastTick)) {\n                lastTick = ticks[ticks.length - 1];\n            }\n            if (!defined(firstTick)) {\n                firstTick = ticks[0];\n                lastTick += tickInterval;\n                path[0][0] = 'L';\n                // To do: figure out why -3 or -2\n                path.unshift(path[path.length - 3]);\n            }\n            path = path.slice(ticks.indexOf(firstTick), ticks.indexOf(lastTick) + 1);\n            path[0][0] = 'M';\n            return path;\n        }\n        /**\n         * Extend chart.get to also search in panes. Used internally in\n         * responsiveness and chart.update.\n         * @private\n         */\n        function wrapChartGet(proceed, id) {\n            return find(this.pane || [], function (pane) {\n                // @todo remove id or define id type:\n                return pane.options.id === id;\n            }) || proceed.call(this, id);\n        }\n        /**\n         * Align column data labels outside the columns. #1199.\n         * @private\n         */\n        function wrapColumnSeriesAlignDataLabel(proceed, point, dataLabel, options, alignTo, isNew) {\n            const chart = this.chart, inside = pick(options.inside, !!this.options.stacking);\n            let angle, shapeArgs, labelPos;\n            if (chart.polar) {\n                angle = point.rectPlotX / Math.PI * 180;\n                if (!chart.inverted) {\n                    // Align nicely outside the perimeter of the columns\n                    options = findAlignments(angle, options);\n                }\n                else { // Required corrections for data labels of inverted bars\n                    // The plotX and plotY are correctly set therefore they\n                    // don't need to be swapped (inverted argument is false)\n                    this.forceDL = chart.isInsidePlot(point.plotX, point.plotY);\n                    // Checks if labels should be positioned inside\n                    if (inside && point.shapeArgs) {\n                        shapeArgs = point.shapeArgs;\n                        // Calculates pixel positions for a data label to be\n                        // inside\n                        labelPos =\n                            this.yAxis.postTranslate(\n                            // angle\n                            ((shapeArgs.start || 0) + (shapeArgs.end || 0)) / 2 -\n                                this\n                                    .xAxis.startAngleRad, \n                            // radius\n                            point.barX +\n                                point.pointWidth / 2);\n                        alignTo = merge(alignTo, {\n                            x: labelPos.x - chart.plotLeft,\n                            y: labelPos.y - chart.plotTop\n                        });\n                    }\n                    else if (point.tooltipPos) {\n                        alignTo = merge(alignTo, {\n                            x: point.tooltipPos[0],\n                            y: point.tooltipPos[1]\n                        });\n                    }\n                    options.align = pick(options.align, 'center');\n                    options.verticalAlign =\n                        pick(options.verticalAlign, 'middle');\n                }\n                Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);\n                // Hide label of a point (only inverted) that is outside the\n                // visible y range\n                if (this.isRadialBar && point.shapeArgs &&\n                    point.shapeArgs.start === point.shapeArgs.end) {\n                    dataLabel.hide();\n                }\n                else {\n                    dataLabel.show();\n                }\n            }\n            else {\n                proceed.call(this, point, dataLabel, options, alignTo, isNew);\n            }\n        }\n        /**\n         * Extend the column prototype's translate method\n         * @private\n         */\n        function onAfterColumnTranslate() {\n            const series = this, options = series.options, stacking = options.stacking, chart = series.chart, xAxis = series.xAxis, yAxis = series.yAxis, reversed = yAxis.reversed, center = yAxis.center, startAngleRad = xAxis.startAngleRad, endAngleRad = xAxis.endAngleRad, visibleRange = endAngleRad - startAngleRad;\n            let threshold = options.threshold, thresholdAngleRad = 0, points, point, i, yMin, yMax, start = 0, end = 0, tooltipPos, pointX, pointY, stackValues, stack, barX, innerR, r;\n            // Postprocess plot coordinates\n            if (xAxis.isRadial) {\n                points = series.points;\n                i = points.length;\n                yMin = yAxis.translate(yAxis.min);\n                yMax = yAxis.translate(yAxis.max);\n                threshold = options.threshold || 0;\n                if (chart.inverted) {\n                    // Finding a correct threshold\n                    if (isNumber(threshold)) {\n                        thresholdAngleRad = yAxis.translate(threshold);\n                        // Checks if threshold is outside the visible range\n                        if (defined(thresholdAngleRad)) {\n                            if (thresholdAngleRad < 0) {\n                                thresholdAngleRad = 0;\n                            }\n                            else if (thresholdAngleRad > visibleRange) {\n                                thresholdAngleRad = visibleRange;\n                            }\n                            // Adding start angle offset\n                            series.translatedThreshold =\n                                thresholdAngleRad + startAngleRad;\n                        }\n                    }\n                }\n                while (i--) {\n                    point = points[i];\n                    barX = point.barX;\n                    pointX = point.x;\n                    pointY = point.y;\n                    point.shapeType = 'arc';\n                    if (chart.inverted) {\n                        point.plotY = yAxis.translate(pointY);\n                        if (stacking && yAxis.stacking) {\n                            stack = yAxis.stacking.stacks[(pointY < 0 ? '-' : '') +\n                                series.stackKey];\n                            if (series.visible && stack && stack[pointX]) {\n                                if (!point.isNull) {\n                                    stackValues = stack[pointX].points[series.getStackIndicator(void 0, pointX, series.index).key];\n                                    // Translating to radial values\n                                    start = yAxis.translate(stackValues[0]);\n                                    end = yAxis.translate(stackValues[1]);\n                                    // If starting point is beyond the\n                                    // range, set it to 0\n                                    if (defined(start)) {\n                                        start = U.clamp(start, 0, visibleRange);\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            // Initial start and end angles for radial bar\n                            start = thresholdAngleRad;\n                            end = point.plotY;\n                        }\n                        if (start > end) {\n                            // Swapping start and end\n                            end = [start, start = end][0];\n                        }\n                        // Prevent from rendering point outside the\n                        // acceptable circular range\n                        if (!reversed) {\n                            if (start < yMin) {\n                                start = yMin;\n                            }\n                            else if (end > yMax) {\n                                end = yMax;\n                            }\n                            else if (end < yMin || start > yMax) {\n                                start = end = 0;\n                            }\n                        }\n                        else {\n                            if (end > yMin) {\n                                end = yMin;\n                            }\n                            else if (start < yMax) {\n                                start = yMax;\n                            }\n                            else if (start > yMin || end < yMax) {\n                                start = end = visibleRange;\n                            }\n                        }\n                        if (yAxis.min > yAxis.max) {\n                            start = end = reversed ? visibleRange : 0;\n                        }\n                        start += startAngleRad;\n                        end += startAngleRad;\n                        if (center) {\n                            point.barX = barX += center[3] / 2;\n                        }\n                        // In case when radius, inner radius or both are negative, a\n                        // point is rendered but partially or as a center point\n                        innerR = Math.max(barX, 0);\n                        r = Math.max(barX + point.pointWidth, 0);\n                        // Handle border radius\n                        const brOption = options.borderRadius, brValue = typeof brOption === 'object' ?\n                            brOption.radius : brOption, borderRadius = relativeLength(brValue || 0, r - innerR);\n                        point.shapeArgs = {\n                            x: center[0],\n                            y: center[1],\n                            r,\n                            innerR,\n                            start,\n                            end,\n                            borderRadius\n                        };\n                        // Fade out the points if not inside the polar \"plot area\"\n                        point.opacity = start === end ? 0 : void 0;\n                        // A correct value for stacked or not fully visible\n                        // point\n                        point.plotY = (defined(series.translatedThreshold) &&\n                            (start < series.translatedThreshold ? start : end)) -\n                            startAngleRad;\n                        // Non-inverted polar columns\n                    }\n                    else {\n                        start = barX + startAngleRad;\n                        point.shapeArgs = series.polar.arc(point.yBottom, point.plotY, start, start + point.pointWidth);\n                        // Disallow border radius on polar columns for now. It would\n                        // take some refactoring to work with the `scope` and the\n                        // `where` options. Those options would require that only\n                        // individual corners be rounded, in practice individual calls\n                        // to applyBorderRadius from the extended `arc` function. That\n                        // would be a viable solution, though it would not be perfect\n                        // until we implemented rounding that included the lower points\n                        // in the stack, like we have for cartesian column.\n                        point.shapeArgs.borderRadius = 0;\n                    }\n                    // Provided a correct coordinates for the tooltip\n                    series.polar.toXY(point);\n                    if (chart.inverted) {\n                        tooltipPos = yAxis.postTranslate(point.rectPlotY, barX + point.pointWidth / 2);\n                        point.tooltipPos = [\n                            tooltipPos.x - chart.plotLeft,\n                            tooltipPos.y - chart.plotTop\n                        ];\n                    }\n                    else {\n                        point.tooltipPos = [point.plotX, point.plotY];\n                    }\n                    if (center) {\n                        point.ttBelow = point.plotY > center[1];\n                    }\n                }\n            }\n        }\n        /**\n         * Extend getSegmentPath to allow connecting ends across 0 to provide a\n         * closed circle in line-like series.\n         * @private\n         */\n        function wrapLineSeriesGetGraphPath(proceed, points) {\n            const series = this;\n            let firstValid, popLastPoint;\n            // Connect the path\n            if (this.chart.polar) {\n                points = points || this.points;\n                // Append first valid point in order to connect the ends\n                for (let i = 0; i < points.length; i++) {\n                    if (!points[i].isNull) {\n                        firstValid = i;\n                        break;\n                    }\n                }\n                /**\n                 * Polar charts only. Whether to connect the ends of a line series\n                 * plot across the extremes.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/line-connectends-false/\n                 *         Do not connect\n                 *\n                 * @type      {boolean}\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.series.connectEnds\n                 */\n                if (this.options.connectEnds !== false &&\n                    typeof firstValid !== 'undefined') {\n                    this.connectEnds = true; // re-used in splines\n                    points.splice(points.length, 0, points[firstValid]);\n                    popLastPoint = true;\n                }\n                // For area charts, pseudo points are added to the graph, now we\n                // need to translate these\n                points.forEach((point) => {\n                    if (typeof point.polarPlotY === 'undefined') {\n                        series.polar.toXY(point);\n                    }\n                });\n            }\n            // Run uber method\n            const ret = proceed.apply(this, [].slice.call(arguments, 1));\n            // #6212 points.splice method is adding points to an array. In case of\n            // areaspline getGraphPath method is used two times and in both times\n            // points are added to an array. That is why points.pop is used, to get\n            // unmodified points.\n            if (popLastPoint) {\n                points.pop();\n            }\n            return ret;\n        }\n        /**\n         * Extend getCoordinates to prepare for polar axis values\n         * @private\n         */\n        function wrapPointerGetCoordinates(proceed, e) {\n            const chart = this.chart;\n            let ret = {\n                xAxis: [],\n                yAxis: []\n            };\n            if (chart.polar) {\n                chart.axes.forEach((axis) => {\n                    // Skip colorAxis\n                    if (axis.coll === 'colorAxis') {\n                        return;\n                    }\n                    const isXAxis = axis.isXAxis, center = axis.center, x = e.chartX - center[0] - chart.plotLeft, y = e.chartY - center[1] - chart.plotTop;\n                    ret[isXAxis ? 'xAxis' : 'yAxis'].push({\n                        axis: axis,\n                        value: axis.translate(isXAxis ?\n                            Math.PI - Math.atan2(x, y) : // angle\n                            // distance from center\n                            Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), true)\n                    });\n                });\n            }\n            else {\n                ret = proceed.call(this, e);\n            }\n            return ret;\n        }\n        /**\n         * Prevent zooming on mobile devices\n         * @private\n         */\n        function wrapPointerPinch(proceed, e) {\n            if (this.chart.polar) {\n                return;\n            }\n            proceed.call(this, e);\n        }\n        /**\n         * Define the animate method for regular series\n         * @private\n         */\n        function wrapSeriesAnimate(proceed, init) {\n            const series = this, chart = this.chart, group = this.group, markerGroup = this.markerGroup, center = this.xAxis && this.xAxis.center, plotLeft = chart.plotLeft, plotTop = chart.plotTop;\n            let animation = this.options.animation, attribs, paneInnerR, graphic, shapeArgs, r, innerR;\n            // Specific animation for polar charts\n            if (chart.polar) {\n                if (series.isRadialBar) {\n                    if (!init) {\n                        // Run the pie animation for radial bars\n                        series.startAngleRad = pick(series.translatedThreshold, series.xAxis.startAngleRad);\n                        H.seriesTypes.pie.prototype.animate.call(series, init);\n                    }\n                }\n                else {\n                    animation = animObject(animation);\n                    // A different animation needed for column like series\n                    if (series.is('column')) {\n                        if (!init) {\n                            paneInnerR = center[3] / 2;\n                            series.points.forEach((point) => {\n                                graphic = point.graphic;\n                                shapeArgs = point.shapeArgs;\n                                r = shapeArgs && shapeArgs.r;\n                                innerR = shapeArgs && shapeArgs.innerR;\n                                if (graphic && shapeArgs) {\n                                    // start values\n                                    graphic.attr({\n                                        r: paneInnerR,\n                                        innerR: paneInnerR\n                                    });\n                                    // animate\n                                    graphic.animate({\n                                        r: r,\n                                        innerR: innerR\n                                    }, series.options.animation);\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        // Initialize the animation\n                        if (init) {\n                            // Scale down the group and place it in the center\n                            attribs = {\n                                translateX: center[0] + plotLeft,\n                                translateY: center[1] + plotTop,\n                                scaleX: 0.001,\n                                scaleY: 0.001\n                            };\n                            group.attr(attribs);\n                            if (markerGroup) {\n                                markerGroup.attr(attribs);\n                            }\n                            // Run the animation\n                        }\n                        else {\n                            attribs = {\n                                translateX: plotLeft,\n                                translateY: plotTop,\n                                scaleX: 1,\n                                scaleY: 1\n                            };\n                            group.animate(attribs, animation);\n                            if (markerGroup) {\n                                markerGroup.animate(attribs, animation);\n                            }\n                        }\n                    }\n                }\n                // For non-polar charts, revert to the basic animation\n            }\n            else {\n                proceed.call(this, init);\n            }\n        }\n        /**\n         * Overridden method for calculating a spline from one point to the next\n         * @private\n         */\n        function wrapSplineSeriesGetPointSpline(proceed, segment, point, i) {\n            let ret, connectors;\n            if (this.chart.polar) {\n                // moveTo or lineTo\n                if (!i) {\n                    ret = ['M', point.plotX, point.plotY];\n                }\n                else { // curve from last point to this\n                    connectors = getConnectors(segment, i, true, this.connectEnds);\n                    const rightContX = connectors.prevPointCont &&\n                        connectors.prevPointCont.rightContX;\n                    const rightContY = connectors.prevPointCont &&\n                        connectors.prevPointCont.rightContY;\n                    ret = [\n                        'C',\n                        isNumber(rightContX) ? rightContX : connectors.plotX,\n                        isNumber(rightContY) ? rightContY : connectors.plotY,\n                        isNumber(connectors.leftContX) ?\n                            connectors.leftContX :\n                            connectors.plotX,\n                        isNumber(connectors.leftContY) ?\n                            connectors.leftContY :\n                            connectors.plotY,\n                        connectors.plotX,\n                        connectors.plotY\n                    ];\n                }\n            }\n            else {\n                ret = proceed.call(this, segment, point, i);\n            }\n            return ret;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Extensions for polar charts. Additionally, much of the geometry required\n         * for polar charts is gathered in RadialAxes.js.\n         * @private\n         */\n        class PolarAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, PointerClass, SeriesClass, TickClass, AreaSplineRangeSeriesClass, ColumnSeriesClass, LineSeriesClass, SplineSeriesClass) {\n                RadialAxis.compose(AxisClass, TickClass);\n                if (U.pushUnique(composedMembers, ChartClass)) {\n                    addEvent(ChartClass, 'afterDrawChartBox', onChartAfterDrawChartBox);\n                    addEvent(ChartClass, 'getAxes', onChartGetAxes);\n                    addEvent(ChartClass, 'init', onChartAfterInit);\n                    const chartProto = ChartClass.prototype;\n                    wrap(chartProto, 'get', wrapChartGet);\n                }\n                if (U.pushUnique(composedMembers, PointerClass)) {\n                    const pointerProto = PointerClass.prototype;\n                    wrap(pointerProto, 'getCoordinates', wrapPointerGetCoordinates);\n                    wrap(pointerProto, 'pinch', wrapPointerPinch);\n                    addEvent(PointerClass, 'getSelectionMarkerAttrs', onPointerGetSelectionMarkerAttrs);\n                    addEvent(PointerClass, 'getSelectionBox', onPointerGetSelectionBox);\n                }\n                if (U.pushUnique(composedMembers, SeriesClass)) {\n                    addEvent(SeriesClass, 'afterInit', onSeriesAfterInit);\n                    addEvent(SeriesClass, 'afterTranslate', onSeriesAfterTranslate, { order: 2 } // Run after translation of ||-coords\n                    );\n                    addEvent(SeriesClass, 'afterColumnTranslate', onAfterColumnTranslate, { order: 4 });\n                    const seriesProto = SeriesClass.prototype;\n                    wrap(seriesProto, 'animate', wrapSeriesAnimate);\n                }\n                if (ColumnSeriesClass &&\n                    U.pushUnique(composedMembers, ColumnSeriesClass)) {\n                    const columnProto = ColumnSeriesClass.prototype;\n                    wrap(columnProto, 'alignDataLabel', wrapColumnSeriesAlignDataLabel);\n                    wrap(columnProto, 'animate', wrapSeriesAnimate);\n                }\n                if (LineSeriesClass &&\n                    U.pushUnique(composedMembers, LineSeriesClass)) {\n                    const lineProto = LineSeriesClass.prototype;\n                    wrap(lineProto, 'getGraphPath', wrapLineSeriesGetGraphPath);\n                }\n                if (SplineSeriesClass &&\n                    U.pushUnique(composedMembers, SplineSeriesClass)) {\n                    const splineProto = SplineSeriesClass.prototype;\n                    wrap(splineProto, 'getPointSpline', wrapSplineSeriesGetPointSpline);\n                    if (AreaSplineRangeSeriesClass &&\n                        U.pushUnique(composedMembers, AreaSplineRangeSeriesClass)) {\n                        const areaSplineRangeProto = AreaSplineRangeSeriesClass.prototype;\n                        // #6430 Areasplinerange series use unwrapped getPointSpline\n                        // method, so we need to set this method again.\n                        areaSplineRangeProto.getPointSpline =\n                            splineProto.getPointSpline;\n                    }\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(series) {\n                this.series = series;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            arc(low, high, start, end) {\n                const series = this.series, center = series.xAxis.center, len = series.yAxis.len, paneInnerR = center[3] / 2;\n                let r = len - high + paneInnerR, innerR = len - pick(low, len) + paneInnerR;\n                // Prevent columns from shooting through the pane's center\n                if (series.yAxis.reversed) {\n                    if (r < 0) {\n                        r = paneInnerR;\n                    }\n                    if (innerR < 0) {\n                        innerR = paneInnerR;\n                    }\n                }\n                // Return a new shapeArgs\n                return {\n                    x: center[0],\n                    y: center[1],\n                    r: r,\n                    innerR: innerR,\n                    start: start,\n                    end: end\n                };\n            }\n            /**\n             * Translate a point's plotX and plotY from the internal angle and radius\n             * measures to true plotX, plotY coordinates\n             * @private\n             */\n            toXY(point) {\n                const series = this.series, chart = series.chart, xAxis = series.xAxis, yAxis = series.yAxis, plotX = point.plotX, inverted = chart.inverted, pointY = point.y;\n                let plotY = point.plotY, radius = inverted ? plotX : yAxis.len - plotY, clientX;\n                // Corrected y position of inverted series other than column\n                if (inverted && series && !series.isRadialBar) {\n                    point.plotY = plotY =\n                        isNumber(pointY) ? yAxis.translate(pointY) : 0;\n                }\n                // Save rectangular plotX, plotY for later computation\n                point.rectPlotX = plotX;\n                point.rectPlotY = plotY;\n                if (yAxis.center) {\n                    radius += yAxis.center[3] / 2;\n                }\n                // Find the polar plotX and plotY. Avoid setting plotX and plotY to NaN\n                // when plotY is undefined (#15438)\n                if (isNumber(plotY)) {\n                    const xy = inverted ? yAxis.postTranslate(plotY, radius) :\n                        xAxis.postTranslate(plotX, radius);\n                    point.plotX = point.polarPlotX = xy.x - chart.plotLeft;\n                    point.plotY = point.polarPlotY = xy.y - chart.plotTop;\n                }\n                // If shared tooltip, record the angle in degrees in order to align X\n                // points. Otherwise, use a standard k-d tree to get the nearest point\n                // in two dimensions.\n                if (series.kdByAngle) {\n                    clientX = ((plotX / Math.PI * 180) + xAxis.pane.options.startAngle) % 360;\n                    if (clientX < 0) { // #2665\n                        clientX += 360;\n                    }\n                    point.clientX = clientX;\n                }\n                else {\n                    point.clientX = point.plotX;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PolarAdditions;\n    });\n    _registerModule(_modules, 'Core/Axis/WaterfallAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, objectEach, pushUnique } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var WaterfallAxis;\n        (function (WaterfallAxis) {\n            /* *\n             *\n             *  Interfaces\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(AxisClass, ChartClass) {\n                if (pushUnique(composedMembers, AxisClass)) {\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterBuildStacks', onAxisAfterBuildStacks);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                }\n                if (pushUnique(composedMembers, ChartClass)) {\n                    addEvent(ChartClass, 'beforeRedraw', onChartBeforeRedraw);\n                }\n            }\n            WaterfallAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterBuildStacks() {\n                const axis = this, stacks = axis.waterfall.stacks;\n                if (stacks) {\n                    stacks.changed = false;\n                    delete stacks.alreadyChanged;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, stackLabelOptions = axis.options.stackLabels;\n                if (stackLabelOptions && stackLabelOptions.enabled &&\n                    axis.waterfall.stacks) {\n                    axis.waterfall.renderStackTotals();\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.waterfall) {\n                    axis.waterfall = new Composition(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onChartBeforeRedraw() {\n                const axes = this.axes, series = this.series;\n                for (const seri of series) {\n                    if (seri.options.stacking) {\n                        for (const axis of axes) {\n                            if (!axis.isXAxis) {\n                                axis.waterfall.stacks.changed = true;\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            class Composition {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.axis = axis;\n                    this.stacks = {\n                        changed: false\n                    };\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Calls StackItem.prototype.render function that creates and renders\n                 * stack total label for each waterfall stack item.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#renderWaterfallStackTotals\n                 */\n                renderStackTotals() {\n                    const yAxis = this.axis, waterfallStacks = yAxis.waterfall.stacks, stackTotalGroup = (yAxis.stacking && yAxis.stacking.stackTotalGroup), dummyStackItem = new StackItem(yAxis, yAxis.options.stackLabels || {}, false, 0, void 0);\n                    this.dummyStackItem = dummyStackItem;\n                    // Render each waterfall stack total\n                    if (stackTotalGroup) {\n                        objectEach(waterfallStacks, (type) => {\n                            objectEach(type, (stackItem, key) => {\n                                dummyStackItem.total = stackItem.stackTotal;\n                                dummyStackItem.x = +key;\n                                if (stackItem.label) {\n                                    dummyStackItem.label = stackItem.label;\n                                }\n                                StackItem.prototype.render.call(dummyStackItem, stackTotalGroup);\n                                stackItem.label = dummyStackItem.label;\n                                delete dummyStackItem.label;\n                            });\n                        });\n                    }\n                    dummyStackItem.total = null;\n                }\n            }\n            WaterfallAxis.Composition = Composition;\n        })(WaterfallAxis || (WaterfallAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return WaterfallAxis;\n    });\n    _registerModule(_modules, 'Series/Waterfall/WaterfallPoint.js', [_modules['Series/Column/ColumnSeries.js'], _modules['Core/Series/Point.js'], _modules['Core/Utilities.js']], function (ColumnSeries, Point, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class WaterfallPoint extends ColumnSeries.prototype.pointClass {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.options = void 0;\n                this.series = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getClassName() {\n                let className = Point.prototype.getClassName.call(this);\n                if (this.isSum) {\n                    className += ' highcharts-sum';\n                }\n                else if (this.isIntermediateSum) {\n                    className += ' highcharts-intermediate-sum';\n                }\n                return className;\n            }\n            // Pass the null test in ColumnSeries.translate.\n            isValid() {\n                return (isNumber(this.y) ||\n                    this.isSum ||\n                    Boolean(this.isIntermediateSum));\n            }\n        }\n        /* *\n         *\n         *  Export\n         *\n         * */\n\n        return WaterfallPoint;\n    });\n    _registerModule(_modules, 'Series/Waterfall/WaterfallSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A waterfall chart displays sequentially introduced positive or negative\n         * values in cumulative columns.\n         *\n         * @sample highcharts/demo/waterfall/\n         *         Waterfall chart\n         * @sample highcharts/plotoptions/waterfall-inverted/\n         *         Horizontal (inverted) waterfall\n         * @sample highcharts/plotoptions/waterfall-stacked/\n         *         Stacked waterfall chart\n         *\n         * @extends      plotOptions.column\n         * @excluding    boostThreshold, boostBlending\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.waterfall\n         */\n        const WaterfallSeriesDefaults = {\n            /**\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption plotOptions.waterfall.color\n             */\n            /**\n             * The color used specifically for positive point columns. When not\n             * specified, the general series color is used.\n             *\n             * In styled mode, the waterfall colors can be set with the\n             * `.highcharts-point-negative`, `.highcharts-sum` and\n             * `.highcharts-intermediate-sum` classes.\n             *\n             * @sample {highcharts} highcharts/demo/waterfall/\n             *         Waterfall\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts\n             * @apioption plotOptions.waterfall.upColor\n             */\n            dataLabels: {\n                inside: true\n            },\n            /**\n             * The width of the line connecting waterfall columns.\n             *\n             * @product highcharts\n             */\n            lineWidth: 1,\n            /**\n             * The color of the line that connects columns in a waterfall series.\n             *\n             * In styled mode, the stroke can be set with the `.highcharts-graph`\n             * class.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since   3.0\n             * @product highcharts\n             */\n            lineColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * A name for the dash style to use for the line connecting the columns\n             * of the waterfall series. Possible values: Dash, DashDot, Dot,\n             * LongDash, LongDashDot, LongDashDotDot, ShortDash, ShortDashDot,\n             * ShortDashDotDot, ShortDot, Solid\n             *\n             * In styled mode, the stroke dash-array can be set with the\n             * `.highcharts-graph` class.\n             *\n             * @type    {Highcharts.DashStyleValue}\n             * @since   3.0\n             * @product highcharts\n             */\n            dashStyle: 'Dot',\n            /**\n             * The color of the border of each waterfall column.\n             *\n             * In styled mode, the border stroke can be set with the\n             * `.highcharts-point` class.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since   3.0\n             * @product highcharts\n             */\n            borderColor: \"#333333\" /* Palette.neutralColor80 */,\n            states: {\n                hover: {\n                    lineWidthPlus: 0 // #3126\n                }\n            }\n        };\n        /**\n         * A `waterfall` series. If the [type](#series.waterfall.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.waterfall\n         * @excluding dataParser, dataURL, boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.waterfall\n         */\n        /**\n         * An array of data points for the series. For the `waterfall` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. The `x` values will be automatically\n         *    calculated, either starting at 0 and incremented by 1, or from\n         *    `pointStart` and `pointInterval` given in the series options. If the axis\n         *    has categories, these will be used. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of arrays with 2 values. In this case, the values correspond to\n         *    `x,y`. If the first value is a string, it is applied as the name of the\n         *    point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 7],\n         *        [1, 8],\n         *        [2, 3]\n         *    ]\n         *    ```\n         *\n         * 3. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.waterfall.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 8,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 8,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n         * @extends   series.line.data\n         * @excluding marker\n         * @product   highcharts\n         * @apioption series.waterfall.data\n         */\n        /**\n         * When this property is true, the points acts as a summary column for\n         * the values added or substracted since the last intermediate sum,\n         * or since the start of the series. The `y` value is ignored.\n         *\n         * @sample {highcharts} highcharts/demo/waterfall/\n         *         Waterfall\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   highcharts\n         * @apioption series.waterfall.data.isIntermediateSum\n         */\n        /**\n         * When this property is true, the point display the total sum across\n         * the entire series. The `y` value is ignored.\n         *\n         * @sample {highcharts} highcharts/demo/waterfall/\n         *         Waterfall\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   highcharts\n         * @apioption series.waterfall.data.isSum\n         */\n        ''; // adds doclets above to transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return WaterfallSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Waterfall/WaterfallSeries.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Core/Axis/WaterfallAxis.js'], _modules['Series/Waterfall/WaterfallPoint.js'], _modules['Series/Waterfall/WaterfallSeriesDefaults.js']], function (SeriesRegistry, U, WaterfallAxis, WaterfallPoint, WaterfallSeriesDefaults) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries, line: LineSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, arrayMax, arrayMin, correctFloat, extend, isNumber, merge, objectEach, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Returns true if the key is a direct property of the object.\n         * @private\n         * @param {*} obj\n         * Object with property to test\n         * @param {string} key\n         * Property key to test\n         * @return {boolean}\n         * Whether it is a direct property\n         */\n        function ownProp(obj, key) {\n            return Object.hasOwnProperty.call(obj, key);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Waterfall series type.\n         *\n         * @private\n         */\n        class WaterfallSeries extends ColumnSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.chart = void 0;\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n                this.stackedYNeg = void 0;\n                this.stackedYPos = void 0;\n                this.stackKey = void 0;\n                this.xData = void 0;\n                this.yAxis = void 0;\n                this.yData = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            // After generating points, set y-values for all sums.\n            generatePoints() {\n                // Parent call:\n                ColumnSeries.prototype.generatePoints.apply(this);\n                for (let i = 0, len = this.points.length; i < len; i++) {\n                    const point = this.points[i], y = this.processedYData[i];\n                    // Override point value for sums. #3710 Update point does not\n                    // propagate to sum\n                    if (isNumber(y) && (point.isIntermediateSum || point.isSum)) {\n                        point.y = correctFloat(y);\n                    }\n                }\n            }\n            // Call default processData then override yData to reflect waterfall's\n            // extremes on yAxis\n            processData(force) {\n                const series = this, options = series.options, yData = series.yData, \n                // #3710 Update point does not propagate to sum\n                points = options.data, dataLength = yData.length, threshold = options.threshold || 0;\n                let point, subSum, sum, dataMin, dataMax, y;\n                sum = subSum = dataMin = dataMax = 0;\n                for (let i = 0; i < dataLength; i++) {\n                    y = yData[i];\n                    point = points && points[i] ? points[i] : {};\n                    if (y === 'sum' || point.isSum) {\n                        yData[i] = correctFloat(sum);\n                    }\n                    else if (y === 'intermediateSum' ||\n                        point.isIntermediateSum) {\n                        yData[i] = correctFloat(subSum);\n                        subSum = 0;\n                    }\n                    else {\n                        sum += y;\n                        subSum += y;\n                    }\n                    dataMin = Math.min(sum, dataMin);\n                    dataMax = Math.max(sum, dataMax);\n                }\n                super.processData.call(this, force);\n                // Record extremes only if stacking was not set:\n                if (!options.stacking) {\n                    series.dataMin = dataMin + threshold;\n                    series.dataMax = dataMax;\n                }\n                return;\n            }\n            // Return y value or string if point is sum\n            toYData(pt) {\n                if (pt.isSum) {\n                    return 'sum';\n                }\n                if (pt.isIntermediateSum) {\n                    return 'intermediateSum';\n                }\n                return pt.y;\n            }\n            updateParallelArrays(point, i) {\n                super.updateParallelArrays.call(this, point, i);\n                // Prevent initial sums from triggering an error (#3245, #7559)\n                if (this.yData[0] === 'sum' || this.yData[0] === 'intermediateSum') {\n                    this.yData[0] = null;\n                }\n            }\n            // Postprocess mapping between options and SVG attributes\n            pointAttribs(point, state) {\n                const upColor = this.options.upColor;\n                // Set or reset up color (#3710, update to negative)\n                if (upColor && !point.options.color && isNumber(point.y)) {\n                    point.color = point.y > 0 ? upColor : void 0;\n                }\n                const attr = ColumnSeries.prototype.pointAttribs.call(this, point, state);\n                // The dashStyle option in waterfall applies to the graph, not\n                // the points\n                delete attr.dashstyle;\n                return attr;\n            }\n            // Return an empty path initially, because we need to know the stroke-width\n            // in order to set the final path.\n            getGraphPath() {\n                return [['M', 0, 0]];\n            }\n            // Draw columns' connector lines\n            getCrispPath() {\n                const // Skip points where Y is not a number (#18636)\n                data = this.data.filter((d) => isNumber(d.y)), yAxis = this.yAxis, length = data.length, graphNormalizer = Math.round(this.graph.strokeWidth()) % 2 / 2, borderNormalizer = Math.round(this.borderWidth) % 2 / 2, reversedXAxis = this.xAxis.reversed, reversedYAxis = this.yAxis.reversed, stacking = this.options.stacking, path = [];\n                for (let i = 1; i < length; i++) {\n                    if (!( // Skip lines that would pass over the null point (#18636)\n                    this.options.connectNulls ||\n                        isNumber(this.data[data[i].index - 1].y))) {\n                        continue;\n                    }\n                    const box = data[i].box, prevPoint = data[i - 1], prevY = prevPoint.y || 0, prevBox = data[i - 1].box;\n                    if (!box || !prevBox) {\n                        continue;\n                    }\n                    const prevStack = yAxis.waterfall.stacks[this.stackKey], isPos = prevY > 0 ? -prevBox.height : 0;\n                    if (prevStack && prevBox && box) {\n                        const prevStackX = prevStack[i - 1];\n                        // y position of the connector is different when series are\n                        // stacked, yAxis is reversed and it also depends on point's\n                        // value\n                        let yPos;\n                        if (stacking) {\n                            const connectorThreshold = prevStackX.connectorThreshold;\n                            yPos = Math.round((yAxis.translate(connectorThreshold, false, true, false, true) +\n                                (reversedYAxis ? isPos : 0))) - graphNormalizer;\n                        }\n                        else {\n                            yPos =\n                                prevBox.y + prevPoint.minPointLengthOffset +\n                                    borderNormalizer - graphNormalizer;\n                        }\n                        path.push([\n                            'M',\n                            (prevBox.x || 0) + (reversedXAxis ?\n                                0 :\n                                (prevBox.width || 0)),\n                            yPos\n                        ], [\n                            'L',\n                            (box.x || 0) + (reversedXAxis ?\n                                (box.width || 0) :\n                                0),\n                            yPos\n                        ]);\n                    }\n                    if (prevBox &&\n                        path.length &&\n                        ((!stacking && prevY < 0 && !reversedYAxis) ||\n                            (prevY > 0 && reversedYAxis))) {\n                        const nextLast = path[path.length - 2];\n                        if (nextLast && typeof nextLast[2] === 'number') {\n                            nextLast[2] += prevBox.height || 0;\n                        }\n                        const last = path[path.length - 1];\n                        if (last && typeof last[2] === 'number') {\n                            last[2] += prevBox.height || 0;\n                        }\n                    }\n                }\n                return path;\n            }\n            // The graph is initially drawn with an empty definition, then updated with\n            // crisp rendering.\n            drawGraph() {\n                LineSeries.prototype.drawGraph.call(this);\n                if (this.graph) {\n                    this.graph.attr({\n                        d: this.getCrispPath()\n                    });\n                }\n            }\n            // Waterfall has stacking along the x-values too.\n            setStackedPoints(axis) {\n                const series = this, options = series.options, waterfallStacks = axis.waterfall?.stacks, seriesThreshold = options.threshold || 0, stackKey = series.stackKey, xData = series.xData, xLength = xData.length;\n                let stackThreshold = seriesThreshold, interSum = stackThreshold, actualStackX, totalYVal = 0, actualSum = 0, prevSum = 0, statesLen, posTotal, negTotal, xPoint, yVal, x, alreadyChanged, changed;\n                // Function responsible for calculating correct values for stackState\n                // array of each stack item. The arguments are: firstS - the value for\n                // the first state, nextS - the difference between the previous and the\n                // newest state, sInx - counter used in the for that updates each state\n                // when necessary, sOff - offset that must be added to each state when\n                // they need to be updated (if point isn't a total sum)\n                // eslint-disable-next-line require-jsdoc\n                const calculateStackState = (firstS, nextS, sInx, sOff) => {\n                    if (actualStackX) {\n                        if (!statesLen) {\n                            actualStackX.stackState[0] = firstS;\n                            statesLen = actualStackX.stackState.length;\n                        }\n                        else {\n                            for (sInx; sInx < statesLen; sInx++) {\n                                actualStackX.stackState[sInx] += sOff;\n                            }\n                        }\n                        actualStackX.stackState.push(actualStackX.stackState[statesLen - 1] + nextS);\n                    }\n                };\n                if (axis.stacking && waterfallStacks) {\n                    // Code responsible for creating stacks for waterfall series\n                    if (series.reserveSpace()) {\n                        changed = waterfallStacks.changed;\n                        alreadyChanged = waterfallStacks.alreadyChanged;\n                        // In case of a redraw, stack for each x value must be emptied\n                        // (only for the first series in a specific stack) and\n                        // recalculated once more\n                        if (alreadyChanged &&\n                            alreadyChanged.indexOf(stackKey) < 0) {\n                            changed = true;\n                        }\n                        if (!waterfallStacks[stackKey]) {\n                            waterfallStacks[stackKey] = {};\n                        }\n                        const actualStack = waterfallStacks[stackKey];\n                        if (actualStack) {\n                            for (let i = 0; i < xLength; i++) {\n                                x = xData[i];\n                                if (!actualStack[x] || changed) {\n                                    actualStack[x] = {\n                                        negTotal: 0,\n                                        posTotal: 0,\n                                        stackTotal: 0,\n                                        threshold: 0,\n                                        stateIndex: 0,\n                                        stackState: [],\n                                        label: ((changed &&\n                                            actualStack[x]) ?\n                                            actualStack[x].label :\n                                            void 0)\n                                    };\n                                }\n                                actualStackX = actualStack[x];\n                                yVal = series.yData[i];\n                                if (yVal >= 0) {\n                                    actualStackX.posTotal += yVal;\n                                }\n                                else {\n                                    actualStackX.negTotal += yVal;\n                                }\n                                // Points do not exist yet, so raw data is used\n                                xPoint = options.data[i];\n                                posTotal = actualStackX.absolutePos =\n                                    actualStackX.posTotal;\n                                negTotal = actualStackX.absoluteNeg =\n                                    actualStackX.negTotal;\n                                actualStackX.stackTotal = posTotal + negTotal;\n                                statesLen = actualStackX.stackState.length;\n                                if (xPoint && xPoint.isIntermediateSum) {\n                                    calculateStackState(prevSum, actualSum, 0, prevSum);\n                                    prevSum = actualSum;\n                                    actualSum = seriesThreshold;\n                                    // Swapping values\n                                    stackThreshold ^= interSum;\n                                    interSum ^= stackThreshold;\n                                    stackThreshold ^= interSum;\n                                }\n                                else if (xPoint && xPoint.isSum) {\n                                    calculateStackState(seriesThreshold, totalYVal, statesLen, 0);\n                                    stackThreshold = seriesThreshold;\n                                }\n                                else {\n                                    calculateStackState(stackThreshold, yVal, 0, totalYVal);\n                                    if (xPoint) {\n                                        totalYVal += yVal;\n                                        actualSum += yVal;\n                                    }\n                                }\n                                actualStackX.stateIndex++;\n                                actualStackX.threshold = stackThreshold;\n                                stackThreshold += actualStackX.stackTotal;\n                            }\n                        }\n                        waterfallStacks.changed = false;\n                        if (!waterfallStacks.alreadyChanged) {\n                            waterfallStacks.alreadyChanged = [];\n                        }\n                        waterfallStacks.alreadyChanged.push(stackKey);\n                    }\n                }\n            }\n            // Extremes for a non-stacked series are recorded in processData.\n            // In case of stacking, use Series.stackedYData to calculate extremes.\n            getExtremes() {\n                const stacking = this.options.stacking;\n                let yAxis, waterfallStacks, stackedYNeg, stackedYPos;\n                if (stacking) {\n                    yAxis = this.yAxis;\n                    waterfallStacks = yAxis.waterfall.stacks;\n                    stackedYNeg = this.stackedYNeg = [];\n                    stackedYPos = this.stackedYPos = [];\n                    // the visible y range can be different when stacking is set to\n                    // overlap and different when it's set to normal\n                    if (stacking === 'overlap') {\n                        objectEach(waterfallStacks[this.stackKey], function (stackX) {\n                            stackedYNeg.push(arrayMin(stackX.stackState));\n                            stackedYPos.push(arrayMax(stackX.stackState));\n                        });\n                    }\n                    else {\n                        objectEach(waterfallStacks[this.stackKey], function (stackX) {\n                            stackedYNeg.push(stackX.negTotal + stackX.threshold);\n                            stackedYPos.push(stackX.posTotal + stackX.threshold);\n                        });\n                    }\n                    return {\n                        dataMin: arrayMin(stackedYNeg),\n                        dataMax: arrayMax(stackedYPos)\n                    };\n                }\n                // When not stacking, data extremes have already been computed in the\n                // processData function.\n                return {\n                    dataMin: this.dataMin,\n                    dataMax: this.dataMax\n                };\n            }\n        }\n        WaterfallSeries.defaultOptions = merge(ColumnSeries.defaultOptions, WaterfallSeriesDefaults);\n        WaterfallSeries.compose = WaterfallAxis.compose;\n        extend(WaterfallSeries.prototype, {\n            getZonesGraphs: LineSeries.prototype.getZonesGraphs,\n            pointValKey: 'y',\n            // Property needed to prevent lines between the columns from disappearing\n            // when negativeColor is used.\n            showLine: true,\n            pointClass: WaterfallPoint\n        });\n        // Translate data points from raw values\n        addEvent(WaterfallSeries, 'afterColumnTranslate', function () {\n            const series = this, { options, points, yAxis } = series, minPointLength = pick(options.minPointLength, 5), halfMinPointLength = minPointLength / 2, threshold = options.threshold || 0, stacking = options.stacking, actualStack = yAxis.waterfall.stacks[series.stackKey];\n            let previousIntermediate = threshold, previousY = threshold, y, total, yPos, hPos;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i], yValue = series.processedYData[i], shapeArgs = point.shapeArgs, box = extend({\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                }, shapeArgs || {});\n                point.box = box;\n                const range = [0, yValue], pointY = point.y || 0;\n                // code responsible for correct positions of stacked points\n                // starts here\n                if (stacking) {\n                    if (actualStack) {\n                        const actualStackX = actualStack[i];\n                        if (stacking === 'overlap') {\n                            total =\n                                actualStackX.stackState[actualStackX.stateIndex--];\n                            y = pointY >= 0 ? total : total - pointY;\n                            if (ownProp(actualStackX, 'absolutePos')) {\n                                delete actualStackX.absolutePos;\n                            }\n                            if (ownProp(actualStackX, 'absoluteNeg')) {\n                                delete actualStackX.absoluteNeg;\n                            }\n                        }\n                        else {\n                            if (pointY >= 0) {\n                                total = actualStackX.threshold +\n                                    actualStackX.posTotal;\n                                actualStackX.posTotal -= pointY;\n                                y = total;\n                            }\n                            else {\n                                total = actualStackX.threshold +\n                                    actualStackX.negTotal;\n                                actualStackX.negTotal -= pointY;\n                                y = total - pointY;\n                            }\n                            if (!actualStackX.posTotal) {\n                                if (isNumber(actualStackX.absolutePos) &&\n                                    ownProp(actualStackX, 'absolutePos')) {\n                                    actualStackX.posTotal =\n                                        actualStackX.absolutePos;\n                                    delete actualStackX.absolutePos;\n                                }\n                            }\n                            if (!actualStackX.negTotal) {\n                                if (isNumber(actualStackX.absoluteNeg) &&\n                                    ownProp(actualStackX, 'absoluteNeg')) {\n                                    actualStackX.negTotal =\n                                        actualStackX.absoluteNeg;\n                                    delete actualStackX.absoluteNeg;\n                                }\n                            }\n                        }\n                        if (!point.isSum) {\n                            // the connectorThreshold property is later used in\n                            // getCrispPath function to draw a connector line in a\n                            // correct place\n                            actualStackX.connectorThreshold =\n                                actualStackX.threshold + actualStackX.stackTotal;\n                        }\n                        if (yAxis.reversed) {\n                            yPos = (pointY >= 0) ? (y - pointY) : (y + pointY);\n                            hPos = y;\n                        }\n                        else {\n                            yPos = y;\n                            hPos = y - pointY;\n                        }\n                        point.below = yPos <= threshold;\n                        box.y = yAxis.translate(yPos, false, true, false, true);\n                        box.height = Math.abs(box.y -\n                            yAxis.translate(hPos, false, true, false, true));\n                        const dummyStackItem = yAxis.waterfall.dummyStackItem;\n                        if (dummyStackItem) {\n                            dummyStackItem.x = i;\n                            dummyStackItem.label = actualStack[i].label;\n                            dummyStackItem.setOffset(series.pointXOffset || 0, series.barW || 0, series.stackedYNeg[i], series.stackedYPos[i], void 0, this.xAxis);\n                        }\n                    }\n                }\n                else {\n                    // up points\n                    y = Math.max(previousY, previousY + pointY) + range[0];\n                    box.y = yAxis.translate(y, false, true, false, true);\n                    // sum points\n                    if (point.isSum) {\n                        box.y = yAxis.translate(range[1], false, true, false, true);\n                        box.height = Math.min(yAxis.translate(range[0], false, true, false, true), yAxis.len) - box.y; // #4256\n                        point.below = range[1] <= threshold;\n                    }\n                    else if (point.isIntermediateSum) {\n                        if (pointY >= 0) {\n                            yPos = range[1] + previousIntermediate;\n                            hPos = previousIntermediate;\n                        }\n                        else {\n                            yPos = previousIntermediate;\n                            hPos = range[1] + previousIntermediate;\n                        }\n                        if (yAxis.reversed) {\n                            // swapping values\n                            yPos ^= hPos;\n                            hPos ^= yPos;\n                            yPos ^= hPos;\n                        }\n                        box.y = yAxis.translate(yPos, false, true, false, true);\n                        box.height = Math.abs(box.y -\n                            Math.min(yAxis.translate(hPos, false, true, false, true), yAxis.len));\n                        previousIntermediate += range[1];\n                        point.below = yPos <= threshold;\n                        // If it's not the sum point, update previous stack end position\n                        // and get shape height (#3886)\n                    }\n                    else {\n                        box.height = yValue > 0 ?\n                            yAxis.translate(previousY, false, true, false, true) - box.y :\n                            yAxis.translate(previousY, false, true, false, true) - yAxis.translate(previousY - yValue, false, true, false, true);\n                        previousY += yValue;\n                        point.below = previousY < threshold;\n                    }\n                    // #3952 Negative sum or intermediate sum not rendered correctly\n                    if (box.height < 0) {\n                        box.y += box.height;\n                        box.height *= -1;\n                    }\n                }\n                point.plotY = box.y =\n                    Math.round(box.y || 0) - (series.borderWidth % 2) / 2;\n                // #3151\n                box.height =\n                    Math.max(Math.round(box.height || 0), 0.001);\n                point.yBottom = box.y + box.height;\n                if (box.height <= minPointLength && !point.isNull) {\n                    box.height = minPointLength;\n                    box.y -= halfMinPointLength;\n                    point.plotY = box.y;\n                    if (pointY < 0) {\n                        point.minPointLengthOffset = -halfMinPointLength;\n                    }\n                    else {\n                        point.minPointLengthOffset = halfMinPointLength;\n                    }\n                }\n                else {\n                    // #8024, empty gaps in the line for null data\n                    if (point.isNull) {\n                        box.width = 0;\n                    }\n                    point.minPointLengthOffset = 0;\n                }\n                // Correct tooltip placement (#3014)\n                const tooltipY = point.plotY + (point.negative ? box.height : 0);\n                if (point.below) { // #15334\n                    point.plotY += box.height;\n                }\n                if (point.tooltipPos) {\n                    if (series.chart.inverted) {\n                        point.tooltipPos[0] = yAxis.len - tooltipY;\n                    }\n                    else {\n                        point.tooltipPos[1] = tooltipY;\n                    }\n                }\n                // Check point position after recalculation (#16788)\n                point.isInside = this.isPointInside(point);\n                merge(true, point.shapeArgs, box);\n            }\n        }, { order: 2 });\n        SeriesRegistry.registerSeriesType('waterfall', WaterfallSeries);\n        /* *\n         *\n         * Export\n         *\n         * */\n\n        return WaterfallSeries;\n    });\n    _registerModule(_modules, 'masters/highcharts-more.src.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Bubble/BubbleSeries.js'], _modules['Series/PackedBubble/PackedBubbleSeries.js'], _modules['Series/PolarComposition.js'], _modules['Series/Waterfall/WaterfallSeries.js']], function (Highcharts, SeriesRegistry, BubbleSeries, PackedBubbleSeries, PolarAdditions, WaterfallSeries) {\n\n        const G = Highcharts;\n        BubbleSeries.compose(G.Axis, G.Chart, G.Legend, G.Series);\n        PackedBubbleSeries.compose(G.Axis, G.Chart, G.Legend, G.Series);\n        PolarAdditions.compose(G.Axis, G.Chart, G.Pointer, G.Series, G.Tick, SeriesRegistry.seriesTypes.areasplinerange, SeriesRegistry.seriesTypes.column, SeriesRegistry.seriesTypes.line, SeriesRegistry.seriesTypes.spline);\n        WaterfallSeries.compose(G.Axis, G.Chart);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","Chart","CU","H","Pointer","U","addEvent","correctFloat","defined","extend","merge","pick","splat","prototype","collectionsWithUpdate","push","Pane","constructor","options","chart","background","center","coll","defaultOptions","size","innerSize","startAngle","defaultBackgroundOptions","shape","borderWidth","borderColor","backgroundColor","linearGradient","x1","y1","x2","y2","stops","from","Number","MAX_VALUE","innerRadius","to","outerRadius","init","pane","setOptions","angular","render","backgroundOption","renderer","len","i","group","g","attr","zIndex","add","updateCenter","Math","max","length","axis","renderBackground","destroy","splice","backgroundOptions","method","attribs","className","styledMode","getPlotBandPath","getCenter","call","update","redraw","axes","forEach","isInsidePane","x","y","endAngle","insideSlice","cx","cy","distance","sqrt","pow","angle","atan2","PI","ceil","getHoverPane","eventArgs","hoverPane","chartX","plotLeft","chartY","plotTop","e","polar","inverted","isInsidePlot","some","normalizedStartAngleRad","normalizedEndAngleRad","filter","s","visible","shared","directTouch","enableMouseTracking","xAxis","hoverPoint","plotX","plotY","SeriesRegistry","area","pointClass","AreaPoint","areaProto","seriesTypes","isNumber","arguments","high","low","series","setState","prevState","state","isPolar","marker","symbol","plotHigh","yAxis","toPixels","plotLow","lowerStateMarkerGraphic","stateMarkerGraphic","upperStateMarkerGraphic","graphic","graphics","plotHighX","plotLowX","originalSettings","modifyMarkerSettings","restoreMarkerSettings","haloPath","isInside","isTopInside","concat","isValid","AreaRangePoint","noop","AreaSeries","column","columnProto","isArray","AreaRangeSeries","data","points","toYData","point","highToXY","xy","postTranslate","rectPlotX","getGraphPath","highPoints","highAreaPoints","connectEnds","connectNulls","pointShim","step","highAreaPoint","yBottom","doCurve","isNull","polarPlotY","lowerPath","left","right","higherPath","higherAreaPath","linePath","graphPath","areaPath","isArea","xMap","drawDataLabels","up","upperDataLabelOptions","lowerDataLabelOptions","originalDataLabels","dataLabelOptions","dataLabels","enabled","xHigh","yHigh","xLow","yLow","hasDataLabels","inside","_plotY","dataLabel","dataLabelUpper","below","align","verticalAlign","label","alignDataLabel","originalMarkerSettings","lowMarker","drawPoints","pointLength","origProps","negative","zone","threshold","zones","getZone","hasMarkerChanged","oldOptions","oldMarker","height","width","lineWidth","tooltip","pointFormat","trackByArea","pointArrayMap","join","translate","dataModify","modifyValue","order","tooltipPos","pos","posHigh","deferTranslatePolar","pointValKey","setStackedPoints","registerSeriesType","spline","splineProto","AreaSplineRangeSeries","getPointSpline","whiskerLength","fillColor","medianWidth","whiskerWidth","BoxPlotSeriesDefaults","ColumnSeries","BoxPlotSeries","pointAttribs","key","highPlot","doQuartiles","q1Plot","q3Plot","lowPlot","medianPlot","medianPath","crispCorr","crispX","boxPath","halfWidth","pointWiskerLength","verb","shapeArgs","boxAttr","stemAttr","whiskersAttr","medianAttr","color","d","round","floor","stem","addClass","whiskers","box","medianShape","stroke","stemColor","stemWidth","dashstyle","stemDashStyle","dashStyle","whiskerColor","whiskerDashStyle","fill","lineColor","boxDashStyle","medianColor","medianDashStyle","strokeWidth","test","parseFloat","q1","median","q3","connectorClassName","connectorColor","connectorDistance","connectorWidth","labels","allowOverlap","format","formatter","style","fontSize","maxSize","minSize","legendIndex","ranges","value","sizeBy","sizeByAbsoluteValue","zThreshold","Color","F","parse","arrayMax","arrayMin","stableSort","legend","maxLabel","movementX","selected","symbols","addToLegend","items","drawLegendSymbol","connectorSpace","itemDistance","legendItem","bubbleLegend","autoRanges","a","b","getMaxLabelSize","radius","labelWidth","labelHeight","seriesIndex","baseline","bubbleAttribs","connectorAttribs","labelAttribs","rtl","fillOpacity","range","setOpacity","get","getRangeRadius","bubbleSeries","zMax","zMin","getRadius","connectors","bubbleItems","css","itemStyle","translateX","translateY","renderRange","hideOverlappingLabels","mainRange","labelsOptions","elementCenter","absoluteRadius","abs","labelsAlign","posX","posY","crispMovement","connectorLength","circle","colorIndex","crispLine","text","formatLabel","position","getBBox","placed","alignAttr","labelSize","numberFormatter","index","newOpacity","oldOpacity","show","hide","getRanges","rangesOptions","zData","minZ","maxZ","isBubble","ignoreSeries","min","displayNegative","reverse","predictBubbleSizes","legendOptions","floating","horizontal","layout","lastLineHeight","plotSizeX","plotSizeY","pxSizes","getPxExtremes","minPxSize","maxPxSize","calculatedSize","plotSize","updateRanges","bubbleLegendOptions","correctSizes","bubbleSeriesSize","bubbleLegendSize","BubbleLegendDefaults","BubbleLegendItem","D","objectEach","wrap","composedMembers","chartDrawChartBox","proceed","callback","bubbleSizes","getVisibleBubbleSeriesIndex","allItems","item","getMargins","setScale","updateNames","ticks","tick","isNew","isNewLabel","retranslateItems","getLinesHeights","lines","lastLine","legendItem2","j","itemHeight","onLegendAfterGetAllItems","bubbleSeriesIndex","destroyItem","onSeriesLegendItemClick","status","defaultPrevented","orgTranslateX","orgTranslateY","actualLine","compose","ChartClass","LegendClass","SeriesClass","pushUnique","Point","scatter","ScatterPoint","BubblePoint","ttBelow","BubbleLegendComposition","Series","ScatterSeries","clamp","axisBeforePadding","axisLength","isXAxis","dataKey","pxMin","pxMax","transA","hasActiveSeries","bubblePadding","reserveSpace","allowZoomOutside","onPoint","getRadii","radii","dataMin","logarithmic","keys","BubbleSeries","yData","AxisClass","beforePadding","animate","animationLimit","hasRendered","markerAttribs","animation","zExtremes","bubbleZExtremes","valid","otherSeries","getZExtremes","yValue","sizeByArea","zRange","hasData","processedXData","markerOptions","translateBubble","zoneAxis","z","dlBox","smallestSize","plotWidth","plotHeight","getPxSize","isPercent","parseInt","states","hover","radiusPlus","softThreshold","halo","turboThreshold","applyZones","parallelArrays","trackerGroups","specialGroup","target","arearange","ColumnRangePoint","ColumnRangeSeries","stacking","translate3dPoints","translate3dShapes","afterColumnTranslate","heightDifference","start","startAngleRad","isRadial","safeDistance","chartWidth","chartHeight","minPointLength","rectPlotY","barX","shapeType","arc","pointWidth","crispCol","borderRadius","where","pointRange","adjustForMissingColumns","drawGraph","getSymbol","drawTracker","getColumnMetrics","ColumnPyramidSeriesDefaults","ColumnPyramidSeries","dense","closestPointRange","metrics","pointXOffset","offset","translatedThreshold","getThreshold","seriesBarW","barW","pointPadding","barY","barH","stackTotal","stackHeight","topPointY","topXwidth","bottomXwidth","invBarPos","x3","x4","centerInCategory","total","grouping","linkedTo","ErrorBarSeriesDefaults","ErrorBarSeries","linkedParent","columnMetrics","valKey","GaugePoint","pInt","GaugeSeries","generatePoints","dialOptions","dial","baseLength","rearLength","baseWidth","topWidth","overshoot","rotation","endAngleRad","percentage","pivot","pivotOptions","plotGroup","seriesGroup","clip","clipRect","setData","processData","crop","defer","headerFormat","showInLegend","fixedBox","forceDL","noSharedTooltip","onChartLoad","mousedownUnbinder","mousemoveUnbinder","mouseupUnbinder","container","event","hasDraggableNodes","draggable","onMouseDown","onMouseMove","ownerDocument","onMouseUp","normalizedEvent","pointer","normalize","fixedPosition","inDragMode","newPlotX","newPlotY","diffX","diffY","graphLayoutsLookup","hasDragged","redrawHalo","restartSimulation","_event","enableSimulation","fixedDraggable","A","setAnimation","onChartAfterPrint","updateSimulation","onChartBeforePrint","onChartPredraw","stop","onChartRender","systemsStable","afterRender","layoutStep","maxIterations","isFinite","temperature","isStable","beforeStep","integrations","layouts","bubble","degree","NaN","mass","removeElementFromCollection","nodes","firePointEvent","seriesOptions","isParentNode","parentNode","temp","allowPointSelect","select","getSelectedPoints","getSelectedParentNodes","crisp","useSimulation","parentNodeFormatter","name","parentNodeTextPath","padding","transition","layoutAlgorithm","initialPositions","initialPositionRadius","parentNodeLimit","seriesInteraction","dragBetweenSeries","parentNodeOptions","gravitationalConstant","maxSpeed","type","integration","splitSeries","friction","attractive","link","force","distanceXY","massFactor","getMass","translatedX","diffTemperature","translatedY","fromNode","toNode","attractiveForceFunction","k","barycenter","xFactor","yFactor","top","node","getK","integrate","prevX","prevY","dispX","dispY","signX","signY","vectorLength","repulsive","factor","repulsiveForceFunction","VerletIntegration","PackedBubbleIntegration","centerX","centerY","repNode","distanceR","getDegree","phi","QuadTreeNode","body","isEmpty","isInternal","boxSize","divideBox","halfHeight","getBoxPosition","insert","depth","newQuadTreeNode","updateMassAndCenter","pointMass","maxDepth","root","isRoot","calculateMassAndCenter","visitNodeRecursive","insertNodes","beforeCallback","afterCallback","goFurther","qtNode","EulerIntegration","GraphLayout","QuadTree","win","isFunction","fireEvent","ReingoldFruchtermanLayout","attractiveForce","currentStep","initialRendering","links","quadTree","repulsiveForce","simulation","euler","verlet","setInitialRendering","approximation","enable","forces","initPositions","finishedAnimating","setK","resetSimulation","allSeries","forceName","createQuadTree","anyLayout","applyLimits","coolDown","startTemperature","prevSystemTemperature","systemTemperature","getSystemTemperature","cancelAnimationFrame","requestAnimationFrame","setArea","w","h","linkLength","addElementsToCollection","elements","collection","element","indexOf","clear","forcedStop","setMaxIterations","setTemperature","setDiffTemperature","setCircularPositions","setRandomPositions","nodesLength","rootNodes","linksTo","visitedNodes","addToNodes","linksFrom","id","sortedNodes","rootNode","iEnd","cos","sin","unrandom","n","rand","barycenterForces","getBarycenter","systemMass","barnesHutApproximation","quadNode","goDeeper","getDistXY","theta","repulsiveForces","attractiveForces","applyLimitBox","temperatureStep","vector","getDistR","nodeA","nodeB","xDist","yDist","absX","absY","chartGetSelectedParentNodes","selectedParentsNodes","onChartBeforeRedraw","allDataPoints","PackedBubbleLayout","packedbubble","chartProto","calculateParentRadius","tempDiff","upScaledTemperature","neighbours","parentNodeRadius","syncTimeout","animObject","initDataLabels","dlOptions","dataLabelsGroup","initDataLabelsGroup","opacity","initDataLabelsDefer","deferDataLabels","DragNodesComposition","PackedBubblePoint","PackedBubbleSeriesDefaults","seriesProto","PackedBubbleSeries","parentNodeMass","xData","accumulateAllPoints","is","addLayout","layoutOptions","layoutType","chartOptions","graphLayoutsStorage","forExport","collisionNmb","addSeriesLayout","seriesLayout","parentNodeLayout","createParentNodes","bBox","seriesBox","calculateZExtremes","valMin","Infinity","valMax","checkOverlap","bubble1","bubble2","sumRad","nodeAdded","parentMarkerOptions","brighten","p","normal","dataLabelOnNull","deferLayout","formatPrefix","nodeMarker","parentOptions","parentAttribs","parentNodesGroup","graph","div","getPointRadius","extremes","allDataPointsLength","prop","minRadius","maxRadius","eventsToUnbind","isDirty","dnPoint","removed","addPoint","remove","placeBubbles","positionBubble","bubblePos","stage","calculatedBubble","arr","sortedArr","sort","stages","rawPositions","resizeRadius","hasParentMarker","lastBubble","newOrigin","nextBubble","alfa","acos","beta","asin","gamma","delta","finalAngle","minX","maxX","minY","maxY","positions","POSITIVE_INFINITY","NEGATIVE_INFINITY","spaceRatio","smallerDimension","setVisible","axisTypes","isCartesian","requireSorting","indexateNodes","searchPoint","stickyTracking","followPointer","legendSymbol","PolygonSeriesDefaults","line","LineSeries","PolygonSeries","AxisDefaults","RadialAxis","relativeLength","defaultCircularOptions","gridLineWidth","textOverflow","maxPadding","minPadding","showLastLabel","tickLength","defaultRadialGaugeOptions","minorGridLineWidth","minorTickInterval","minorTickLength","minorTickPosition","minorTickWidth","tickPosition","tickWidth","title","defaultRadialOptions","gridLineInterpolation","beforeSetTickPositions","autoConnect","isCircular","userMax","categories","createLabelCollector","tickPositions","map","Boolean","createLabelCollectorHidden","getCrosshairPosition","end","getPosition","getLinePath","_lineWidth","r","horiz","open","innerR","xBounds","yBounds","angleRad","getOffset","axisProto","axisOffset","side","radiusToPixels","percentRegex","fullRadius","xOnPerimeter","thickness","getPlotLinePath","transFrom","transTo","isCrosshair","paneInnerR","innerRatio","otherAxis","crossPos","slice","translatedVal","getTitlePosition","titleOptions","middle","modify","setAxisSize","setAxisTranslation","onAxisAfterInit","isHidden","paneOptions","fullCircle","normalizedStart","normalizedEnd","onAxisAutoLabelAlign","preventDefault","onAxisDestroy","labelCollectors","labelCollector","onAxisInit","isX","paneIndex","userOptions","radialAxis","renderHidden","setCategories","setTitle","defaultPolarOptions","defaultXAxisOptions","defaultYAxisOptions","stackLabels","reversedStacks","onAxisInitialAxisTranslation","onTickAfterGetLabelPosition","labelBBox","labelOptions","correctAngle","labelYPosCorrection","optionsY","ret","centerSlot","labelDir","reducedAngle1","reducedAngle2","fontMetrics","tickInterval","onTickAfterGetPosition","sector","minPixelPadding","minPointOffset","plotBands","wrapTickGetMarkPath","endPoint","TickClass","find","uniqueKey","onChartAfterDrawChartBox","onChartAfterInit","startOnTick","endOnTick","onChartGetAxes","onPointerGetSelectionBox","linearAxis","result","onPointerGetSelectionMarkerAttrs","mouseDownX","mouseDownY","attrs","zoomHor","paneRadRange","swapAngle","pathStart","toValue","pathEnd","getExtremes","trimPath","zoomVert","Array","innerPath","outerPath","onSeriesAfterInit","PolarAdditions","isRadialSeries","isRadialBar","onSeriesAfterTranslate","kdByAngle","searchPointByAngle","findNearestPointBy","toXY","hasParallelCoordinates","reversed","MIN_VALUE","hasClipCircleSetter","circ","clipCircle","clipPath","createElement","defs","wrapper","setClip","searchKDTree","clientX","lastTick","firstTick","unshift","wrapChartGet","wrapColumnSeriesAlignDataLabel","alignTo","labelPos","onAfterColumnTranslate","visibleRange","thresholdAngleRad","yMin","yMax","pointX","pointY","stackValues","stack","stacks","stackKey","getStackIndicator","brOption","brValue","wrapLineSeriesGetGraphPath","firstValid","popLastPoint","pop","wrapPointerGetCoordinates","wrapPointerPinch","wrapSeriesAnimate","markerGroup","pie","scaleX","scaleY","wrapSplineSeriesGetPointSpline","segment","getConnectors","calculateNeighbours","leftContX","leftContY","rightContX","rightContY","jointAngle","addedNumber","prevPointInd","nextPointInd","previousPoint","nextPoint","previousX","previousY","nextX","nextY","smoothing","dLControlPoint","dRControlPoint","leftContAngle","rightContAngle","prevPointCont","PointerClass","AreaSplineRangeSeriesClass","ColumnSeriesClass","LineSeriesClass","SplineSeriesClass","pointerProto","lineProto","areaSplineRangeProto","polarPlotX","StackItem","WaterfallAxis","onAxisAfterBuildStacks","waterfall","changed","alreadyChanged","onAxisAfterRender","stackLabelOptions","renderStackTotals","Composition","seri","waterfallStacks","stackTotalGroup","dummyStackItem","stackItem","WaterfallPoint","getClassName","isSum","isIntermediateSum","lineWidthPlus","WaterfallSeriesDefaults","ownProp","Object","WaterfallSeries","stackedYNeg","stackedYPos","processedYData","subSum","sum","dataMax","dataLength","pt","updateParallelArrays","upColor","getCrispPath","graphNormalizer","borderNormalizer","reversedXAxis","reversedYAxis","prevPoint","prevBox","prevStack","isPos","yPos","prevStackX","connectorThreshold","minPointLengthOffset","nextLast","last","seriesThreshold","xLength","stackThreshold","interSum","actualStackX","totalYVal","actualSum","prevSum","statesLen","posTotal","negTotal","xPoint","yVal","calculateStackState","firstS","nextS","sInx","sOff","stackState","actualStack","stateIndex","absolutePos","absoluteNeg","stackX","getZonesGraphs","showLine","halfMinPointLength","previousIntermediate","hPos","setOffset","tooltipY","isPointInside","G","Axis","Legend","Tick","areasplinerange"],"mappings":"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"}