{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.0 (2024-03-04)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2024 Kamil Kulig\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/regressions', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/LinearRegression/LinearRegressionIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { isArray, extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Linear regression series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearregression\n         *\n         * @augments Highcharts.Series\n         */\n        class LinearRegressionIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Return the slope and intercept of a straight line function.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period.\n             *\n             * @param {Array<number>} yData\n             * List of all y coordinates in a period.\n             *\n             * @return {Highcharts.RegressionLineParametersObject}\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             */\n            getRegressionLineParameters(xData, yData) {\n                // least squares method\n                const yIndex = this.options.params.index, getSingleYValue = function (yValue, yIndex) {\n                    return isArray(yValue) ? yValue[yIndex] : yValue;\n                }, xSum = xData.reduce(function (accX, val) {\n                    return val + accX;\n                }, 0), ySum = yData.reduce(function (accY, val) {\n                    return getSingleYValue(val, yIndex) + accY;\n                }, 0), xMean = xSum / xData.length, yMean = ySum / yData.length;\n                let xError, yError, i, formulaNumerator = 0, formulaDenominator = 0;\n                for (i = 0; i < xData.length; i++) {\n                    xError = xData[i] - xMean;\n                    yError = getSingleYValue(yData[i], yIndex) - yMean;\n                    formulaNumerator += xError * yError;\n                    formulaDenominator += Math.pow(xError, 2);\n                }\n                const slope = formulaDenominator ?\n                    formulaNumerator / formulaDenominator : 0; // don't divide by 0\n                return {\n                    slope: slope,\n                    intercept: yMean - slope * xMean\n                };\n            }\n            /**\n             * Return the y value on a straight line.\n             *\n             * @private\n             *\n             * @param {Highcharts.RegressionLineParametersObject} lineParameters\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             *\n             * @param {number} endPointX\n             * X coordinate of the point.\n             *\n             * @return {number}\n             * Y value of the point that lies on the line.\n             */\n            getEndPointY(lineParameters, endPointX) {\n                return lineParameters.slope * endPointX + lineParameters.intercept;\n            }\n            /**\n             * Transform the coordinate system so that x values start at 0 and\n             * apply xAxisUnit.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period\n             *\n             * @param {number} xAxisUnit\n             * Option (see the API)\n             *\n             * @return {Array<number>}\n             * Array of transformed x data\n             */\n            transformXData(xData, xAxisUnit) {\n                const xOffset = xData[0];\n                return xData.map(function (xValue) {\n                    return (xValue - xOffset) / xAxisUnit;\n                });\n            }\n            /**\n             * Find the closest distance between points in the base series.\n             * @private\n             * @param {Array<number>} xData list of all x coordinates in the base series\n             * @return {number} - closest distance between points in the base series\n             */\n            findClosestDistance(xData) {\n                let distance, closestDistance, i;\n                for (i = 1; i < xData.length - 1; i++) {\n                    distance = xData[i] - xData[i - 1];\n                    if (distance > 0 &&\n                        (typeof closestDistance === 'undefined' ||\n                            distance < closestDistance)) {\n                        closestDistance = distance;\n                    }\n                }\n                return closestDistance;\n            }\n            // Required to be implemented - starting point for indicator's logic\n            getValues(baseSeries, regressionSeriesParams) {\n                const xData = baseSeries.xData, yData = baseSeries.yData, period = regressionSeriesParams.period, \n                // format required to be returned\n                indicatorData = {\n                    xData: [],\n                    yData: [],\n                    values: []\n                }, xAxisUnit = this.options.params.xAxisUnit ||\n                    this.findClosestDistance(xData);\n                let lineParameters, i, periodStart, periodEnd, endPointX, endPointY, periodXData, periodYData, periodTransformedXData;\n                // Iteration logic: x value of the last point within the period\n                // (end point) is used to represent the y value (regression)\n                // of the entire period.\n                for (i = period - 1; i <= xData.length - 1; i++) {\n                    periodStart = i - period + 1; // adjusted for slice() function\n                    periodEnd = i + 1; // (as above)\n                    endPointX = xData[i];\n                    periodXData = xData.slice(periodStart, periodEnd);\n                    periodYData = yData.slice(periodStart, periodEnd);\n                    periodTransformedXData = this.transformXData(periodXData, xAxisUnit);\n                    lineParameters = this.getRegressionLineParameters(periodTransformedXData, periodYData);\n                    endPointY = this.getEndPointY(lineParameters, periodTransformedXData[periodTransformedXData.length - 1]);\n                    // @todo this is probably not used anywhere\n                    indicatorData.values.push({\n                        regressionLineParameters: lineParameters,\n                        x: endPointX,\n                        y: endPointY\n                    });\n                    indicatorData.xData.push(endPointX);\n                    indicatorData.yData.push(endPointY);\n                }\n                return indicatorData;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Linear regression indicator. This series requires `linkedTo` option to be\n         * set.\n         *\n         * @sample {highstock} stock/indicators/linear-regression\n         *         Linear regression indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/regressions\n         * @optionparent plotOptions.linearregression\n         */\n        LinearRegressionIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                /**\n                 * Unit (in milliseconds) for the x axis distances used to\n                 * compute the regression line parameters (slope & intercept)\n                 * for every range. In Highcharts Stock the x axis values are\n                 * always represented in milliseconds which may cause that\n                 * distances between points are \"big\" integer numbers.\n                 *\n                 * Highcharts Stock's linear regression algorithm (least squares\n                 * method) will utilize these \"big\" integers for finding the\n                 * slope and the intercept of the regression line for each\n                 * period. In consequence, this value may be a very \"small\"\n                 * decimal number that's hard to interpret by a human.\n                 *\n                 * For instance: `xAxisUnit` equaled to `86400000` ms (1 day)\n                 * forces the algorithm to treat `86400000` as `1` while\n                 * computing the slope and the intercept. This may enhance the\n                 * legibility of the indicator's values.\n                 *\n                 * Default value is the closest distance between two data\n                 * points.\n                 *\n                 * In `v9.0.2`, the default value has been changed\n                 * from `undefined` to `null`.\n                 *\n                 * @sample {highstock} stock/plotoptions/linear-regression-xaxisunit\n                 *         xAxisUnit set to 1 minute\n                 *\n                 * @example\n                 * // In Liniear Regression Slope Indicator series `xAxisUnit`is\n                 * // `86400000` (1 day) and period is `3`. There're 3 points in\n                 * // the base series:\n                 *\n                 * data: [\n                 *   [Date.UTC(2020, 0, 1), 1],\n                 *   [Date.UTC(2020, 0, 2), 3],\n                 *   [Date.UTC(2020, 0, 3), 5]\n                 * ]\n                 *\n                 * // This will produce one point in the indicator series that\n                 * // has a `y` value of `2` (slope of the regression line). If\n                 * // we change the `xAxisUnit` to `1` (ms) the value of the\n                 * // indicator's point will be `2.3148148148148148e-8` which is\n                 * // harder to interpert for a human.\n                 *\n                 * @type    {null|number}\n                 * @product highstock\n                 */\n                xAxisUnit: null\n            },\n            tooltip: {\n                valueDecimals: 4\n            }\n        });\n        extend(LinearRegressionIndicator.prototype, {\n            nameBase: 'Linear Regression Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegression', LinearRegressionIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A linear regression series. If the\n         * [type](#series.linearregression.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregression\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregression\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionSlopes/LinearRegressionSlopesIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { linearRegression: LinearRegressionIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Linear Regression Slope series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionSlope\n         *\n         * @augments Highcharts.Series\n         */\n        class LinearRegressionSlopesIndicator extends LinearRegressionIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getEndPointY(lineParameters) {\n                return lineParameters.slope;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Linear regression slope indicator. This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample {highstock} stock/indicators/linear-regression-slope\n         *         Linear regression slope indicator\n         *\n         * @extends      plotOptions.linearregression\n         * @since        7.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @optionparent plotOptions.linearregressionslope\n         */\n        LinearRegressionSlopesIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n        extend(LinearRegressionSlopesIndicator.prototype, {\n            nameBase: 'Linear Regression Slope Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionSlope', LinearRegressionSlopesIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionslope.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionslope\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionslope\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionSlopesIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionIntercept/LinearRegressionInterceptIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { linearRegression: LinearRegressionIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Linear Regression Intercept series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionIntercept\n         *\n         * @augments Highcharts.Series\n         */\n        class LinearRegressionInterceptIndicator extends LinearRegressionIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getEndPointY(lineParameters) {\n                return lineParameters.intercept;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Linear regression intercept indicator. This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample {highstock} stock/indicators/linear-regression-intercept\n         *         Linear intercept slope indicator\n         *\n         * @extends      plotOptions.linearregression\n         * @since        7.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @optionparent plotOptions.linearregressionintercept\n         */\n        LinearRegressionInterceptIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n        extend(LinearRegressionInterceptIndicator.prototype, {\n            nameBase: 'Linear Regression Intercept Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionIntercept', LinearRegressionInterceptIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionintercept.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionintercept\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionintercept\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionInterceptIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionAngle/LinearRegressionAngleIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { linearRegression: LinearRegressionIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Linear Regression Angle series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionAngle\n         *\n         * @augments Highcharts.Series\n         */\n        class LinearRegressionAngleIndicator extends LinearRegressionIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Convert a slope of a line to angle (in degrees) between\n             * the line and x axis\n             * @private\n             * @param {number} slope of the straight line function\n             * @return {number} angle in degrees\n             */\n            slopeToAngle(slope) {\n                return Math.atan(slope) * (180 / Math.PI); // rad to deg\n            }\n            getEndPointY(lineParameters) {\n                return this.slopeToAngle(lineParameters.slope);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Linear regression angle indicator. This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample {highstock} stock/indicators/linear-regression-angle\n         *         Linear intercept angle indicator\n         *\n         * @extends      plotOptions.linearregression\n         * @since        7.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @optionparent plotOptions.linearregressionangle\n         */\n        LinearRegressionAngleIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions, {\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span>' +\n                    '{series.name}: <b>{point.y}°</b><br/>'\n            }\n        });\n        extend(LinearRegressionAngleIndicator.prototype, {\n            nameBase: 'Linear Regression Angle Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionAngle', LinearRegressionAngleIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionangle.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionangle\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionangle\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionAngleIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/regressions.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line max-len\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","SeriesRegistry","U","sma","SMAIndicator","seriesTypes","isArray","extend","merge","LinearRegressionIndicator","getRegressionLineParameters","xData","yData","yIndex","options","params","index","getSingleYValue","yValue","xSum","reduce","accX","val","ySum","accY","xMean","length","yMean","xError","i","formulaNumerator","formulaDenominator","Math","pow","slope","intercept","getEndPointY","lineParameters","endPointX","transformXData","xAxisUnit","xOffset","map","xValue","findClosestDistance","distance","closestDistance","getValues","baseSeries","regressionSeriesParams","periodStart","periodEnd","endPointY","periodXData","periodYData","periodTransformedXData","period","indicatorData","values","slice","push","regressionLineParameters","x","y","defaultOptions","tooltip","valueDecimals","prototype","nameBase","registerSeriesType","linearRegression","LinearRegressionSlopesIndicator","LinearRegressionInterceptIndicator","LinearRegressionAngleIndicator","slopeToAngle","PI","atan","pointFormat"],"mappings":"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"}