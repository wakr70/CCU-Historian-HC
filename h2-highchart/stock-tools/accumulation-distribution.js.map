{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.2.0 (2023-10-30)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2021 Sebastian Bochan\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/accumulation-distribution', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/AD/ADIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { error, extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AD series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ad\n         *\n         * @augments Highcharts.Series\n         */\n        class ADIndicator extends SMAIndicator {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static populateAverage(xVal, yVal, yValVolume, i, _period) {\n                const high = yVal[i][1], low = yVal[i][2], close = yVal[i][3], volume = yValVolume[i], adY = close === high && close === low || high === low ?\n                    0 :\n                    ((2 * close - low - high) / (high - low)) * volume, adX = xVal[i];\n                return [adX, adY];\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, volumeSeriesID = params.volumeSeriesID, volumeSeries = series.chart.get(volumeSeriesID), yValVolume = volumeSeries && volumeSeries.yData, yValLen = yVal ? yVal.length : 0, AD = [], xData = [], yData = [];\n                let len, i, ADPoint;\n                if (xVal.length <= period &&\n                    yValLen &&\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                if (!volumeSeries) {\n                    error('Series ' +\n                        volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                // i = period <-- skip first N-points\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen; i++) {\n                    len = AD.length;\n                    ADPoint = ADIndicator.populateAverage(xVal, yVal, yValVolume, i, period);\n                    if (len > 0) {\n                        ADPoint[1] += AD[len - 1][1];\n                    }\n                    AD.push(ADPoint);\n                    xData.push(ADPoint[0]);\n                    yData.push(ADPoint[1]);\n                }\n                return {\n                    values: AD,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /**\n         * Accumulation Distribution (AD). This series requires `linkedTo` option to\n         * be set.\n         *\n         * @sample stock/indicators/accumulation-distribution\n         *         Accumulation/Distribution indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/accumulation-distribution\n         * @optionparent plotOptions.ad\n         */\n        ADIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0,\n                /**\n                 * The id of volume series which is mandatory.\n                 * For example using OHLC data, volumeSeriesID='volume' means\n                 * the indicator will be calculated using OHLC and volume values.\n                 *\n                 * @since 6.0.0\n                 */\n                volumeSeriesID: 'volume'\n            }\n        });\n        extend(ADIndicator.prototype, {\n            nameComponents: false,\n            nameBase: 'Accumulation/Distribution'\n        });\n        SeriesRegistry.registerSeriesType('ad', ADIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `AD` series. If the [type](#series.ad.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ad\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/accumulation-distribution\n         * @apioption series.ad\n         */\n        ''; // add doclet above to transpiled file\n\n        return ADIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/accumulation-distribution.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","SeriesRegistry","U","sma","SMAIndicator","seriesTypes","error","extend","merge","ADIndicator","constructor","arguments","data","options","points","populateAverage","xVal","yVal","yValVolume","i","_period","high","low","close","volume","adX","getValues","series","params","len","ADPoint","period","xData","yData","volumeSeriesID","volumeSeries","chart","get","yValLen","length","AD","push","values","defaultOptions","index","prototype","nameComponents","nameBase","registerSeriesType"],"mappings":"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"}