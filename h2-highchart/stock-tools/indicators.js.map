{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.0 (2024-03-04)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2024 Pawel Fus, Sebastian Bochan\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/indicators', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/SMA/SMAIndicator.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Chart, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { line: LineSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, fireEvent, error, extend, isArray, merge, pick, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The SMA series type.\n         *\n         * @private\n         */\n        class SMAIndicator extends LineSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.dataEventsToUnbind.forEach(function (unbinder) {\n                    unbinder();\n                });\n                super.destroy.apply(this, arguments);\n            }\n            /**\n             * @private\n             */\n            getName() {\n                const params = [];\n                let name = this.name;\n                if (!name) {\n                    (this.nameComponents || []).forEach(function (component, index) {\n                        params.push(this.options.params[component] +\n                            pick(this.nameSuffixes[index], ''));\n                    }, this);\n                    name = (this.nameBase || this.type.toUpperCase()) +\n                        (this.nameComponents ? ' (' + params.join(', ') + ')' : '');\n                }\n                return name;\n            }\n            /**\n             * @private\n             */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal.length, SMA = [], xData = [], yData = [];\n                let i, index = -1, range = 0, SMAPoint, sum = 0;\n                if (xVal.length < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                while (range < period - 1) {\n                    sum += index < 0 ? yVal[range] : yVal[range][index];\n                    range++;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = range; i < yValLen; i++) {\n                    sum += index < 0 ? yVal[i] : yVal[i][index];\n                    SMAPoint = [xVal[i], sum / period];\n                    SMA.push(SMAPoint);\n                    xData.push(SMAPoint[0]);\n                    yData.push(SMAPoint[1]);\n                    sum -= (index < 0 ?\n                        yVal[i - range] :\n                        yVal[i - range][index]);\n                }\n                return {\n                    values: SMA,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n            /**\n             * @private\n             */\n            init(chart, options) {\n                const indicator = this;\n                super.init.call(indicator, chart, options);\n                // Only after series are linked indicator can be processed.\n                const linkedSeriesUnbiner = addEvent(Chart, 'afterLinkSeries', function ({ isUpdating }) {\n                    // #18643 indicator shouldn't recalculate\n                    // values while series updating.\n                    if (isUpdating) {\n                        return;\n                    }\n                    const hasEvents = !!indicator.dataEventsToUnbind.length;\n                    if (indicator.linkedParent) {\n                        if (!hasEvents) {\n                            // No matter which indicator, always recalculate after\n                            // updating the data.\n                            indicator.dataEventsToUnbind.push(addEvent(indicator.linkedParent, 'updatedData', function () {\n                                indicator.recalculateValues();\n                            }));\n                            // Some indicators (like VBP) requires an additional\n                            // event (afterSetExtremes) to properly show the data.\n                            if (indicator.calculateOn.xAxis) {\n                                indicator.dataEventsToUnbind.push(addEvent(indicator.linkedParent.xAxis, indicator.calculateOn.xAxis, function () {\n                                    indicator.recalculateValues();\n                                }));\n                            }\n                        }\n                        // Most indicators are being calculated on chart's init.\n                        if (indicator.calculateOn.chart === 'init') {\n                            if (!indicator.processedYData) {\n                                indicator.recalculateValues();\n                            }\n                        }\n                        else if (!hasEvents) {\n                            // Some indicators (like VBP) has to recalculate their\n                            // values after other chart's events (render).\n                            const unbinder = addEvent(indicator.chart, indicator.calculateOn.chart, function () {\n                                indicator.recalculateValues();\n                                // Call this just once.\n                                unbinder();\n                            });\n                        }\n                    }\n                    else {\n                        return error('Series ' +\n                            indicator.options.linkedTo +\n                            ' not found! Check `linkedTo`.', false, chart);\n                    }\n                }, {\n                    order: 0\n                });\n                // Make sure we find series which is a base for an indicator\n                // chart.linkSeries();\n                indicator.dataEventsToUnbind = [];\n                indicator.eventsToUnbind.push(linkedSeriesUnbiner);\n            }\n            /**\n             * @private\n             */\n            recalculateValues() {\n                const croppedDataValues = [], indicator = this, oldData = indicator.points || [], oldDataLength = (indicator.xData || []).length, emptySet = {\n                    values: [],\n                    xData: [],\n                    yData: []\n                };\n                let overwriteData = true, oldFirstPointIndex, oldLastPointIndex, croppedData, min, max, i;\n                // Updating an indicator with redraw=false may destroy data.\n                // If there will be a following update for the parent series,\n                // we will try to access Series object without any properties\n                // (except for prototyped ones). This is what happens\n                // for example when using Axis.setDataGrouping(). See #16670\n                const processedData = indicator.linkedParent.options &&\n                    indicator.linkedParent.yData && // #18176, #18177 indicators should\n                    indicator.linkedParent.yData.length ? // work with empty dataset\n                    (indicator.getValues(indicator.linkedParent, indicator.options.params) || emptySet) : emptySet;\n                // We need to update points to reflect changes in all,\n                // x and y's, values. However, do it only for non-grouped\n                // data - grouping does it for us (#8572)\n                if (oldDataLength &&\n                    !indicator.hasGroupedData &&\n                    indicator.visible &&\n                    indicator.points) {\n                    // When data is cropped update only avaliable points (#9493)\n                    if (indicator.cropped) {\n                        if (indicator.xAxis) {\n                            min = indicator.xAxis.min;\n                            max = indicator.xAxis.max;\n                        }\n                        croppedData = indicator.cropData(processedData.xData, processedData.yData, min, max);\n                        for (i = 0; i < croppedData.xData.length; i++) {\n                            // (#10774)\n                            croppedDataValues.push([\n                                croppedData.xData[i]\n                            ].concat(splat(croppedData.yData[i])));\n                        }\n                        oldFirstPointIndex = processedData.xData.indexOf(indicator.xData[0]);\n                        oldLastPointIndex = processedData.xData.indexOf(indicator.xData[indicator.xData.length - 1]);\n                        // Check if indicator points should be shifted (#8572)\n                        if (oldFirstPointIndex === -1 &&\n                            oldLastPointIndex === processedData.xData.length - 2) {\n                            if (croppedDataValues[0][0] === oldData[0].x) {\n                                croppedDataValues.shift();\n                            }\n                        }\n                        indicator.updateData(croppedDataValues);\n                    }\n                    else if (indicator.updateAllPoints || // #18710\n                        // Omit addPoint() and removePoint() cases\n                        processedData.xData.length !== oldDataLength - 1 &&\n                            processedData.xData.length !== oldDataLength + 1) {\n                        overwriteData = false;\n                        indicator.updateData(processedData.values);\n                    }\n                }\n                if (overwriteData) {\n                    indicator.xData = processedData.xData;\n                    indicator.yData = processedData.yData;\n                    indicator.options.data = processedData.values;\n                }\n                // Removal of processedXData property is required because on\n                // first translate processedXData array is empty\n                if (indicator.calculateOn.xAxis && indicator.processedXData) {\n                    delete indicator.processedXData;\n                    indicator.isDirty = true;\n                    indicator.redraw();\n                }\n                indicator.isDirtyData = !!indicator.linkedSeries.length;\n                fireEvent(indicator, 'updatedData'); // #18689\n            }\n            /**\n             * @private\n             */\n            processData() {\n                const series = this, compareToMain = series.options.compareToMain, linkedParent = series.linkedParent;\n                super.processData.apply(series, arguments);\n                if (series.dataModify &&\n                    linkedParent &&\n                    linkedParent.dataModify &&\n                    linkedParent.dataModify.compareValue &&\n                    compareToMain) {\n                    series.dataModify.compareValue =\n                        linkedParent.dataModify.compareValue;\n                }\n                return;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * The parameter allows setting line series type and use OHLC indicators.\n         * Data in OHLC format is required.\n         *\n         * @sample {highstock} stock/indicators/use-ohlc-data\n         *         Use OHLC data format to plot line chart\n         *\n         * @type      {boolean}\n         * @product   highstock\n         * @apioption plotOptions.line.useOhlcData\n         */\n        /**\n         * Simple moving average indicator (SMA). This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample stock/indicators/sma\n         *         Simple moving average indicator\n         *\n         * @extends      plotOptions.line\n         * @since        6.0.0\n         * @excluding    allAreas, colorAxis, dragDrop, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking, useOhlcData\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @optionparent plotOptions.sma\n         */\n        SMAIndicator.defaultOptions = merge(LineSeries.defaultOptions, {\n            /**\n             * The name of the series as shown in the legend, tooltip etc. If not\n             * set, it will be based on a technical indicator type and default\n             * params.\n             *\n             * @type {string}\n             */\n            name: void 0,\n            tooltip: {\n                /**\n                 * Number of decimals in indicator series.\n                 */\n                valueDecimals: 4\n            },\n            /**\n             * The main series ID that indicator will be based on. Required for this\n             * indicator.\n             *\n             * @type {string}\n             */\n            linkedTo: void 0,\n            /**\n             * Whether to compare indicator to the main series values\n             * or indicator values.\n             *\n             * @sample {highstock} stock/plotoptions/series-comparetomain/\n             *         Difference between comparing SMA values to the main series\n             *         and its own values.\n             *\n             * @type {boolean}\n             */\n            compareToMain: false,\n            /**\n             * Parameters used in calculation of regression series' points.\n             */\n            params: {\n                /**\n                 * The point index which indicator calculations will base. For\n                 * example using OHLC data, index=2 means the indicator will be\n                 * calculated using Low values.\n                 */\n                index: 3,\n                /**\n                 * The base period for indicator calculations. This is the number of\n                 * data points which are taken into account for the indicator\n                 * calculations.\n                 */\n                period: 14\n            }\n        });\n        extend(SMAIndicator.prototype, {\n            calculateOn: {\n                chart: 'init'\n            },\n            hasDerivedData: true,\n            nameComponents: ['period'],\n            nameSuffixes: [],\n            useCommonDataGrouping: true\n        });\n        SeriesRegistry.registerSeriesType('sma', SMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `SMA` series. If the [type](#series.sma.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sma\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL, useOhlcData\n         * @requires  stock/indicators/indicators\n         * @apioption series.sma\n         */\n        (''); // adds doclet above to the transpiled file\n\n        return SMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/EMA/EMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The EMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ema\n         *\n         * @augments Highcharts.Series\n         */\n        class EMAIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            accumulatePeriodPoints(period, index, yVal) {\n                let sum = 0, i = 0, y = 0;\n                while (i < period) {\n                    y = index < 0 ? yVal[i] : yVal[i][index];\n                    sum = sum + y;\n                    i++;\n                }\n                return sum;\n            }\n            calculateEma(xVal, yVal, i, EMApercent, calEMA, index, SMA) {\n                const x = xVal[i - 1], yValue = index < 0 ?\n                    yVal[i - 1] :\n                    yVal[i - 1][index], y = typeof calEMA === 'undefined' ?\n                    SMA : correctFloat((yValue * EMApercent) +\n                    (calEMA * (1 - EMApercent)));\n                return [x, y];\n            }\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, EMApercent = 2 / (period + 1), EMA = [], xData = [], yData = [];\n                let calEMA, EMAPoint, i, index = -1, sum = 0, SMA = 0;\n                // Check period, if bigger than points length, skip\n                if (yValLen < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                sum = this.accumulatePeriodPoints(period, index, yVal);\n                // first point\n                SMA = sum / period;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 1; i++) {\n                    EMAPoint = this.calculateEma(xVal, yVal, i, EMApercent, calEMA, index, SMA);\n                    EMA.push(EMAPoint);\n                    xData.push(EMAPoint[0]);\n                    yData.push(EMAPoint[1]);\n                    calEMA = EMAPoint[1];\n                }\n                return {\n                    values: EMA,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Exponential moving average indicator (EMA). This series requires the\n         * `linkedTo` option to be set.\n         *\n         * @sample stock/indicators/ema\n         * Exponential moving average indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @optionparent plotOptions.ema\n         */\n        EMAIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                /**\n                 * The point index which indicator calculations will base. For\n                 * example using OHLC data, index=2 means the indicator will be\n                 * calculated using Low values.\n                 *\n                 * By default index value used to be set to 0. Since\n                 * Highcharts Stock 7 by default index is set to 3\n                 * which means that the ema indicator will be\n                 * calculated using Close values.\n                 */\n                index: 3,\n                period: 9 // @merge 14 in v6.2\n            }\n        });\n        SeriesRegistry.registerSeriesType('ema', EMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `EMA` series. If the [type](#series.ema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ema\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @apioption series.ema\n         */\n        ''; // adds doclet above to the transpiled file\n\n        return EMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MultipleLinesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Wojciech Chmiel\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: { prototype: smaProto } } = SeriesRegistry.seriesTypes;\n        const { defined, error, merge } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var MultipleLinesComposition;\n        (function (MultipleLinesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Additional lines DOCS names. Elements of linesApiNames array should\n             * be consistent with DOCS line names defined in your implementation.\n             * Notice that linesApiNames should have decreased amount of elements\n             * relative to pointArrayMap (without pointValKey).\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const linesApiNames = ['bottomLine'];\n            /**\n             * Lines ids. Required to plot appropriate amount of lines.\n             * Notice that pointArrayMap should have more elements than\n             * linesApiNames, because it contains main line and additional lines ids.\n             * Also it should be consistent with amount of lines calculated in\n             * getValues method from your implementation.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const pointArrayMap = ['top', 'bottom'];\n            /**\n             * Names of the lines, between which the area should be plotted.\n             * If the drawing of the area should\n             * be disabled for some indicators, leave this option as an empty array.\n             * Names should be the same as the names in the pointArrayMap.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const areaLinesNames = ['top'];\n            /**\n             * Main line id.\n             *\n             * @private\n             * @type {string}\n             */\n            const pointValKey = 'top';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Composition useful for all indicators that have more than one line.\n             * Compose it with your implementation where you will provide the\n             * `getValues` method appropriate to your indicator and `pointArrayMap`,\n             * `pointValKey`, `linesApiNames` properties. Notice that `pointArrayMap`\n             * should be consistent with the amount of lines calculated in the\n             * `getValues` method.\n             *\n             * @private\n             */\n            function compose(IndicatorClass) {\n                const proto = IndicatorClass.prototype;\n                proto.linesApiNames = (proto.linesApiNames ||\n                    linesApiNames.slice());\n                proto.pointArrayMap = (proto.pointArrayMap ||\n                    pointArrayMap.slice());\n                proto.pointValKey = (proto.pointValKey ||\n                    pointValKey);\n                proto.areaLinesNames = (proto.areaLinesNames ||\n                    areaLinesNames.slice());\n                proto.drawGraph = indicatorDrawGraph;\n                proto.getGraphPath = indicatorGetGraphPath;\n                proto.toYData = indicatorToYData;\n                proto.translate = indicatorTranslate;\n                return IndicatorClass;\n            }\n            MultipleLinesComposition.compose = compose;\n            /**\n             * Generate the API name of the line\n             *\n             * @private\n             * @param propertyName name of the line\n             */\n            function getLineName(propertyName) {\n                return ('plot' +\n                    propertyName.charAt(0).toUpperCase() +\n                    propertyName.slice(1));\n            }\n            /**\n             * Create translatedLines Collection based on pointArrayMap.\n             *\n             * @private\n             * @param {string} [excludedValue]\n             *        Main line id\n             * @return {Array<string>}\n             *         Returns translated lines names without excluded value.\n             */\n            function getTranslatedLinesNames(indicator, excludedValue) {\n                const translatedLines = [];\n                (indicator.pointArrayMap || []).forEach((propertyName) => {\n                    if (propertyName !== excludedValue) {\n                        translatedLines.push(getLineName(propertyName));\n                    }\n                });\n                return translatedLines;\n            }\n            /**\n             * Draw main and additional lines.\n             *\n             * @private\n             */\n            function indicatorDrawGraph() {\n                const indicator = this, pointValKey = indicator.pointValKey, linesApiNames = indicator.linesApiNames, areaLinesNames = indicator.areaLinesNames, mainLinePoints = indicator.points, mainLineOptions = indicator.options, mainLinePath = indicator.graph, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, \n                // additional lines point place holders:\n                secondaryLines = [], secondaryLinesNames = getTranslatedLinesNames(indicator, pointValKey);\n                let pointsLength = mainLinePoints.length, point;\n                // Generate points for additional lines:\n                secondaryLinesNames.forEach((plotLine, index) => {\n                    // create additional lines point place holders\n                    secondaryLines[index] = [];\n                    while (pointsLength--) {\n                        point = mainLinePoints[pointsLength];\n                        secondaryLines[index].push({\n                            x: point.x,\n                            plotX: point.plotX,\n                            plotY: point[plotLine],\n                            isNull: !defined(point[plotLine])\n                        });\n                    }\n                    pointsLength = mainLinePoints.length;\n                });\n                // Modify options and generate area fill:\n                if (indicator.userOptions.fillColor && areaLinesNames.length) {\n                    const index = secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])), secondLinePoints = secondaryLines[index], firstLinePoints = areaLinesNames.length === 1 ?\n                        mainLinePoints :\n                        secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))], originalColor = indicator.color;\n                    indicator.points = firstLinePoints;\n                    indicator.nextPoints = secondLinePoints;\n                    indicator.color = indicator.userOptions.fillColor;\n                    indicator.options = merge(mainLinePoints, gappedExtend);\n                    indicator.graph = indicator.area;\n                    indicator.fillGraph = true;\n                    smaProto.drawGraph.call(indicator);\n                    indicator.area = indicator.graph;\n                    // Clean temporary properties:\n                    delete indicator.nextPoints;\n                    delete indicator.fillGraph;\n                    indicator.color = originalColor;\n                }\n                // Modify options and generate additional lines:\n                linesApiNames.forEach((lineName, i) => {\n                    if (secondaryLines[i]) {\n                        indicator.points = secondaryLines[i];\n                        if (mainLineOptions[lineName]) {\n                            indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        }\n                        else {\n                            error('Error: \"There is no ' + lineName +\n                                ' in DOCS options declared. Check if linesApiNames' +\n                                ' are consistent with your DOCS line names.\"');\n                        }\n                        indicator.graph = indicator['graph' + lineName];\n                        smaProto.drawGraph.call(indicator);\n                        // Now save lines:\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    else {\n                        error('Error: \"' + lineName + ' doesn\\'t have equivalent ' +\n                            'in pointArrayMap. To many elements in linesApiNames ' +\n                            'relative to pointArrayMap.\"');\n                    }\n                });\n                // Restore options and draw a main line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                smaProto.drawGraph.call(indicator);\n            }\n            /**\n             * Create the path based on points provided as argument.\n             * If indicator.nextPoints option is defined, create the areaFill.\n             *\n             * @private\n             * @param points Points on which the path should be created\n             */\n            function indicatorGetGraphPath(points) {\n                let areaPath, path = [], higherAreaPath = [];\n                points = points || this.points;\n                // Render Span\n                if (this.fillGraph && this.nextPoints) {\n                    areaPath = smaProto.getGraphPath.call(this, this.nextPoints);\n                    if (areaPath && areaPath.length) {\n                        areaPath[0][0] = 'L';\n                        path = smaProto.getGraphPath.call(this, points);\n                        higherAreaPath = areaPath.slice(0, path.length);\n                        // Reverse points, so that the areaFill will start from the end:\n                        for (let i = higherAreaPath.length - 1; i >= 0; i--) {\n                            path.push(higherAreaPath[i]);\n                        }\n                    }\n                }\n                else {\n                    path = smaProto.getGraphPath.apply(this, arguments);\n                }\n                return path;\n            }\n            /**\n             * @private\n             * @param {Highcharts.Point} point\n             *        Indicator point\n             * @return {Array<number>}\n             *         Returns point Y value for all lines\n             */\n            function indicatorToYData(point) {\n                const pointColl = [];\n                (this.pointArrayMap || []).forEach((propertyName) => {\n                    pointColl.push(point[propertyName]);\n                });\n                return pointColl;\n            }\n            /**\n             * Add lines plot pixel values.\n             *\n             * @private\n             */\n            function indicatorTranslate() {\n                const pointArrayMap = this.pointArrayMap;\n                let LinesNames = [], value;\n                LinesNames = getTranslatedLinesNames(this);\n                smaProto.translate.apply(this, arguments);\n                this.points.forEach((point) => {\n                    pointArrayMap.forEach((propertyName, i) => {\n                        value = point[propertyName];\n                        // If the modifier, like for example compare exists,\n                        // modified the original value by that method, #15867.\n                        if (this.dataModify) {\n                            value = this.dataModify.modifyValue(value);\n                        }\n                        if (value !== null) {\n                            point[LinesNames[i]] = this.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n        })(MultipleLinesComposition || (MultipleLinesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MultipleLinesComposition;\n    });\n    _registerModule(_modules, 'masters/indicators/indicators.src.js', [_modules['Core/Globals.js'], _modules['Stock/Indicators/MultipleLinesComposition.js']], function (Highcharts, MultipleLinesComposition) {\n\n        const G = Highcharts;\n        G.MultipleLinesComposition =\n            G.MultipleLinesComposition || MultipleLinesComposition;\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","Chart","SeriesRegistry","U","line","LineSeries","seriesTypes","addEvent","fireEvent","error","extend","isArray","merge","pick","splat","SMAIndicator","destroy","dataEventsToUnbind","forEach","unbinder","arguments","getName","params","name","nameComponents","component","index","push","options","nameSuffixes","nameBase","type","toUpperCase","join","getValues","series","period","xVal","xData","yVal","yData","yValLen","length","SMA","i","range","SMAPoint","sum","values","init","chart","indicator","call","linkedSeriesUnbiner","isUpdating","hasEvents","linkedParent","linkedTo","recalculateValues","calculateOn","xAxis","processedYData","order","eventsToUnbind","croppedDataValues","oldData","points","oldDataLength","overwriteData","oldFirstPointIndex","oldLastPointIndex","croppedData","min","max","processedData","hasGroupedData","visible","cropped","cropData","concat","indexOf","x","shift","updateData","updateAllPoints","data","processedXData","isDirty","redraw","isDirtyData","linkedSeries","processData","compareToMain","dataModify","compareValue","defaultOptions","tooltip","valueDecimals","prototype","hasDerivedData","useCommonDataGrouping","registerSeriesType","sma","correctFloat","EMAIndicator","accumulatePeriodPoints","calculateEma","EMApercent","calEMA","yValue","EMA","EMAPoint","MultipleLinesComposition","smaProto","defined","linesApiNames","pointArrayMap","areaLinesNames","getLineName","propertyName","charAt","slice","getTranslatedLinesNames","excludedValue","translatedLines","indicatorDrawGraph","pointValKey","mainLinePoints","mainLineOptions","mainLinePath","graph","gappedExtend","gapSize","secondaryLines","secondaryLinesNames","pointsLength","point","plotLine","plotX","plotY","isNull","userOptions","fillColor","secondLinePoints","firstLinePoints","originalColor","color","nextPoints","area","fillGraph","drawGraph","lineName","styles","indicatorGetGraphPath","areaPath","higherAreaPath","getGraphPath","indicatorToYData","pointColl","indicatorTranslate","LinesNames","value","translate","modifyValue","yAxis","toPixels","compose","IndicatorClass","proto","toYData","G"],"mappings":"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"}