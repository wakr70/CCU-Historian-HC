{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.2.0 (2023-10-30)\n *\n * Drag-panes module\n *\n * (c) 2010-2021 Highsoft AS\n * Author: Kacper Madej\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/drag-panes', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/DragPanes/AxisResizerDefaults.js', [], function () {\n        /* *\n         *\n         *  Plugin for resizing axes / panes in a chart.\n         *\n         *  (c) 2010-2023 Highsoft AS\n         *\n         *  Author: Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const AxisResizerDefaults = {\n            /**\n             * Minimal size of a resizable axis. Could be set as a percent\n             * of plot area or pixel size.\n             *\n             * @sample {highstock} stock/yaxis/resize-min-max-length\n             *         minLength and maxLength\n             *\n             * @type      {number|string}\n             * @product   highstock\n             * @requires  modules/drag-panes\n             * @apioption yAxis.minLength\n             */\n            minLength: '10%',\n            /**\n             * Maximal size of a resizable axis. Could be set as a percent\n             * of plot area or pixel size.\n             *\n             * @sample {highstock} stock/yaxis/resize-min-max-length\n             *         minLength and maxLength\n             *\n             * @type      {number|string}\n             * @product   highstock\n             * @requires  modules/drag-panes\n             * @apioption yAxis.maxLength\n             */\n            maxLength: '100%',\n            /**\n             * Options for axis resizing. It adds a thick line between panes which\n             * the user can drag in order to resize the panes.\n             *\n             * @sample {highstock} stock/demo/candlestick-and-volume\n             *         Axis resizing enabled\n             *\n             * @product      highstock\n             * @requires     modules/drag-panes\n             * @optionparent yAxis.resize\n             */\n            resize: {\n                /**\n                 * Contains two arrays of axes that are controlled by control line\n                 * of the axis.\n                 *\n                 * @requires modules/drag-panes\n                 */\n                controlledAxis: {\n                    /**\n                     * Array of axes that should move out of the way of resizing\n                     * being done for the current axis. If not set, the next axis\n                     * will be used.\n                     *\n                     * @sample {highstock} stock/yaxis/multiple-resizers\n                     *         Three panes with resizers\n                     * @sample {highstock} stock/yaxis/resize-multiple-axes\n                     *         One resizer controlling multiple axes\n                     *\n                     * @type     {Array<number|string>}\n                     * @default  []\n                     * @requires modules/drag-panes\n                     */\n                    next: [],\n                    /**\n                     * Array of axes that should move with the current axis\n                     * while resizing.\n                     *\n                     * @sample {highstock} stock/yaxis/multiple-resizers\n                     *         Three panes with resizers\n                     * @sample {highstock} stock/yaxis/resize-multiple-axes\n                     *         One resizer controlling multiple axes\n                     *\n                     * @type     {Array<number|string>}\n                     * @default  []\n                     * @requires modules/drag-panes\n                     */\n                    prev: []\n                },\n                /**\n                 * Enable or disable resize by drag for the axis.\n                 *\n                 * @sample {highstock} stock/demo/candlestick-and-volume\n                 *         Enabled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                enabled: false,\n                /**\n                 * Cursor style for the control line.\n                 *\n                 * In styled mode use class `highcharts-axis-resizer` instead.\n                 *\n                 * @requires modules/drag-panes\n                 */\n                cursor: 'ns-resize',\n                /**\n                 * Color of the control line.\n                 *\n                 * In styled mode use class `highcharts-axis-resizer` instead.\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @type     {Highcharts.ColorString}\n                 * @requires modules/drag-panes\n                 */\n                lineColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                /**\n                 * Dash style of the control line.\n                 *\n                 * In styled mode use class `highcharts-axis-resizer` instead.\n                 *\n                 * @see For supported options check [dashStyle](#plotOptions.series.dashStyle)\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                lineDashStyle: 'Solid',\n                /**\n                 * Width of the control line.\n                 *\n                 * In styled mode use class `highcharts-axis-resizer` instead.\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                lineWidth: 4,\n                /**\n                 * Horizontal offset of the control line.\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                x: 0,\n                /**\n                 * Vertical offset of the control line.\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                y: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AxisResizerDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DragPanes/AxisResizer.js', [_modules['Extensions/DragPanes/AxisResizerDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (AxisResizerDefaults, H, U) {\n        /* *\n         *\n         *  Plugin for resizing axes / panes in a chart.\n         *\n         *  (c) 2010-2023 Highsoft AS\n         *\n         *  Author: Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { hasTouch } = H;\n        const { addEvent, clamp, isNumber, relativeLength } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AxisResizer class.\n         *\n         * @private\n         * @class\n         * @name Highcharts.AxisResizer\n         *\n         * @param {Highcharts.Axis} axis\n         *        Main axis for the AxisResizer.\n         */\n        class AxisResizer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(axis) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.axis = void 0;\n                this.controlLine = void 0;\n                this.lastPos = void 0;\n                this.options = void 0;\n                this.init(axis);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize the AxisResizer object.\n             *\n             * @function Highcharts.AxisResizer#init\n             *\n             * @param {Highcharts.Axis} axis\n             *        Main axis for the AxisResizer.\n             */\n            init(axis, update) {\n                this.axis = axis;\n                this.options = axis.options.resize || {};\n                this.render();\n                if (!update) {\n                    // Add mouse events.\n                    this.addMouseEvents();\n                }\n            }\n            /**\n             * Render the AxisResizer\n             *\n             * @function Highcharts.AxisResizer#render\n             */\n            render() {\n                const resizer = this, axis = resizer.axis, chart = axis.chart, options = resizer.options, x = options.x || 0, y = options.y, \n                // Normalize control line position according to the plot area\n                pos = clamp(axis.top + axis.height + y, chart.plotTop, chart.plotTop + chart.plotHeight);\n                let attr = {};\n                if (!chart.styledMode) {\n                    attr = {\n                        cursor: options.cursor,\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth,\n                        dashstyle: options.lineDashStyle\n                    };\n                }\n                // Register current position for future reference.\n                resizer.lastPos = pos - y;\n                if (!resizer.controlLine) {\n                    resizer.controlLine = chart.renderer.path()\n                        .addClass('highcharts-axis-resizer');\n                }\n                // Add to axisGroup after axis update, because the group is recreated\n                // Do .add() before path is calculated because strokeWidth() needs it.\n                resizer.controlLine.add(axis.axisGroup);\n                const lineWidth = chart.styledMode ?\n                    resizer.controlLine.strokeWidth() :\n                    options.lineWidth;\n                attr.d = chart.renderer.crispLine([\n                    ['M', axis.left + x, pos],\n                    ['L', axis.left + axis.width + x, pos]\n                ], lineWidth);\n                resizer.controlLine.attr(attr);\n            }\n            /**\n             * Set up the mouse and touch events for the control line.\n             *\n             * @function Highcharts.AxisResizer#addMouseEvents\n             */\n            addMouseEvents() {\n                const resizer = this, ctrlLineElem = resizer.controlLine.element, container = resizer.axis.chart.container, eventsToUnbind = [];\n                let mouseMoveHandler, mouseUpHandler, mouseDownHandler;\n                // Create mouse events' handlers.\n                // Make them as separate functions to enable wrapping them:\n                resizer.mouseMoveHandler = mouseMoveHandler = (e) => (resizer.onMouseMove(e));\n                resizer.mouseUpHandler = mouseUpHandler = (e) => (resizer.onMouseUp(e));\n                resizer.mouseDownHandler = mouseDownHandler = (e) => (resizer.onMouseDown(e));\n                // Add mouse move and mouseup events. These are bind to doc/container,\n                // because resizer.grabbed flag is stored in mousedown events.\n                eventsToUnbind.push(addEvent(container, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler), addEvent(ctrlLineElem, 'mousedown', mouseDownHandler));\n                // Touch events.\n                if (hasTouch) {\n                    eventsToUnbind.push(addEvent(container, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler), addEvent(ctrlLineElem, 'touchstart', mouseDownHandler));\n                }\n                resizer.eventsToUnbind = eventsToUnbind;\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @function Highcharts.AxisResizer#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event.\n             */\n            onMouseMove(e) {\n                /*\n                 * In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                 * the finger down in the center of the scrollbar. This should\n                 * be ignored. Borrowed from Navigator.\n                 */\n                if (!e.touches || e.touches[0].pageX !== 0) {\n                    // Drag the control line\n                    if (this.grabbed) {\n                        this.hasDragged = true;\n                        this.updateAxes(this.axis.chart.pointer.normalize(e).chartY -\n                            this.options.y);\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @function Highcharts.AxisResizer#onMouseUp\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event.\n             */\n            onMouseUp(e) {\n                if (this.hasDragged) {\n                    this.updateAxes(this.axis.chart.pointer.normalize(e).chartY -\n                        this.options.y);\n                }\n                // Restore runPointActions.\n                this.grabbed = this.hasDragged = this.axis.chart.activeResizer = void 0;\n            }\n            /**\n             * Mousedown on a control line.\n             * Will store necessary information for drag&drop.\n             *\n             * @function Highcharts.AxisResizer#onMouseDown\n             */\n            onMouseDown(e) {\n                // Clear all hover effects.\n                this.axis.chart.pointer.reset(false, 0);\n                // Disable runPointActions.\n                this.grabbed = this.axis.chart.activeResizer = true;\n            }\n            /**\n             * Update all connected axes after a change of control line position\n             *\n             * @function Highcharts.AxisResizer#updateAxes\n             *\n             * @param {number} chartY\n             */\n            updateAxes(chartY) {\n                const resizer = this, chart = resizer.axis.chart, axes = resizer.options.controlledAxis, nextAxes = axes.next.length === 0 ?\n                    [chart.yAxis.indexOf(resizer.axis) + 1] : axes.next, \n                // Main axis is included in the prev array by default\n                prevAxes = [resizer.axis].concat(axes.prev), \n                // prev and next configs\n                axesConfigs = [], plotTop = chart.plotTop, plotHeight = chart.plotHeight, plotBottom = plotTop + plotHeight, calculatePercent = (value) => (value * 100 / plotHeight + '%'), normalize = (val, min, max) => (Math.round(clamp(val, min, max)));\n                // Normalize chartY to plot area limits\n                chartY = clamp(chartY, plotTop, plotBottom);\n                let stopDrag = false, yDelta = chartY - resizer.lastPos;\n                // Update on changes of at least 1 pixel in the desired direction\n                if (yDelta * yDelta < 1) {\n                    return;\n                }\n                let isFirst = true;\n                // First gather info how axes should behave\n                for (const axesGroup of [prevAxes, nextAxes]) {\n                    for (const axisInfo of axesGroup) {\n                        // Axes given as array index, axis object or axis id\n                        const axis = isNumber(axisInfo) ?\n                            // If it's a number - it's an index\n                            chart.yAxis[axisInfo] :\n                            (\n                            // If it's first elem. in first group\n                            isFirst ?\n                                // then it's an Axis object\n                                axisInfo :\n                                // else it should be an id\n                                chart.get(axisInfo)), axisOptions = axis && axis.options, optionsToUpdate = {};\n                        let height, top;\n                        // Skip if axis is not found\n                        // or it is navigator's yAxis (#7732)\n                        if (!axisOptions ||\n                            axisOptions.id === 'navigator-y-axis') {\n                            isFirst = false;\n                            continue;\n                        }\n                        top = axis.top;\n                        const minLength = Math.round(relativeLength(axisOptions.minLength || NaN, plotHeight)), maxLength = Math.round(relativeLength(axisOptions.maxLength || NaN, plotHeight));\n                        if (!isFirst) {\n                            // Try to change height first. yDelta could had changed\n                            yDelta = chartY - resizer.lastPos;\n                            // Normalize height to option limits\n                            height = normalize(axis.len - yDelta, minLength, maxLength);\n                            // Adjust top, so the axis looks like shrinked from top\n                            top = axis.top + yDelta;\n                            // Check for plot area limits\n                            if (top + height > plotBottom) {\n                                const hDelta = plotBottom - height - top;\n                                chartY += hDelta;\n                                top += hDelta;\n                            }\n                            // Fit to plot - when overflowing on top\n                            if (top < plotTop) {\n                                top = plotTop;\n                                if (top + height > plotBottom) {\n                                    height = plotHeight;\n                                }\n                            }\n                            // If next axis meets min length, stop dragging:\n                            if (height === minLength) {\n                                stopDrag = true;\n                            }\n                            axesConfigs.push({\n                                axis: axis,\n                                options: {\n                                    top: calculatePercent(top - plotTop),\n                                    height: calculatePercent(height)\n                                }\n                            });\n                        }\n                        else {\n                            // Normalize height to option limits\n                            height = normalize(chartY - top, minLength, maxLength);\n                            // If prev axis meets max length, stop dragging:\n                            if (height === maxLength) {\n                                stopDrag = true;\n                            }\n                            // Check axis size limits\n                            chartY = top + height;\n                            axesConfigs.push({\n                                axis: axis,\n                                options: {\n                                    height: calculatePercent(height)\n                                }\n                            });\n                        }\n                        isFirst = false;\n                        optionsToUpdate.height = height;\n                    }\n                }\n                // If we hit the min/maxLength with dragging, don't do anything:\n                if (!stopDrag) {\n                    // Now update axes:\n                    for (const config of axesConfigs) {\n                        config.axis.update(config.options, false);\n                    }\n                    chart.redraw(false);\n                }\n            }\n            /**\n             * Destroy AxisResizer. Clear outside references, clear events,\n             * destroy elements, nullify properties.\n             *\n             * @function Highcharts.AxisResizer#destroy\n             */\n            destroy() {\n                const resizer = this, axis = resizer.axis;\n                // Clear resizer in axis\n                delete axis.resizer;\n                // Clear control line events\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach((unbind) => unbind());\n                }\n                // Destroy AxisResizer elements\n                resizer.controlLine.destroy();\n                // Nullify properties\n                for (const key of Object.keys(resizer)) {\n                    resizer[key] = null;\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        // Default options for AxisResizer.\n        AxisResizer.resizerOptions = AxisResizerDefaults;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AxisResizer;\n    });\n    _registerModule(_modules, 'Extensions/DragPanes/DragPanes.js', [_modules['Extensions/DragPanes/AxisResizer.js'], _modules['Core/Utilities.js']], function (AxisResizer, U) {\n        /* *\n         *\n         *  Plugin for resizing axes / panes in a chart.\n         *\n         *  (c) 2010-2021 Highsoft AS\n         *\n         *  Author: Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, merge, wrap } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, PointerClass) {\n            if (U.pushUnique(composedMembers, AxisClass)) {\n                merge(true, AxisClass.defaultOptions, AxisResizer.resizerOptions);\n                // Keep resizer reference on axis update\n                AxisClass.keepProps.push('resizer');\n                addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                addEvent(AxisClass, 'destroy', onAxisDestroy);\n            }\n            if (U.pushUnique(composedMembers, PointerClass)) {\n                wrap(PointerClass.prototype, 'runPointActions', wrapPointerRunPointActions);\n                wrap(PointerClass.prototype, 'drag', wrapPointerDrag);\n            }\n        }\n        /**\n         * Add new AxisResizer, update or remove it\n         * @private\n         */\n        function onAxisAfterRender() {\n            const axis = this, resizer = axis.resizer, resizerOptions = axis.options.resize;\n            if (resizerOptions) {\n                const enabled = resizerOptions.enabled !== false;\n                if (resizer) {\n                    // Resizer present and enabled\n                    if (enabled) {\n                        // Update options\n                        resizer.init(axis, true);\n                        // Resizer present, but disabled\n                    }\n                    else {\n                        // Destroy the resizer\n                        resizer.destroy();\n                    }\n                }\n                else {\n                    // Resizer not present and enabled\n                    if (enabled) {\n                        // Add new resizer\n                        axis.resizer = new AxisResizer(axis);\n                    }\n                    // Resizer not present and disabled, so do nothing\n                }\n            }\n        }\n        /**\n         * Clear resizer on axis remove.\n         * @private\n         */\n        function onAxisDestroy(e) {\n            const axis = this;\n            if (!e.keepEvents && axis.resizer) {\n                axis.resizer.destroy();\n            }\n        }\n        /**\n         * Prevent default drag action detection while dragging a control line of\n         * AxisResizer. (#7563)\n         * @private\n         */\n        function wrapPointerDrag(proceed) {\n            const pointer = this;\n            if (!pointer.chart.activeResizer) {\n                proceed.apply(pointer, [].slice.call(arguments, 1));\n            }\n        }\n        /**\n         * Prevent any hover effects while dragging a control line of AxisResizer.\n         * @private\n         */\n        function wrapPointerRunPointActions(proceed) {\n            const pointer = this;\n            if (!pointer.chart.activeResizer) {\n                proceed.apply(pointer, [].slice.call(arguments, 1));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DragPanes = {\n            compose\n        };\n\n        return DragPanes;\n    });\n    _registerModule(_modules, 'masters/modules/drag-panes.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DragPanes/AxisResizer.js'], _modules['Extensions/DragPanes/DragPanes.js']], function (Highcharts, AxisResizer, DragPanes) {\n\n        const G = Highcharts;\n        G.AxisResizer = AxisResizer;\n        DragPanes.compose(G.Axis, G.Pointer);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","minLength","maxLength","resize","controlledAxis","next","prev","enabled","cursor","lineColor","lineDashStyle","lineWidth","x","y","AxisResizerDefaults","H","U","hasTouch","addEvent","clamp","isNumber","relativeLength","AxisResizer","constructor","axis","controlLine","lastPos","options","init","update","render","addMouseEvents","resizer","chart","pos","top","height","plotTop","plotHeight","attr","styledMode","stroke","dashstyle","renderer","addClass","add","axisGroup","strokeWidth","d","crispLine","left","width","mouseMoveHandler","mouseUpHandler","mouseDownHandler","ctrlLineElem","element","container","eventsToUnbind","e","onMouseMove","onMouseUp","onMouseDown","push","ownerDocument","touches","pageX","grabbed","hasDragged","updateAxes","pointer","normalize","chartY","activeResizer","reset","axes","nextAxes","length","yAxis","indexOf","prevAxes","concat","axesConfigs","plotBottom","calculatePercent","value","val","min","max","Math","round","stopDrag","yDelta","isFirst","axesGroup","axisInfo","get","axisOptions","optionsToUpdate","id","NaN","len","hDelta","config","redraw","destroy","key","forEach","unbind","Object","keys","resizerOptions","merge","wrap","composedMembers","onAxisAfterRender","onAxisDestroy","keepEvents","wrapPointerDrag","proceed","slice","call","arguments","wrapPointerRunPointActions","compose","AxisClass","PointerClass","pushUnique","defaultOptions","keepProps","prototype","DragPanes","G","Axis","Pointer"],"mappings":"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"}